{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default_bak.png","path":"img/default_bak.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1667012617510},{"_id":"source/_posts/hello-world.md","hash":"453bf995b628f74b5777eff758fe280ebbdd6750","modified":1667062842933},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1655372397000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1655372397000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1655372397000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1655372397000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1655372397000},{"_id":"themes/fluid/package.json","hash":"0bc354a01c5e6e9de43bf67456dc16c59d400139","modified":1655372397000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1655372397000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1655372397000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1655372397000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1655372397000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1655372397000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1655372397000},{"_id":"themes/fluid/_config.yml","hash":"88d57ef0d6f354aae8a529c19cfbd05bdb01e9a1","modified":1667030638447},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1655372397000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1655372397000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"5d23a032789a0ee121bd9f071d1500d2b84a7503","modified":1667018295421},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1655372397000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1655372397000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1655372397000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1655372397000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1655372397000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1655372397000},{"_id":"themes/fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":1655372397000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1655372397000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1655372397000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1655372397000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1655372397000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1655372397000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1655372397000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1655372397000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"776949aa697dffd54e9b1957d9245028879509a3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1655372397000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1655372397000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1655372397000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1655372397000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1655372397000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1655372397000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1655372397000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1655372397000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1655372397000},{"_id":"themes/fluid/source/img/default.png","hash":"bab8864a2793d74e04401d37023d83c71df46b91","modified":1659959926992},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1655372397000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1655372397000},{"_id":"themes/fluid/source/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1655372397000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1655372397000},{"_id":"themes/fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1655372397000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1655372397000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1655372397000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1655372397000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1655372397000},{"_id":"themes/fluid/source/js/plugins.js","hash":"efe81fb3118d21c390e622fdd623a04f5c46cb57","modified":1667030602701},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1655372397000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1655372397000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"cbcf6905f4990a22895a848e29dd4c05592a9043","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"94c1ce6e312932e876886ba24b082ae34515a038","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1667019452547},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1655372397000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"6622160087b47cdbbb0acde5ae24f83362c478f6","modified":1667012462434},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1655372397000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"7ce911b6e2e1befcfc2d6ac1292e1dde96ea47b9","modified":1667029122718},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1655372397000},{"_id":"themes/fluid/source/img/default_bak.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1655372397000},{"_id":"public/local-search.xml","hash":"36cc57b2496278e60bf29bdff319da52774230d4","modified":1667066710603},{"_id":"public/archives/index.html","hash":"880803c10684a4124d32a169e83b7a7b4053ee3f","modified":1667066710603},{"_id":"public/archives/2022/index.html","hash":"4adc6db04cf6b7a761d5e08961fa616ddc04b3ac","modified":1667066710603},{"_id":"public/categories/test/index.html","hash":"a55fc698998de56ccaafc73ea72e13b9dabc283d","modified":1667066710603},{"_id":"public/archives/2022/08/index.html","hash":"0705146deb0fb2e3a925d56fce5d945fc0aaf94a","modified":1667052919528},{"_id":"public/index.html","hash":"93898c8cdaff2213e9ddcd130e23a257183eabe0","modified":1667066710603},{"_id":"public/404.html","hash":"3744b3107bf3b380945ff9bf0656348f59d0d22d","modified":1667066710603},{"_id":"public/2022/08/08/hello-world/index.html","hash":"6f51379981ef2933cd3efbc1390547c4b9aa6e07","modified":1667052919528},{"_id":"public/categories/index.html","hash":"a98e418898f95a7cc3503f1c0a4986f9c18705e8","modified":1667066710603},{"_id":"public/tags/index.html","hash":"33a0123e96180f3504b3dbbcc8a3ea5fe48c6799","modified":1667066710603},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1667052919528},{"_id":"public/img/default.png","hash":"bab8864a2793d74e04401d37023d83c71df46b91","modified":1667052919528},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1667052919528},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1667052919528},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1667052919528},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1667052919528},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1667052919528},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1667052919528},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1667052919528},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1667052919528},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1667052919528},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1667052919528},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1667052919528},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1667052919528},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1667052919528},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1667052919528},{"_id":"public/js/plugins.js","hash":"efe81fb3118d21c390e622fdd623a04f5c46cb57","modified":1667052919528},{"_id":"public/css/main.css","hash":"6d341d5f4a506e29d44567ad7481b0fb23d26388","modified":1667052919528},{"_id":"public/img/default_bak.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1667052919528},{"_id":"source/_posts/算法/.DS_Store","hash":"4b811c9d52d25be6d0bcf9906f6d4ea108c6b70b","modified":1667062751662},{"_id":"source/_posts/算法/leetcode/1091.二进制矩阵中的最短路径.md","hash":"b1ee44a8190b5617a10f085cdc93a8ee4bd9974d","modified":1667066571445},{"_id":"source/_posts/.DS_Store","hash":"d329ace94c98d5b7e4f5593be7803815f4442f55","modified":1667062744337},{"_id":"source/_posts/算法/leetcode/122.买卖股票的最佳时机 II.md","hash":"286cf0e6daabffd5225974036412948b45f3a67a","modified":1667066352503},{"_id":"source/_posts/算法/leetcode/1011.D天内送达包裹的能力.md","hash":"8add93d97cc1a44bcba3eaa4b158041556037200","modified":1667066564802},{"_id":"source/_posts/算法/leetcode/125. 验证回文串.md","hash":"6c45f90acb1522e225b74edbfa7a384547c58833","modified":1667066358984},{"_id":"source/_posts/算法/leetcode/130.被围绕的区域.md","hash":"fcb5cb4b739ddeeab8c9146b8d679a1cdf460964","modified":1667066364201},{"_id":"source/_posts/算法/leetcode/136.邻值查找.md","hash":"6f6b1133ae6e4424f011774f52f83e33faa8e947","modified":1667066369334},{"_id":"source/_posts/算法/leetcode/1334.阈值距离内邻居最少的城市.md","hash":"9cacc04a5d1fdccf828b040fce01c531011895da","modified":1667066586144},{"_id":"source/_posts/算法/leetcode/120.三角形最小路径和.md","hash":"f2fd426324ee0dd2bab05634044fa3511cc5e6e3","modified":1667066347039},{"_id":"source/_posts/算法/leetcode/152.乘积最大子数组.md","hash":"bcbba93389ae61e22ad008073f939062620641a0","modified":1667066384391},{"_id":"source/_posts/算法/leetcode/154. 寻找旋转排序数组中的最小值 2.md","hash":"e5bfc6dacb9ba771ef85bf6e850fffecda85b115","modified":1667066391064},{"_id":"source/_posts/算法/leetcode/1584.连接所有点的最小费用.md","hash":"c5e45123326f074a7cf05e5100ef6135785a02f1","modified":1667066598748},{"_id":"source/_posts/算法/leetcode/146.LRU缓存.md","hash":"d500c6def086771be51a9437b5c80b12c11e1eb0","modified":1667066375630},{"_id":"source/_posts/算法/leetcode/17.电话号码的字母组合.md","hash":"b92009cee33c64346a42c4aff22a00612f810366","modified":1667066109933},{"_id":"source/_posts/算法/leetcode/198.打家劫舍.md","hash":"9c1703ad9b01d7308ca3572d024dfcb17f8d20b2","modified":1667066398885},{"_id":"source/_posts/算法/leetcode/18.四数之和.md","hash":"8f5d8eaf80cd0d2034eddd7c0f30c78b701fee5a","modified":1667066120657},{"_id":"source/_posts/算法/leetcode/200.岛屿数量.md","hash":"8381a883fe80b612b82ea73bbf71a2c48e2bcb2b","modified":1667066404193},{"_id":"source/_posts/算法/leetcode/208.实现 Trie (前缀树).md","hash":"f4f0e9493117d934cb4284af572a32083716423a","modified":1667066409472},{"_id":"source/_posts/算法/leetcode/22.括号生成.md","hash":"269a26a0db0beb59a055bbf79b4a810a7c48a1cf","modified":1667066128468},{"_id":"source/_posts/算法/leetcode/210.课程表2.md","hash":"ebee5b061d65e8ddf3fd36899c6e8d73b159d44b","modified":1667066415055},{"_id":"source/_posts/算法/leetcode/23. 合并K个升序链表.md","hash":"18116f4615ed35bf6a2dba4ac2674ef6c93834d9","modified":1667066134889},{"_id":"source/_posts/算法/leetcode/300.最长递增子序列.md","hash":"0d8f7d5b92cdc0fa9bc4ebc08a9dd14dab8a6815","modified":1667066436594},{"_id":"source/_posts/算法/leetcode/239.滑动窗口最大值.md","hash":"63fe35e1560ca0197f3625f5a1891dd64212472d","modified":1667066420637},{"_id":"source/_posts/算法/leetcode/297.二叉树的序列化与反序列化.md","hash":"504bb1f0041b9a55bfa7d4469f175920d33bd52d","modified":1667066431433},{"_id":"source/_posts/算法/leetcode/279.完全平方数.md","hash":"abbe5acf265ae1debda62cefcd57cec4b4a384fc","modified":1667066425841},{"_id":"source/_posts/算法/leetcode/327.区间的个数.md","hash":"7a6246573aca2e2b1c3dece661747361ea382ab5","modified":1667066452135},{"_id":"source/_posts/算法/leetcode/394. 字符串解码.md","hash":"86fb135c9b2efa3337fbdd448fa64c0a8d7ac9c4","modified":1667066468830},{"_id":"source/_posts/算法/leetcode/337.打家劫舍 III.md","hash":"6565575fe51429217ff5b234f5496d75ce391466","modified":1667066461253},{"_id":"source/_posts/算法/leetcode/322.零钱兑换.md","hash":"fd47b77ab823ec9a0984e8cc20e3e445e2fb685d","modified":1667066445954},{"_id":"source/_posts/算法/leetcode/450.删除二叉搜索树中的节点.md","hash":"cedb7f9d2cb37bf7b44950e789c95bbe88b45429","modified":1667066480633},{"_id":"source/_posts/算法/leetcode/433.最小基因变化.md","hash":"243c178f405208f753621aeb4bd2c1f425636df2","modified":1667066474632},{"_id":"source/_posts/算法/leetcode/34.在排序数组中查找元素的第一个和最后一个位置.md","hash":"20f094a0ce32abf056c8c64ee3e590f4c94d6a24","modified":1667066145441},{"_id":"source/_posts/算法/leetcode/47.全排列2.md","hash":"e90ed805357073cb05d07fb513f6f14f79a336bd","modified":1667066159431},{"_id":"source/_posts/算法/leetcode/50.x的n次幂.md","hash":"916ac853c0137d2ebe4d321688ecee508fc57b1b","modified":1667066165987},{"_id":"source/_posts/算法/leetcode/45. 跳跃游戏 II.md","hash":"44cd3f5568c21341cb94d92125b2d798f0360488","modified":1667066152741},{"_id":"source/_posts/算法/leetcode/51.N皇后问题.md","hash":"2cdc4b1668d2f33c4a13b9aaa941498c187d07ce","modified":1667066173608},{"_id":"source/_posts/算法/leetcode/53.最大子序和.md","hash":"8eb138872e173376e96ba9e3b57dfd03fb5c9606","modified":1667066181560},{"_id":"source/_posts/算法/leetcode/518.零钱兑换 II.md","hash":"fbcbd9d63f1f820fe41e629a30716cc9792778d1","modified":1667066496081},{"_id":"source/_posts/算法/leetcode/56.合并区间.md","hash":"9d682780496847c37d32a7b839ccde7f319263a1","modified":1667066188488},{"_id":"source/_posts/算法/leetcode/516.最大回文子序列.md","hash":"547b7a6b6ee2ae9b6aa1d9e123edb93bfbc68476","modified":1667066488226},{"_id":"source/_posts/算法/leetcode/547.省份数量.md","hash":"0aaa27820e7cf8714965026681dba214e375ac31","modified":1667066502683},{"_id":"source/_posts/算法/leetcode/684.冗余链接.md","hash":"e8db93b0603645856d8ab1956384e8e0491a6a58","modified":1667066518898},{"_id":"source/_posts/算法/leetcode/673.最长递增子序列的个数.md","hash":"69f800bac5fba7ea53b58593b39d7f07fb8c1b94","modified":1667066513605},{"_id":"source/_posts/算法/leetcode/704.二分查找.md","hash":"6a5ecb306c57c685742d9fb389b489a7b13de827","modified":1667066535442},{"_id":"source/_posts/算法/leetcode/560. 和为 K 的子数组.md","hash":"5d39e197350dd0d69a5ad69187768b98ad070aff","modified":1667066508143},{"_id":"source/_posts/算法/leetcode/685.冗余链接2.md","hash":"c921ce7247d5274335115bbd2f28740eee2e4722","modified":1667066525129},{"_id":"source/_posts/算法/leetcode/699. 掉落的方块.md","hash":"3a23b831a8bc7ba6bc7cc885cdfefda9de873f26","modified":1667066529713},{"_id":"source/_posts/算法/leetcode/72.编辑距离.md","hash":"6e020ebf00d1d68e94648962ce703272ce8103f5","modified":1667066325529},{"_id":"source/_posts/算法/leetcode/721.账户合并.md","hash":"b9e281a8fe1f8cf4374e5a156bc6b51abcd41133","modified":1667066546155},{"_id":"source/_posts/算法/leetcode/743. 网络延迟.md","hash":"5034664af11b9817670be1fcc66b88330207ee71","modified":1667066552492},{"_id":"source/_posts/算法/leetcode/77.组合.md","hash":"4b8d40389b5f3e33a4c8185000391ed52d14a9a9","modified":1667066330816},{"_id":"source/_posts/算法/leetcode/918.环形子数组的最大和.md","hash":"90b0babf20ed3bb4bc67797b78dd8efe98f7eeb0","modified":1667066559416},{"_id":"source/_posts/算法/leetcode/78.子集.md","hash":"0bcda72e17629b9d571fe726f033d2124a157832","modified":1667066336062},{"_id":"source/_posts/算法/leetcode/8.字符串转换整数 (atoi).md","hash":"3b77a9668ae817b337ef97c5e0723743f79bb066","modified":1667066094105},{"_id":"source/_posts/算法/leetcode/98.验证二叉搜索树.md","hash":"c0ab316bf0626f67d15b9ab9b98f02265cdc4729","modified":1667066341284},{"_id":"public/archives/page/2/index.html","hash":"c81c5b86305a4cd90f73279d42c6ee89e1a8ff57","modified":1667066710603},{"_id":"public/archives/page/4/index.html","hash":"063d6b68559e922675b40671cf59394679352493","modified":1667066710603},{"_id":"public/archives/page/5/index.html","hash":"731a218caad4f6a235d91ba87165313e31c37641","modified":1667066710603},{"_id":"public/archives/page/3/index.html","hash":"4f76b32db77b2fd82cde53f8e8b2b380a6d0029e","modified":1667066710603},{"_id":"public/archives/page/6/index.html","hash":"256cf972183c266898a0718fdd7893e3e29a9bce","modified":1667066710603},{"_id":"public/archives/2021/index.html","hash":"291deffc7da37bd21924584080c064fd9c5158be","modified":1667066710603},{"_id":"public/archives/2021/07/index.html","hash":"355dcc83b2923499d54c16ccd6dccbd555ff6817","modified":1667066710603},{"_id":"public/archives/2022/page/2/index.html","hash":"cee4eb8a34c276947bfe8a84f47fc60fdd95a15a","modified":1667066710603},{"_id":"public/archives/2022/page/4/index.html","hash":"a14496982c2d10014f40a9a832e91e21cb5fbefe","modified":1667066710603},{"_id":"public/archives/2022/page/3/index.html","hash":"da2e0654a1dd50ea5a6cf69d165feaa516000e2a","modified":1667066710603},{"_id":"public/archives/2022/page/5/index.html","hash":"5c4211cb4d6e7fd3f015fea3261ed020ced6f9e7","modified":1667066710603},{"_id":"public/archives/2022/page/6/index.html","hash":"90b3f8754beaf971bdcc4064e851f49c08c42187","modified":1667066710603},{"_id":"public/archives/2022/10/page/2/index.html","hash":"521312237e28cd9c0878bd44b0867414afe19347","modified":1667066710603},{"_id":"public/archives/2022/10/index.html","hash":"9910fe16d58ba229b8d9fede80c89d28c80b1dc7","modified":1667066710603},{"_id":"public/archives/2022/10/page/3/index.html","hash":"774885e63a8bb962735eef5950c083111ef24819","modified":1667066710603},{"_id":"public/archives/2022/10/page/5/index.html","hash":"6a398c261fa3436735db82c817ea49ee0694a9e2","modified":1667066710603},{"_id":"public/archives/2022/10/page/4/index.html","hash":"8e994c41b69e016cdcc372f6539b2c79dcc716c7","modified":1667066710603},{"_id":"public/archives/2022/10/page/6/index.html","hash":"9b69150e52cad3e1a3c6835d6f03e469d24958e7","modified":1667066710603},{"_id":"public/categories/算法/index.html","hash":"0a3771e1b1b7944b3820e80c306f38ba7148a46e","modified":1667066710603},{"_id":"public/categories/算法/page/2/index.html","hash":"c11d1d116324fa1ff3a8d0a338658211d366a56a","modified":1667066710603},{"_id":"public/categories/算法/page/3/index.html","hash":"ce3cb8a0a559e3924de938c98d79b14889ff8b25","modified":1667066710603},{"_id":"public/categories/算法/page/4/index.html","hash":"cd80906a6e541a15181e37d17a02de72e0bcbb2f","modified":1667066710603},{"_id":"public/categories/算法/page/6/index.html","hash":"93603de357676053856e1c0d0dc1666d5d500229","modified":1667066710603},{"_id":"public/categories/算法/page/5/index.html","hash":"3b4c8bfe1f593e8903e7b55d462035cc2768ec0d","modified":1667066710603},{"_id":"public/2022/10/ec1c63ad711f.html","hash":"a366dd7f8d68d460325b9d56e8ec11647ed94f3e","modified":1667066710603},{"_id":"public/2022/10/de179e616e2f.html","hash":"30c06aeea360b55c05ceda6a4a4322892e4d4b55","modified":1667066710603},{"_id":"public/2022/10/e2a40e95cb8e.html","hash":"2b17888fb8dc24747c3eec2066bfae98b719833b","modified":1667066710603},{"_id":"public/2022/10/f24d54386538.html","hash":"388c2e02708a37f7d830a7578ae964b09e2ac29b","modified":1667066710603},{"_id":"public/2022/10/73145eee6a18.html","hash":"8e8f33deede255b03b8091ffd9297705429cb4b2","modified":1667066710603},{"_id":"public/2022/10/511877cab508.html","hash":"c11c7a6328b1420ed2f9db0054bcf32be0c8126d","modified":1667066710603},{"_id":"public/2022/10/6279c213e517.html","hash":"e59853440069ed457aa62c6b91ff7204520ea6ef","modified":1667066710603},{"_id":"public/2022/10/e131d3395beb.html","hash":"28645d87eea8e1ba691eb5c5381e3efae54c3334","modified":1667066710603},{"_id":"public/2022/10/05f9cfe94ab5.html","hash":"13e734c3d23ddf86236d33b0c213868efca2ef27","modified":1667066710603},{"_id":"public/2022/10/b8f1e818411e.html","hash":"43bb8f34b22289dd8a08b2154ebbc75d48f5e16e","modified":1667066710603},{"_id":"public/2022/10/7cc01e3c0f9c.html","hash":"f245ce1cf02b1a613beabd738d4431475101831e","modified":1667066710603},{"_id":"public/2022/10/9a9b422dbc9c.html","hash":"4768d0232802f3ea4c1665b11fcfa3edc6791c9b","modified":1667066710603},{"_id":"public/2022/10/3c7bc3819006.html","hash":"0d02143f046e6a5f57800d5bfa29c257274ef9c0","modified":1667066710603},{"_id":"public/2022/10/0567f8017aef.html","hash":"c521618970e45b5c743f51d879fc157d5ad3d39d","modified":1667066710603},{"_id":"public/2022/10/8098e036ae7a.html","hash":"2de09eb5c9e1d544710be56ea546d500bda5725c","modified":1667066710603},{"_id":"public/2022/10/a67de36ee397.html","hash":"c200ac2cdc83ae1e58b4d9a1e229b8b9296bafa4","modified":1667066710603},{"_id":"public/2022/10/dd705373e44c.html","hash":"bc7ad65c74ae746838b823cff013a7e959791670","modified":1667066710603},{"_id":"public/2022/10/55a14f470a20.html","hash":"753e44e3236463faa31693c01711adf920f3b3bc","modified":1667066710603},{"_id":"public/2022/10/bddbd3cf70b4.html","hash":"4336873c2adeedb1383488dd2ec2a433862b6a68","modified":1667066710603},{"_id":"public/2022/10/45e477d3e7fa.html","hash":"9f54259bf8c9441dd916ebe64b6a098b68d13ac0","modified":1667066710603},{"_id":"public/2022/10/048a4f84fea2.html","hash":"23ec9d234c06fd26d022cdbf107dde2064ab0e56","modified":1667066710603},{"_id":"public/2022/10/5443c70f0253.html","hash":"3a672b9f8e85782298d8d1515809ee758e91ebd3","modified":1667066710603},{"_id":"public/2022/10/7b56613a5fd1.html","hash":"c22fbbe364e58964935f2fae8003e53ee7750c7e","modified":1667066710603},{"_id":"public/2022/10/b49686cfd103.html","hash":"0db714ef0ea30354c226b2f5ab2f31d9d084f61b","modified":1667066710603},{"_id":"public/2022/10/b6ff788a8248.html","hash":"ec84f4f255f7f1d8354ecf00a1ce8f1dfd238de3","modified":1667066710603},{"_id":"public/2022/10/1a7394920bae.html","hash":"9718bf02dd3b4bc7cc54e952178ac9e9f4a6a4bd","modified":1667066710603},{"_id":"public/2022/10/dad09ade22e2.html","hash":"667bd5992ac3d53bf16992daad0d6a6edaaffeed","modified":1667066710603},{"_id":"public/2022/10/70c1eceae87a.html","hash":"c5d7701511a4ae43ac60fe57af394077b0e629ff","modified":1667066710603},{"_id":"public/2022/10/fb633db4c2f8.html","hash":"18d6e32fa2855ac85d860b2504e5493c6d6ef0a5","modified":1667066710603},{"_id":"public/2022/10/3a623efb5ea1.html","hash":"3ce2c5e9a5a9364956b1fba88f9a8c4a93b3c092","modified":1667066710603},{"_id":"public/2022/10/7ea625fa49ca.html","hash":"5fe154e28d0929bd0f47a8095c70fb6afc17f536","modified":1667066710603},{"_id":"public/2022/10/46049c0e1a03.html","hash":"a798522e5aa3bb802836a5903e10881a31cdb2d3","modified":1667066710603},{"_id":"public/2022/10/0b5a067ca7b8.html","hash":"d8187cca031fce138178ec1703b898b03b8faf0e","modified":1667066710603},{"_id":"public/2022/10/b38dac4fa748.html","hash":"da3030509cc0324260d54b2a303eedafd86c23a8","modified":1667066710603},{"_id":"public/2022/10/d62d1ada2b46.html","hash":"a591c271ec42033786fa2d09bdf0f77544f3c606","modified":1667066710603},{"_id":"public/2022/10/7598be12bfef.html","hash":"43797ffea347c88e2476720970eccda6335383a5","modified":1667066710603},{"_id":"public/2022/10/503b4b7292f2.html","hash":"fbf26c2dcdfaa6eafaf780ba5040d536ab57b334","modified":1667066710603},{"_id":"public/2022/10/7d114745de5e.html","hash":"7454fbb39b3c94008bb729e0547c884809d4d830","modified":1667066710603},{"_id":"public/2022/10/a201b1b0136e.html","hash":"56d3137c8ff5256e6c9fcc5cf811e7b4651f05c2","modified":1667066710603},{"_id":"public/2022/10/753589f03a06.html","hash":"3444d0d37718233c7f7a1cbc7cd00bc14cbd91ab","modified":1667066710603},{"_id":"public/2022/10/0778b1967893.html","hash":"c7e54cf04e79b88c2be5dbaf5dde76a98756fbab","modified":1667066710603},{"_id":"public/2022/10/8fd1eed2fd27.html","hash":"c3b1f818c70777e1bb0dd6155c9be9fe391ca4ec","modified":1667066710603},{"_id":"public/2022/10/8e41afa5560b.html","hash":"ea50b90e69463547c075097fe4292d83f2cc5af4","modified":1667066710603},{"_id":"public/2022/10/32022edae77c.html","hash":"5d08e1d083f5946cc418f6306c9de4a1cd502b42","modified":1667066710603},{"_id":"public/2022/10/13c13084d036.html","hash":"ca73d4025eb536739ba8daef3be33a7dc1aa0d50","modified":1667066710603},{"_id":"public/2022/10/39ed4db33528.html","hash":"7f9ce28ad892350414ebff5a046baca09fb51a36","modified":1667066710603},{"_id":"public/2022/10/83581e4e6df1.html","hash":"f2758575668c16b503370218866384b84da893ee","modified":1667066710603},{"_id":"public/2022/10/d4593a6e6598.html","hash":"85c4564738b6be98a037c7ebe3598ea09d2f8d6e","modified":1667066710603},{"_id":"public/2022/10/09591e5f84af.html","hash":"c46a08f4d44da677bd0764dcaa547fc9dee959be","modified":1667066710603},{"_id":"public/2022/10/59dc0a92f412.html","hash":"a020bf48f5e33546844cf13f697780f7aaccb00e","modified":1667066710603},{"_id":"public/2022/10/e664a1f86a9d.html","hash":"6b29efecdc2a34146ad102289c1dae04dcc87e96","modified":1667066710603},{"_id":"public/2022/10/2c32a1e15a2f.html","hash":"821bd026a819b0d4b947f41b200bfdd39fdfe87a","modified":1667066710603},{"_id":"public/2022/10/68e5bb92e835.html","hash":"9ab11749815261935b168d036488acd978f6bf32","modified":1667066710603},{"_id":"public/2022/10/434917cc494b.html","hash":"4ce06e37e1f6653f138f36488c9017e824a52502","modified":1667066710603},{"_id":"public/2021/07/bab4f63a4e38.html","hash":"e1f6eba706b02742852c88c248062fc4a4deba49","modified":1667066710603},{"_id":"public/page/2/index.html","hash":"6c8ff533edd64ea2ef20aeb5b7bdbf8235900f1e","modified":1667066710603},{"_id":"public/page/3/index.html","hash":"2037a99405091acc8d20f9ea7320100f27fb04dc","modified":1667066710603},{"_id":"public/page/4/index.html","hash":"5a90ef541ec71712b16ed0a32ff5793655062f09","modified":1667066710603},{"_id":"public/page/5/index.html","hash":"8dd3b5f66b3c87181e2f853880f7140e442bd367","modified":1667066710603},{"_id":"public/page/6/index.html","hash":"8858004e3f03c2f3beec7b0a0a0738bf3a6b9882","modified":1667066710603}],"Category":[{"name":"test","_id":"cl9u09l8h0001wi4lg2dx51jb"},{"name":"算法","_id":"cl9u8h6oj0002ca4l1snv1krf"}],"Data":[],"Page":[],"Post":[{"title":"你好，世界！","date":"2021-07-13T02:10:20.000Z","category_bar":true,"_content":"\n再次开博！\n","source":"_posts/hello-world.md","raw":"---\ntitle: 你好，世界！\ndate: 2021-7-13 10:10:20\ncategories: test\ncategory_bar: true\n---\n\n再次开博！\n","slug":"hello-world","published":1,"updated":"2022-10-29T17:00:42.933Z","_id":"cl9u09l8a0000wi4l0f509t04","comments":1,"layout":"post","photos":[],"link":"","content":"<p>再次开博！</p>\n","site":{"data":{}},"wordcount":5,"excerpt":"","more":"<p>再次开博！</p>\n"},{"title":"122.买卖股票的最佳时机 II","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n考虑两个状态，天数和当天是否持有股票，不同状态下当天持有的最大现金：\n\n> 当天持有股票：前一天持有并且当天不卖或者前一天没有当天买入。\n   当天没有持有股票：前一天没有持有并且当天不买或者前一天持有当天卖出。\n\n最后一天不持有股票状态下的现金为最大值。\n\n由于第n天的现金只与前一天的现金和是否持有股票有关，所以优化空间只用记录前一天持有和不持有股票的现金即可。\n\n时间复杂度： O(N)\n空间复杂度：O(1)\n\n```Go\nfunc maxProfit(prices []int) int {\n    // dp[i][1] = max(dp[i-1][1], dp[i][0] - prices[i])\n    // dp[i][0] = max(dp[i-1][0], dp[i][1] + prices[i])\n    n := len(prices)\n\n    dp := make([]int, 2)\n    dp = []int{ 0, -prices[0] }\n\n    for i := 1; i < n; i++ {\n        temp0 := dp[0]\n        dp[0] = max(dp[0], dp[1] + prices[i])\n        dp[1] = max(dp[1], temp0 - prices[i])\n    }\n\n    return dp[0]\n\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    \n    return b\n}\n```","source":"_posts/算法/leetcode/122.买卖股票的最佳时机 II.md","raw":"---\ntitle: 122.买卖股票的最佳时机 II\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n考虑两个状态，天数和当天是否持有股票，不同状态下当天持有的最大现金：\n\n> 当天持有股票：前一天持有并且当天不卖或者前一天没有当天买入。\n   当天没有持有股票：前一天没有持有并且当天不买或者前一天持有当天卖出。\n\n最后一天不持有股票状态下的现金为最大值。\n\n由于第n天的现金只与前一天的现金和是否持有股票有关，所以优化空间只用记录前一天持有和不持有股票的现金即可。\n\n时间复杂度： O(N)\n空间复杂度：O(1)\n\n```Go\nfunc maxProfit(prices []int) int {\n    // dp[i][1] = max(dp[i-1][1], dp[i][0] - prices[i])\n    // dp[i][0] = max(dp[i-1][0], dp[i][1] + prices[i])\n    n := len(prices)\n\n    dp := make([]int, 2)\n    dp = []int{ 0, -prices[0] }\n\n    for i := 1; i < n; i++ {\n        temp0 := dp[0]\n        dp[0] = max(dp[0], dp[1] + prices[i])\n        dp[1] = max(dp[1], temp0 - prices[i])\n    }\n\n    return dp[0]\n\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    \n    return b\n}\n```","slug":"leetcode/122.买卖股票的最佳时机 II","published":1,"updated":"2022-10-29T17:59:12.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6oc0000ca4lh92v49yx","content":"<p>动态规划</p>\n<p>考虑两个状态，天数和当天是否持有股票，不同状态下当天持有的最大现金：</p>\n<blockquote>\n<p>当天持有股票：前一天持有并且当天不卖或者前一天没有当天买入。<br>   当天没有持有股票：前一天没有持有并且当天不买或者前一天持有当天卖出。</p>\n</blockquote>\n<p>最后一天不持有股票状态下的现金为最大值。</p>\n<p>由于第n天的现金只与前一天的现金和是否持有股票有关，所以优化空间只用记录前一天持有和不持有股票的现金即可。</p>\n<p>时间复杂度： O(N)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxProfit</span><span class=\"hljs-params\">(prices []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// dp[i][1] = max(dp[i-1][1], dp[i][0] - prices[i])</span><br>    <span class=\"hljs-comment\">// dp[i][0] = max(dp[i-1][0], dp[i][1] + prices[i])</span><br>    n := <span class=\"hljs-built_in\">len</span>(prices)<br><br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">2</span>)<br>    dp = []<span class=\"hljs-type\">int</span>&#123; <span class=\"hljs-number\">0</span>, -prices[<span class=\"hljs-number\">0</span>] &#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; n; i++ &#123;<br>        temp0 := dp[<span class=\"hljs-number\">0</span>]<br>        dp[<span class=\"hljs-number\">0</span>] = max(dp[<span class=\"hljs-number\">0</span>], dp[<span class=\"hljs-number\">1</span>] + prices[i])<br>        dp[<span class=\"hljs-number\">1</span>] = max(dp[<span class=\"hljs-number\">1</span>], temp0 - prices[i])<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>]<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":611,"excerpt":"","more":"<p>动态规划</p>\n<p>考虑两个状态，天数和当天是否持有股票，不同状态下当天持有的最大现金：</p>\n<blockquote>\n<p>当天持有股票：前一天持有并且当天不卖或者前一天没有当天买入。<br>   当天没有持有股票：前一天没有持有并且当天不买或者前一天持有当天卖出。</p>\n</blockquote>\n<p>最后一天不持有股票状态下的现金为最大值。</p>\n<p>由于第n天的现金只与前一天的现金和是否持有股票有关，所以优化空间只用记录前一天持有和不持有股票的现金即可。</p>\n<p>时间复杂度： O(N)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxProfit</span><span class=\"hljs-params\">(prices []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// dp[i][1] = max(dp[i-1][1], dp[i][0] - prices[i])</span><br>    <span class=\"hljs-comment\">// dp[i][0] = max(dp[i-1][0], dp[i][1] + prices[i])</span><br>    n := <span class=\"hljs-built_in\">len</span>(prices)<br><br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">2</span>)<br>    dp = []<span class=\"hljs-type\">int</span>&#123; <span class=\"hljs-number\">0</span>, -prices[<span class=\"hljs-number\">0</span>] &#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; n; i++ &#123;<br>        temp0 := dp[<span class=\"hljs-number\">0</span>]<br>        dp[<span class=\"hljs-number\">0</span>] = max(dp[<span class=\"hljs-number\">0</span>], dp[<span class=\"hljs-number\">1</span>] + prices[i])<br>        dp[<span class=\"hljs-number\">1</span>] = max(dp[<span class=\"hljs-number\">1</span>], temp0 - prices[i])<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>]<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"1091.二进制矩阵中的最短路径","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n```Go\nfunc shortestPathBinaryMatrix(grid [][]int) int {\n\tn := len(grid)\n\tif grid[0][0] == 1 {\n\t\treturn -1\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\n\tq := [][]int{}\n\tvisited := make([][]bool, n)\n\n\tfor i := 0; i < n; i++ {\n\t\tvisited[i] = make([]bool, n)\n\t}\n\tvisited[0][0] = true\n\n\tans := -1\n\tvar bfs func()\n\tvar valid func(int, int) bool\n\n\t// row col\n\tq = append(q, []int{0, 0, 1})\n\n\tbfs = func() {\n\t\tfor len(q) > 0 {\n\t\t\tcurr := q[0]\n\t\t\tq = q[1:]\n\n\t\t\tdx := []int{1, 1, 0, -1, 1, 0, -1, -1}\n\t\t\tdy := []int{1, 0, 1, 1, -1, -1, 0, -1}\n\n\t\t\tfor i := 0; i < 8; i++ {\n\t\t\t\trow := curr[0] + dy[i]\n\t\t\t\tcol := curr[1] + dx[i]\n\n\t\t\t\tif valid(row, col) {\n\t\t\t\t\tvisited[row][col] = true\n\t\t\t\t\tif row == n-1 && col == n-1 {\n\t\t\t\t\t\tans = curr[2] + 1\n\t\t\t\t\t}\n\t\t\t\t\tq = append(q, []int{row, col, curr[2] + 1})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tvalid = func(row, col int) bool {\n\t\tif row < 0 || col < 0 || row >= n || col >= n || visited[row][col] {\n\t\t\treturn false\n\t\t}\n\n\t\treturn grid[row][col] == 0\n\t}\n\n\tbfs()\n\treturn ans\n}\n\nfunc powInt(x, y int) int {\n\treturn int(math.Pow(float64(x), float64(y)))\n}\n```","source":"_posts/算法/leetcode/1091.二进制矩阵中的最短路径.md","raw":"---\ntitle: 1091.二进制矩阵中的最短路径\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n```Go\nfunc shortestPathBinaryMatrix(grid [][]int) int {\n\tn := len(grid)\n\tif grid[0][0] == 1 {\n\t\treturn -1\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\n\tq := [][]int{}\n\tvisited := make([][]bool, n)\n\n\tfor i := 0; i < n; i++ {\n\t\tvisited[i] = make([]bool, n)\n\t}\n\tvisited[0][0] = true\n\n\tans := -1\n\tvar bfs func()\n\tvar valid func(int, int) bool\n\n\t// row col\n\tq = append(q, []int{0, 0, 1})\n\n\tbfs = func() {\n\t\tfor len(q) > 0 {\n\t\t\tcurr := q[0]\n\t\t\tq = q[1:]\n\n\t\t\tdx := []int{1, 1, 0, -1, 1, 0, -1, -1}\n\t\t\tdy := []int{1, 0, 1, 1, -1, -1, 0, -1}\n\n\t\t\tfor i := 0; i < 8; i++ {\n\t\t\t\trow := curr[0] + dy[i]\n\t\t\t\tcol := curr[1] + dx[i]\n\n\t\t\t\tif valid(row, col) {\n\t\t\t\t\tvisited[row][col] = true\n\t\t\t\t\tif row == n-1 && col == n-1 {\n\t\t\t\t\t\tans = curr[2] + 1\n\t\t\t\t\t}\n\t\t\t\t\tq = append(q, []int{row, col, curr[2] + 1})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tvalid = func(row, col int) bool {\n\t\tif row < 0 || col < 0 || row >= n || col >= n || visited[row][col] {\n\t\t\treturn false\n\t\t}\n\n\t\treturn grid[row][col] == 0\n\t}\n\n\tbfs()\n\treturn ans\n}\n\nfunc powInt(x, y int) int {\n\treturn int(math.Pow(float64(x), float64(y)))\n}\n```","slug":"leetcode/1091.二进制矩阵中的最短路径","published":1,"updated":"2022-10-29T18:02:51.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6oh0001ca4l3d7yb259","content":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">shortestPathBinaryMatrix</span><span class=\"hljs-params\">(grid [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(grid)<br>\t<span class=\"hljs-keyword\">if</span> grid[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t&#125;<br><br>\tq := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tvisited := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">bool</span>, n)<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>\t\tvisited[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, n)<br>\t&#125;<br>\tvisited[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">true</span><br><br>\tans := <span class=\"hljs-number\">-1</span><br>\t<span class=\"hljs-keyword\">var</span> bfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span><br>\t<span class=\"hljs-keyword\">var</span> valid <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span><br><br>\t<span class=\"hljs-comment\">// row col</span><br>\tq = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;)<br><br>\tbfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(q) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tcurr := q[<span class=\"hljs-number\">0</span>]<br>\t\t\tq = q[<span class=\"hljs-number\">1</span>:]<br><br>\t\t\tdx := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>\t\t\tdy := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>&#125;<br><br>\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">8</span>; i++ &#123;<br>\t\t\t\trow := curr[<span class=\"hljs-number\">0</span>] + dy[i]<br>\t\t\t\tcol := curr[<span class=\"hljs-number\">1</span>] + dx[i]<br><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> valid(row, col) &#123;<br>\t\t\t\t\tvisited[row][col] = <span class=\"hljs-literal\">true</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> row == n<span class=\"hljs-number\">-1</span> &amp;&amp; col == n<span class=\"hljs-number\">-1</span> &#123;<br>\t\t\t\t\t\tans = curr[<span class=\"hljs-number\">2</span>] + <span class=\"hljs-number\">1</span><br>\t\t\t\t\t&#125;<br>\t\t\t\t\tq = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;row, col, curr[<span class=\"hljs-number\">2</span>] + <span class=\"hljs-number\">1</span>&#125;)<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br><br>\tvalid = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(row, col <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> row &lt; <span class=\"hljs-number\">0</span> || col &lt; <span class=\"hljs-number\">0</span> || row &gt;= n || col &gt;= n || visited[row][col] &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">return</span> grid[row][col] == <span class=\"hljs-number\">0</span><br>\t&#125;<br><br>\tbfs()<br>\t<span class=\"hljs-keyword\">return</span> ans<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">powInt</span><span class=\"hljs-params\">(x, y <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">int</span>(math.Pow(<span class=\"hljs-type\">float64</span>(x), <span class=\"hljs-type\">float64</span>(y)))<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1041,"excerpt":"","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">shortestPathBinaryMatrix</span><span class=\"hljs-params\">(grid [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(grid)<br>\t<span class=\"hljs-keyword\">if</span> grid[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t&#125;<br><br>\tq := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tvisited := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">bool</span>, n)<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>\t\tvisited[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, n)<br>\t&#125;<br>\tvisited[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">true</span><br><br>\tans := <span class=\"hljs-number\">-1</span><br>\t<span class=\"hljs-keyword\">var</span> bfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span><br>\t<span class=\"hljs-keyword\">var</span> valid <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span><br><br>\t<span class=\"hljs-comment\">// row col</span><br>\tq = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;)<br><br>\tbfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(q) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tcurr := q[<span class=\"hljs-number\">0</span>]<br>\t\t\tq = q[<span class=\"hljs-number\">1</span>:]<br><br>\t\t\tdx := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>\t\t\tdy := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>&#125;<br><br>\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">8</span>; i++ &#123;<br>\t\t\t\trow := curr[<span class=\"hljs-number\">0</span>] + dy[i]<br>\t\t\t\tcol := curr[<span class=\"hljs-number\">1</span>] + dx[i]<br><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> valid(row, col) &#123;<br>\t\t\t\t\tvisited[row][col] = <span class=\"hljs-literal\">true</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> row == n<span class=\"hljs-number\">-1</span> &amp;&amp; col == n<span class=\"hljs-number\">-1</span> &#123;<br>\t\t\t\t\t\tans = curr[<span class=\"hljs-number\">2</span>] + <span class=\"hljs-number\">1</span><br>\t\t\t\t\t&#125;<br>\t\t\t\t\tq = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;row, col, curr[<span class=\"hljs-number\">2</span>] + <span class=\"hljs-number\">1</span>&#125;)<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br><br>\tvalid = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(row, col <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> row &lt; <span class=\"hljs-number\">0</span> || col &lt; <span class=\"hljs-number\">0</span> || row &gt;= n || col &gt;= n || visited[row][col] &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">return</span> grid[row][col] == <span class=\"hljs-number\">0</span><br>\t&#125;<br><br>\tbfs()<br>\t<span class=\"hljs-keyword\">return</span> ans<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">powInt</span><span class=\"hljs-params\">(x, y <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">int</span>(math.Pow(<span class=\"hljs-type\">float64</span>(x), <span class=\"hljs-type\">float64</span>(y)))<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"120.三角形最小路径和","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划+空间优化\n\n状态转移方程： `dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1])` \n\n应该记录一个二维数组dp，来维护每个位置的最小路径。但是由于是三角形结构，`dp[i][j]` 只跟 `dp[i-1][j-1]` 和 `dp[i-1][j]` 有关，使用一个一维数组来记录dp，倒序遍历，则计算 \n`i` 行的 `dp[j]` 时，`dp[j-1]` 和 `dp[j]` 还是 `i-1` 行的数据，并不影响计算。\n\n时间复杂度： O(n^2)\n空间复杂度： O(n)\n\n```Go\nfunc minimumTotal(triangle [][]int) int {\n    // dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1])\n\n    n := len(triangle)\n\n    if n == 1 {\n        return triangle[0][0]\n    }\n\n    dp := make([]int, n)\n    dp[0] = triangle[0][0]\n    ans := math.MaxInt\n\n    for i := 1; i < n; i++ {\n        for j := i; j >= 0; j-- {\n            if j == 0 {\n                dp[j] += triangle[i][j]\n            } else if j == i {\n                dp[j] = triangle[i][i] + dp[j-1]\n            } else if dp[j] < dp[j-1] {\n                dp[j] = triangle[i][j] + dp[j]\n            } else {\n                dp[j] = triangle[i][j] + dp[j-1]\n            }\n\n            if i == n - 1 {\n                if dp[j] < ans {\n                    ans = dp[j]\n                }\n            }\n            \n        }\n    }\n\n    return ans\n}\n```","source":"_posts/算法/leetcode/120.三角形最小路径和.md","raw":"---\ntitle: 120.三角形最小路径和\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划+空间优化\n\n状态转移方程： `dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1])` \n\n应该记录一个二维数组dp，来维护每个位置的最小路径。但是由于是三角形结构，`dp[i][j]` 只跟 `dp[i-1][j-1]` 和 `dp[i-1][j]` 有关，使用一个一维数组来记录dp，倒序遍历，则计算 \n`i` 行的 `dp[j]` 时，`dp[j-1]` 和 `dp[j]` 还是 `i-1` 行的数据，并不影响计算。\n\n时间复杂度： O(n^2)\n空间复杂度： O(n)\n\n```Go\nfunc minimumTotal(triangle [][]int) int {\n    // dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1])\n\n    n := len(triangle)\n\n    if n == 1 {\n        return triangle[0][0]\n    }\n\n    dp := make([]int, n)\n    dp[0] = triangle[0][0]\n    ans := math.MaxInt\n\n    for i := 1; i < n; i++ {\n        for j := i; j >= 0; j-- {\n            if j == 0 {\n                dp[j] += triangle[i][j]\n            } else if j == i {\n                dp[j] = triangle[i][i] + dp[j-1]\n            } else if dp[j] < dp[j-1] {\n                dp[j] = triangle[i][j] + dp[j]\n            } else {\n                dp[j] = triangle[i][j] + dp[j-1]\n            }\n\n            if i == n - 1 {\n                if dp[j] < ans {\n                    ans = dp[j]\n                }\n            }\n            \n        }\n    }\n\n    return ans\n}\n```","slug":"leetcode/120.三角形最小路径和","published":1,"updated":"2022-10-29T17:59:07.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6ok0003ca4ldt6q909c","content":"<p>动态规划+空间优化</p>\n<p>状态转移方程： <code>dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1])</code> </p>\n<p>应该记录一个二维数组dp，来维护每个位置的最小路径。但是由于是三角形结构，<code>dp[i][j]</code> 只跟 <code>dp[i-1][j-1]</code> 和 <code>dp[i-1][j]</code> 有关，使用一个一维数组来记录dp，倒序遍历，则计算<br><code>i</code> 行的 <code>dp[j]</code> 时，<code>dp[j-1]</code> 和 <code>dp[j]</code> 还是 <code>i-1</code> 行的数据，并不影响计算。</p>\n<p>时间复杂度： O(n^2)<br>空间复杂度： O(n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minimumTotal</span><span class=\"hljs-params\">(triangle [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1])</span><br><br>    n := <span class=\"hljs-built_in\">len</span>(triangle)<br><br>    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> triangle[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]<br>    &#125;<br><br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>    dp[<span class=\"hljs-number\">0</span>] = triangle[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]<br>    ans := math.MaxInt<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; n; i++ &#123;<br>        <span class=\"hljs-keyword\">for</span> j := i; j &gt;= <span class=\"hljs-number\">0</span>; j-- &#123;<br>            <span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-number\">0</span> &#123;<br>                dp[j] += triangle[i][j]<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> j == i &#123;<br>                dp[j] = triangle[i][i] + dp[j<span class=\"hljs-number\">-1</span>]<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> dp[j] &lt; dp[j<span class=\"hljs-number\">-1</span>] &#123;<br>                dp[j] = triangle[i][j] + dp[j]<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                dp[j] = triangle[i][j] + dp[j<span class=\"hljs-number\">-1</span>]<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> i == n - <span class=\"hljs-number\">1</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> dp[j] &lt; ans &#123;<br>                    ans = dp[j]<br>                &#125;<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":815,"excerpt":"","more":"<p>动态规划+空间优化</p>\n<p>状态转移方程： <code>dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1])</code> </p>\n<p>应该记录一个二维数组dp，来维护每个位置的最小路径。但是由于是三角形结构，<code>dp[i][j]</code> 只跟 <code>dp[i-1][j-1]</code> 和 <code>dp[i-1][j]</code> 有关，使用一个一维数组来记录dp，倒序遍历，则计算<br><code>i</code> 行的 <code>dp[j]</code> 时，<code>dp[j-1]</code> 和 <code>dp[j]</code> 还是 <code>i-1</code> 行的数据，并不影响计算。</p>\n<p>时间复杂度： O(n^2)<br>空间复杂度： O(n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minimumTotal</span><span class=\"hljs-params\">(triangle [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1])</span><br><br>    n := <span class=\"hljs-built_in\">len</span>(triangle)<br><br>    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> triangle[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]<br>    &#125;<br><br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>    dp[<span class=\"hljs-number\">0</span>] = triangle[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]<br>    ans := math.MaxInt<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; n; i++ &#123;<br>        <span class=\"hljs-keyword\">for</span> j := i; j &gt;= <span class=\"hljs-number\">0</span>; j-- &#123;<br>            <span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-number\">0</span> &#123;<br>                dp[j] += triangle[i][j]<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> j == i &#123;<br>                dp[j] = triangle[i][i] + dp[j<span class=\"hljs-number\">-1</span>]<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> dp[j] &lt; dp[j<span class=\"hljs-number\">-1</span>] &#123;<br>                dp[j] = triangle[i][j] + dp[j]<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                dp[j] = triangle[i][j] + dp[j<span class=\"hljs-number\">-1</span>]<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> i == n - <span class=\"hljs-number\">1</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> dp[j] &lt; ans &#123;<br>                    ans = dp[j]<br>                &#125;<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"125. 验证回文串","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n双指针\n\n时间复杂度： O(N)\n空间复杂度：O(N)\n\n\n```Go\nfunc isPalindrome(s string) bool {\n    temp := strings.ToLower(s)\n\n    i, j := 0, len(temp) - 1\n\n    for i < j {\n        for i < j && !isAllowed(temp[i]) {\n            i++\n        }\n        for i < j && !isAllowed(temp[j]) {\n            j--\n        }\n\n        if temp[i] != temp[j] {\n            return false\n        } else {\n            i++\n            j--\n        }\n    }\n\n    return true\n}\n\nfunc isAllowed(ch byte) bool {\n    return (ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')\n}\n```","source":"_posts/算法/leetcode/125. 验证回文串.md","raw":"---\ntitle: 125. 验证回文串\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n双指针\n\n时间复杂度： O(N)\n空间复杂度：O(N)\n\n\n```Go\nfunc isPalindrome(s string) bool {\n    temp := strings.ToLower(s)\n\n    i, j := 0, len(temp) - 1\n\n    for i < j {\n        for i < j && !isAllowed(temp[i]) {\n            i++\n        }\n        for i < j && !isAllowed(temp[j]) {\n            j--\n        }\n\n        if temp[i] != temp[j] {\n            return false\n        } else {\n            i++\n            j--\n        }\n    }\n\n    return true\n}\n\nfunc isAllowed(ch byte) bool {\n    return (ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')\n}\n```","slug":"leetcode/125. 验证回文串","published":1,"updated":"2022-10-29T17:59:18.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6om0004ca4l12nx7ni8","content":"<p>双指针</p>\n<p>时间复杂度： O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isPalindrome</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>    temp := strings.ToLower(s)<br><br>    i, j := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(temp) - <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> i &lt; j &#123;<br>        <span class=\"hljs-keyword\">for</span> i &lt; j &amp;&amp; !isAllowed(temp[i]) &#123;<br>            i++<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> i &lt; j &amp;&amp; !isAllowed(temp[j]) &#123;<br>            j--<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> temp[i] != temp[j] &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            i++<br>            j--<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAllowed</span><span class=\"hljs-params\">(ch <span class=\"hljs-type\">byte</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (ch &gt;= <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;9&#x27;</span>) || (ch &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>) || (ch &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":554,"excerpt":"","more":"<p>双指针</p>\n<p>时间复杂度： O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isPalindrome</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>    temp := strings.ToLower(s)<br><br>    i, j := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(temp) - <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> i &lt; j &#123;<br>        <span class=\"hljs-keyword\">for</span> i &lt; j &amp;&amp; !isAllowed(temp[i]) &#123;<br>            i++<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> i &lt; j &amp;&amp; !isAllowed(temp[j]) &#123;<br>            j--<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> temp[i] != temp[j] &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            i++<br>            j--<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAllowed</span><span class=\"hljs-params\">(ch <span class=\"hljs-type\">byte</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (ch &gt;= <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;9&#x27;</span>) || (ch &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>) || (ch &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"130.被围绕的区域","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n广度优先遍历\n\n时间复杂度：O(n×m)\n空间复杂度：O(n×m)\n\nm,n为矩阵的行数和列数。\n\n```Go\nfunc solve(board [][]byte)  {\n    rows := len(board)\n    cols := len(board[0])\n\n    dx := []int{-1, 0, 0, 1}\n    dy := []int{0, -1, 1, 0}\n\n    q := [][]int{}\n\n    var bfs func(int, int)\n\n    bfs = func(x int, y int) {\n        q = q[1:]\n\n        for i := 0; i < 4; i++ {\n            nx := x + dx[i]\n            ny := y + dy[i]\n\n            if nx >= 0 && nx < rows && ny >= 0 && ny < cols && board[nx][ny] == 'O' {\n                q = append(q, []int{nx, ny})\n                board[nx][ny] = '#'\n            }\n        }\n    }\n\n\t// 先处理四周的岛屿\n    for i := 0; i < rows; i++ {\n        if board[i][0] == 'O' {\n            q = append(q, []int{i, 0})\n            board[i][0] = '#'\n        }\n        if board[i][cols - 1] == 'O' {\n            q = append(q, []int{i, cols - 1})\n            board[i][cols-1] = '#'\n        }\n    }\n\n    for i := 1; i < cols - 1; i++ {\n        if board[0][i] == 'O' {\n            q = append(q, []int{0, i})\n            board[0][i] = '#'\n        }\n        if board[rows-1][i] == 'O' {\n            q = append(q, []int{rows - 1, i})\n            board[rows-1][i] = '#'\n        }\n    }\n\n    // fmt.Printf(\"board: %v\\n\", board)\n\n    for len(q) > 0 {\n        bfs(q[0][0], q[0][1])\n    }\n\n\t// 剩下的岛屿就是被围绕的岛屿，同时把四周的岛屿还原\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            if board[i][j] == '#' {\n                board[i][j] = 'O'\n            } else if board[i][j] == 'O' {\n                board[i][j] = 'X'\n            }\n        }\n    }\n\n}\n```","source":"_posts/算法/leetcode/130.被围绕的区域.md","raw":"---\ntitle: 130.被围绕的区域\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n广度优先遍历\n\n时间复杂度：O(n×m)\n空间复杂度：O(n×m)\n\nm,n为矩阵的行数和列数。\n\n```Go\nfunc solve(board [][]byte)  {\n    rows := len(board)\n    cols := len(board[0])\n\n    dx := []int{-1, 0, 0, 1}\n    dy := []int{0, -1, 1, 0}\n\n    q := [][]int{}\n\n    var bfs func(int, int)\n\n    bfs = func(x int, y int) {\n        q = q[1:]\n\n        for i := 0; i < 4; i++ {\n            nx := x + dx[i]\n            ny := y + dy[i]\n\n            if nx >= 0 && nx < rows && ny >= 0 && ny < cols && board[nx][ny] == 'O' {\n                q = append(q, []int{nx, ny})\n                board[nx][ny] = '#'\n            }\n        }\n    }\n\n\t// 先处理四周的岛屿\n    for i := 0; i < rows; i++ {\n        if board[i][0] == 'O' {\n            q = append(q, []int{i, 0})\n            board[i][0] = '#'\n        }\n        if board[i][cols - 1] == 'O' {\n            q = append(q, []int{i, cols - 1})\n            board[i][cols-1] = '#'\n        }\n    }\n\n    for i := 1; i < cols - 1; i++ {\n        if board[0][i] == 'O' {\n            q = append(q, []int{0, i})\n            board[0][i] = '#'\n        }\n        if board[rows-1][i] == 'O' {\n            q = append(q, []int{rows - 1, i})\n            board[rows-1][i] = '#'\n        }\n    }\n\n    // fmt.Printf(\"board: %v\\n\", board)\n\n    for len(q) > 0 {\n        bfs(q[0][0], q[0][1])\n    }\n\n\t// 剩下的岛屿就是被围绕的岛屿，同时把四周的岛屿还原\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            if board[i][j] == '#' {\n                board[i][j] = 'O'\n            } else if board[i][j] == 'O' {\n                board[i][j] = 'X'\n            }\n        }\n    }\n\n}\n```","slug":"leetcode/130.被围绕的区域","published":1,"updated":"2022-10-29T17:59:24.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6on0005ca4l7asyg3k4","content":"<p>广度优先遍历</p>\n<p>时间复杂度：O(n×m)<br>空间复杂度：O(n×m)</p>\n<p>m,n为矩阵的行数和列数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">(board [][]<span class=\"hljs-type\">byte</span>)</span></span>  &#123;<br>    rows := <span class=\"hljs-built_in\">len</span>(board)<br>    cols := <span class=\"hljs-built_in\">len</span>(board[<span class=\"hljs-number\">0</span>])<br><br>    dx := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;<br>    dy := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;<br><br>    q := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">var</span> bfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span><br><br>    bfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(x <span class=\"hljs-type\">int</span>, y <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>        q = q[<span class=\"hljs-number\">1</span>:]<br><br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++ &#123;<br>            nx := x + dx[i]<br>            ny := y + dy[i]<br><br>            <span class=\"hljs-keyword\">if</span> nx &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; nx &lt; rows &amp;&amp; ny &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; ny &lt; cols &amp;&amp; board[nx][ny] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>                q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;nx, ny&#125;)<br>                board[nx][ny] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 先处理四周的岛屿</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; rows; i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> board[i][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>            q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;i, <span class=\"hljs-number\">0</span>&#125;)<br>            board[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> board[i][cols - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>            q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;i, cols - <span class=\"hljs-number\">1</span>&#125;)<br>            board[i][cols<span class=\"hljs-number\">-1</span>] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; cols - <span class=\"hljs-number\">1</span>; i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> board[<span class=\"hljs-number\">0</span>][i] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>            q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">0</span>, i&#125;)<br>            board[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> board[rows<span class=\"hljs-number\">-1</span>][i] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>            q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;rows - <span class=\"hljs-number\">1</span>, i&#125;)<br>            board[rows<span class=\"hljs-number\">-1</span>][i] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;board: %v\\n&quot;, board)</span><br><br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(q) &gt; <span class=\"hljs-number\">0</span> &#123;<br>        bfs(q[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>], q[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>])<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 剩下的岛屿就是被围绕的岛屿，同时把四周的岛屿还原</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; rows; i++ &#123;<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; cols; j++ &#123;<br>            <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-string\">&#x27;#&#x27;</span> &#123;<br>                board[i][j] = <span class=\"hljs-string\">&#x27;O&#x27;</span><br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>                board[i][j] = <span class=\"hljs-string\">&#x27;X&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1415,"excerpt":"","more":"<p>广度优先遍历</p>\n<p>时间复杂度：O(n×m)<br>空间复杂度：O(n×m)</p>\n<p>m,n为矩阵的行数和列数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">(board [][]<span class=\"hljs-type\">byte</span>)</span></span>  &#123;<br>    rows := <span class=\"hljs-built_in\">len</span>(board)<br>    cols := <span class=\"hljs-built_in\">len</span>(board[<span class=\"hljs-number\">0</span>])<br><br>    dx := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;<br>    dy := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;<br><br>    q := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">var</span> bfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span><br><br>    bfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(x <span class=\"hljs-type\">int</span>, y <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>        q = q[<span class=\"hljs-number\">1</span>:]<br><br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++ &#123;<br>            nx := x + dx[i]<br>            ny := y + dy[i]<br><br>            <span class=\"hljs-keyword\">if</span> nx &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; nx &lt; rows &amp;&amp; ny &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; ny &lt; cols &amp;&amp; board[nx][ny] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>                q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;nx, ny&#125;)<br>                board[nx][ny] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 先处理四周的岛屿</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; rows; i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> board[i][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>            q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;i, <span class=\"hljs-number\">0</span>&#125;)<br>            board[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> board[i][cols - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>            q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;i, cols - <span class=\"hljs-number\">1</span>&#125;)<br>            board[i][cols<span class=\"hljs-number\">-1</span>] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; cols - <span class=\"hljs-number\">1</span>; i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> board[<span class=\"hljs-number\">0</span>][i] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>            q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">0</span>, i&#125;)<br>            board[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> board[rows<span class=\"hljs-number\">-1</span>][i] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>            q = <span class=\"hljs-built_in\">append</span>(q, []<span class=\"hljs-type\">int</span>&#123;rows - <span class=\"hljs-number\">1</span>, i&#125;)<br>            board[rows<span class=\"hljs-number\">-1</span>][i] = <span class=\"hljs-string\">&#x27;#&#x27;</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;board: %v\\n&quot;, board)</span><br><br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(q) &gt; <span class=\"hljs-number\">0</span> &#123;<br>        bfs(q[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>], q[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>])<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 剩下的岛屿就是被围绕的岛屿，同时把四周的岛屿还原</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; rows; i++ &#123;<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; cols; j++ &#123;<br>            <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-string\">&#x27;#&#x27;</span> &#123;<br>                board[i][j] = <span class=\"hljs-string\">&#x27;O&#x27;</span><br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-string\">&#x27;O&#x27;</span> &#123;<br>                board[i][j] = <span class=\"hljs-string\">&#x27;X&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"1011.D天内送达包裹的能力","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/)\n\n承载能力的范围：[最大包裹重量，包裹总重量]\n\n承载能力范围中二分查找，找到让运输天数和需求天数相等的最小承载能力。运输天数小于需求天数时，承载能力可以再减小，反正则应该增大。\n\n每天包裹重量大于承载能力时需等到第二天继续运输。\n\n```Go\nfunc shipWithinDays(weights []int, days int) int {\n    left, right := 0, 0\n    for _, w := range weights {\n        right += w\n        if left < w {\n            left = w\n        }\n    }\n\n    var day, sum int\n    result := right\n\n    for left <= right {\n        day = 1\n        sum = 0\n        mid := (left + right) / 2\n        // fmt.Printf(\"mid: %v\\n\", mid)\n\n\t\t// 每天包裹重量大于承载能力时需等到第二天继续运输\n        for _, w := range weights {\n            if sum + w > mid {\n                day++\n                sum = 0\n            } \n            sum += w\n        }\n        \n        // fmt.Printf(\"day: %v\\n\", day)\n\n        if day <= days {\n            if mid < result {\n                result = mid\n            }\n            right = mid - 1\n        }else {\n            left = mid + 1\n        }\n    }\n\n    return result\n}\n```","source":"_posts/算法/leetcode/1011.D天内送达包裹的能力.md","raw":"---\ntitle: 1011.D天内送达包裹的能力\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/)\n\n承载能力的范围：[最大包裹重量，包裹总重量]\n\n承载能力范围中二分查找，找到让运输天数和需求天数相等的最小承载能力。运输天数小于需求天数时，承载能力可以再减小，反正则应该增大。\n\n每天包裹重量大于承载能力时需等到第二天继续运输。\n\n```Go\nfunc shipWithinDays(weights []int, days int) int {\n    left, right := 0, 0\n    for _, w := range weights {\n        right += w\n        if left < w {\n            left = w\n        }\n    }\n\n    var day, sum int\n    result := right\n\n    for left <= right {\n        day = 1\n        sum = 0\n        mid := (left + right) / 2\n        // fmt.Printf(\"mid: %v\\n\", mid)\n\n\t\t// 每天包裹重量大于承载能力时需等到第二天继续运输\n        for _, w := range weights {\n            if sum + w > mid {\n                day++\n                sum = 0\n            } \n            sum += w\n        }\n        \n        // fmt.Printf(\"day: %v\\n\", day)\n\n        if day <= days {\n            if mid < result {\n                result = mid\n            }\n            right = mid - 1\n        }else {\n            left = mid + 1\n        }\n    }\n\n    return result\n}\n```","slug":"leetcode/1011.D天内送达包裹的能力","published":1,"updated":"2022-10-29T18:02:44.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6op0007ca4l0nkm2bl9","content":"<p><a href=\"https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/\">leetcode</a></p>\n<p>承载能力的范围：[最大包裹重量，包裹总重量]</p>\n<p>承载能力范围中二分查找，找到让运输天数和需求天数相等的最小承载能力。运输天数小于需求天数时，承载能力可以再减小，反正则应该增大。</p>\n<p>每天包裹重量大于承载能力时需等到第二天继续运输。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">shipWithinDays</span><span class=\"hljs-params\">(weights []<span class=\"hljs-type\">int</span>, days <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    left, right := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> _, w := <span class=\"hljs-keyword\">range</span> weights &#123;<br>        right += w<br>        <span class=\"hljs-keyword\">if</span> left &lt; w &#123;<br>            left = w<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> day, sum <span class=\"hljs-type\">int</span><br>    result := right<br><br>    <span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>        day = <span class=\"hljs-number\">1</span><br>        sum = <span class=\"hljs-number\">0</span><br>        mid := (left + right) / <span class=\"hljs-number\">2</span><br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;mid: %v\\n&quot;, mid)</span><br><br>\t\t<span class=\"hljs-comment\">// 每天包裹重量大于承载能力时需等到第二天继续运输</span><br>        <span class=\"hljs-keyword\">for</span> _, w := <span class=\"hljs-keyword\">range</span> weights &#123;<br>            <span class=\"hljs-keyword\">if</span> sum + w &gt; mid &#123;<br>                day++<br>                sum = <span class=\"hljs-number\">0</span><br>            &#125; <br>            sum += w<br>        &#125;<br>        <br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;day: %v\\n&quot;, day)</span><br><br>        <span class=\"hljs-keyword\">if</span> day &lt;= days &#123;<br>            <span class=\"hljs-keyword\">if</span> mid &lt; result &#123;<br>                result = mid<br>            &#125;<br>            right = mid - <span class=\"hljs-number\">1</span><br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":701,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/\">leetcode</a></p>\n<p>承载能力的范围：[最大包裹重量，包裹总重量]</p>\n<p>承载能力范围中二分查找，找到让运输天数和需求天数相等的最小承载能力。运输天数小于需求天数时，承载能力可以再减小，反正则应该增大。</p>\n<p>每天包裹重量大于承载能力时需等到第二天继续运输。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">shipWithinDays</span><span class=\"hljs-params\">(weights []<span class=\"hljs-type\">int</span>, days <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    left, right := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> _, w := <span class=\"hljs-keyword\">range</span> weights &#123;<br>        right += w<br>        <span class=\"hljs-keyword\">if</span> left &lt; w &#123;<br>            left = w<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> day, sum <span class=\"hljs-type\">int</span><br>    result := right<br><br>    <span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>        day = <span class=\"hljs-number\">1</span><br>        sum = <span class=\"hljs-number\">0</span><br>        mid := (left + right) / <span class=\"hljs-number\">2</span><br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;mid: %v\\n&quot;, mid)</span><br><br>\t\t<span class=\"hljs-comment\">// 每天包裹重量大于承载能力时需等到第二天继续运输</span><br>        <span class=\"hljs-keyword\">for</span> _, w := <span class=\"hljs-keyword\">range</span> weights &#123;<br>            <span class=\"hljs-keyword\">if</span> sum + w &gt; mid &#123;<br>                day++<br>                sum = <span class=\"hljs-number\">0</span><br>            &#125; <br>            sum += w<br>        &#125;<br>        <br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;day: %v\\n&quot;, day)</span><br><br>        <span class=\"hljs-keyword\">if</span> day &lt;= days &#123;<br>            <span class=\"hljs-keyword\">if</span> mid &lt; result &#123;<br>                result = mid<br>            &#125;<br>            right = mid - <span class=\"hljs-number\">1</span><br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"1334.阈值距离内邻居最少的城市","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\nFloyd算法计算所有点对之间最短路径。注意先遍历k，才能保证计算k之前，k-1的情况都计算完成了。\n\n时间复杂度：O(N^3)\n空间复杂度：O(N^2)\n\n```Go\nfunc findTheCity(n int, edges [][]int, distanceThreshold int) int {\n    // 构建邻接矩阵\n    d := make([][]int, n)\n\n    for i := 0; i < n; i++ {\n        d[i] = make([]int, n)\n        for j := 0; j < n; j++{\n            if i != j {\n                d[i][j] = math.MaxInt / 2\n            }\n        }\n    }\n\n    for _, edge := range edges {\n        x := edge[0]\n        y := edge[1]\n        z := edge[2]\n\n        d[x][y] = z\n        d[y][x] = z\n    }\n\n    // Floyd算法\n    // d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    // 注意先遍历k，才能保证计算k之前，k-1的情况都计算完成了\n    for k := 0; k < n; k++ {\n        for i := 0; i < n; i++ {\n            for j := 0; j < n; j++ {\n                if k != i && k != j {\n                    d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n                }\n            }\n        }\n    }\n\n    // fmt.Printf(\"d[i][j]: %v\\n\", d)\n\n    minNeighboor := math.MaxInt / 2\n    ans := 0\n\n    for i := 0; i < n; i++ {\n        neighboor := 0\n        for j := 0; j < n; j++ {\n            if i != j && d[i][j] <= distanceThreshold {\n                neighboor++\n            }\n        }\n        if neighboor < minNeighboor || (neighboor == minNeighboor && i > ans) {\n            minNeighboor = neighboor\n            ans = i\n        }\n    }\n\n    return ans\n\n}\n\nfunc min(a, b int) int {\n    if (a > b){\n        return b\n    }\n    return a\n}\n```","source":"_posts/算法/leetcode/1334.阈值距离内邻居最少的城市.md","raw":"---\ntitle: 1334.阈值距离内邻居最少的城市\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\nFloyd算法计算所有点对之间最短路径。注意先遍历k，才能保证计算k之前，k-1的情况都计算完成了。\n\n时间复杂度：O(N^3)\n空间复杂度：O(N^2)\n\n```Go\nfunc findTheCity(n int, edges [][]int, distanceThreshold int) int {\n    // 构建邻接矩阵\n    d := make([][]int, n)\n\n    for i := 0; i < n; i++ {\n        d[i] = make([]int, n)\n        for j := 0; j < n; j++{\n            if i != j {\n                d[i][j] = math.MaxInt / 2\n            }\n        }\n    }\n\n    for _, edge := range edges {\n        x := edge[0]\n        y := edge[1]\n        z := edge[2]\n\n        d[x][y] = z\n        d[y][x] = z\n    }\n\n    // Floyd算法\n    // d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    // 注意先遍历k，才能保证计算k之前，k-1的情况都计算完成了\n    for k := 0; k < n; k++ {\n        for i := 0; i < n; i++ {\n            for j := 0; j < n; j++ {\n                if k != i && k != j {\n                    d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n                }\n            }\n        }\n    }\n\n    // fmt.Printf(\"d[i][j]: %v\\n\", d)\n\n    minNeighboor := math.MaxInt / 2\n    ans := 0\n\n    for i := 0; i < n; i++ {\n        neighboor := 0\n        for j := 0; j < n; j++ {\n            if i != j && d[i][j] <= distanceThreshold {\n                neighboor++\n            }\n        }\n        if neighboor < minNeighboor || (neighboor == minNeighboor && i > ans) {\n            minNeighboor = neighboor\n            ans = i\n        }\n    }\n\n    return ans\n\n}\n\nfunc min(a, b int) int {\n    if (a > b){\n        return b\n    }\n    return a\n}\n```","slug":"leetcode/1334.阈值距离内邻居最少的城市","published":1,"updated":"2022-10-29T18:03:06.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6ou000aca4l4b7e25ya","content":"<p>Floyd算法计算所有点对之间最短路径。注意先遍历k，才能保证计算k之前，k-1的情况都计算完成了。</p>\n<p>时间复杂度：O(N^3)<br>空间复杂度：O(N^2)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findTheCity</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>, edges [][]<span class=\"hljs-type\">int</span>, distanceThreshold <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// 构建邻接矩阵</span><br>    d := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        d[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; n; j++&#123;<br>            <span class=\"hljs-keyword\">if</span> i != j &#123;<br>                d[i][j] = math.MaxInt / <span class=\"hljs-number\">2</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> _, edge := <span class=\"hljs-keyword\">range</span> edges &#123;<br>        x := edge[<span class=\"hljs-number\">0</span>]<br>        y := edge[<span class=\"hljs-number\">1</span>]<br>        z := edge[<span class=\"hljs-number\">2</span>]<br><br>        d[x][y] = z<br>        d[y][x] = z<br>    &#125;<br><br>    <span class=\"hljs-comment\">// Floyd算法</span><br>    <span class=\"hljs-comment\">// d[i][j] = min(d[i][j], d[i][k] + d[k][j])</span><br>    <span class=\"hljs-comment\">// 注意先遍历k，才能保证计算k之前，k-1的情况都计算完成了</span><br>    <span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; n; k++ &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>            <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; n; j++ &#123;<br>                <span class=\"hljs-keyword\">if</span> k != i &amp;&amp; k != j &#123;<br>                    d[i][j] = min(d[i][j], d[i][k] + d[k][j])<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;d[i][j]: %v\\n&quot;, d)</span><br><br>    minNeighboor := math.MaxInt / <span class=\"hljs-number\">2</span><br>    ans := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        neighboor := <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; n; j++ &#123;<br>            <span class=\"hljs-keyword\">if</span> i != j &amp;&amp; d[i][j] &lt;= distanceThreshold &#123;<br>                neighboor++<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> neighboor &lt; minNeighboor || (neighboor == minNeighboor &amp;&amp; i &gt; ans) &#123;<br>            minNeighboor = neighboor<br>            ans = i<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (a &gt; b)&#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1120,"excerpt":"","more":"<p>Floyd算法计算所有点对之间最短路径。注意先遍历k，才能保证计算k之前，k-1的情况都计算完成了。</p>\n<p>时间复杂度：O(N^3)<br>空间复杂度：O(N^2)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findTheCity</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>, edges [][]<span class=\"hljs-type\">int</span>, distanceThreshold <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// 构建邻接矩阵</span><br>    d := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        d[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; n; j++&#123;<br>            <span class=\"hljs-keyword\">if</span> i != j &#123;<br>                d[i][j] = math.MaxInt / <span class=\"hljs-number\">2</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> _, edge := <span class=\"hljs-keyword\">range</span> edges &#123;<br>        x := edge[<span class=\"hljs-number\">0</span>]<br>        y := edge[<span class=\"hljs-number\">1</span>]<br>        z := edge[<span class=\"hljs-number\">2</span>]<br><br>        d[x][y] = z<br>        d[y][x] = z<br>    &#125;<br><br>    <span class=\"hljs-comment\">// Floyd算法</span><br>    <span class=\"hljs-comment\">// d[i][j] = min(d[i][j], d[i][k] + d[k][j])</span><br>    <span class=\"hljs-comment\">// 注意先遍历k，才能保证计算k之前，k-1的情况都计算完成了</span><br>    <span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; n; k++ &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>            <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; n; j++ &#123;<br>                <span class=\"hljs-keyword\">if</span> k != i &amp;&amp; k != j &#123;<br>                    d[i][j] = min(d[i][j], d[i][k] + d[k][j])<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;d[i][j]: %v\\n&quot;, d)</span><br><br>    minNeighboor := math.MaxInt / <span class=\"hljs-number\">2</span><br>    ans := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        neighboor := <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; n; j++ &#123;<br>            <span class=\"hljs-keyword\">if</span> i != j &amp;&amp; d[i][j] &lt;= distanceThreshold &#123;<br>                neighboor++<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> neighboor &lt; minNeighboor || (neighboor == minNeighboor &amp;&amp; i &gt; ans) &#123;<br>            minNeighboor = neighboor<br>            ans = i<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (a &gt; b)&#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"146.LRU缓存","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n```Go\ntype LRUCache struct {\n  capacity int\n  size int\n  hashMap map[int]*DLinkNode\n  head, tail *DLinkNode\n}\n\ntype DLinkNode struct {\n  key, value int\n  prev *DLinkNode\n  next *DLinkNode\n}\n\nfunc NewDLinkNode(key, value int) *DLinkNode {\n  return &DLinkNode{\n    key: key,\n    value: value,\n  }\n}\n\nfunc Constructor(capacity int) LRUCache {\n  head := NewDLinkNode(0, 0)\n  tail := NewDLinkNode(0, 0)\n  head.next = tail\n  tail.prev = head\n\n  return LRUCache{\n    capacity: capacity, \n    hashMap: make(map[int]*DLinkNode),\n    head: head,\n    tail: tail,\n    size: 0,\n  }\n}\n\n\nfunc (this *LRUCache) Get(key int) int {\n  if node, ok := this.hashMap[key]; ok {\n    this.moveToHead(node)\n    return node.value\n  } else {\n    return -1\n  }\n}\n\n\nfunc (this *LRUCache) Put(key int, value int)  {\n  node, ok := this.hashMap[key]\n  if ok {\n    node.value = value\n    this.moveToHead(node)\n  } else {\n    node = NewDLinkNode(key, value)\n    this.addToHead(node)\n    this.size++\n  }\n\n  if this.size > this.capacity {\n    delete(this.hashMap, this.tail.prev.key)\n    this.removeFromTail()\n    this.size--\n  }\n\n  this.hashMap[key] = node\n}\n\nfunc (this *LRUCache) removeNode(node *DLinkNode) {\n  node.prev.next = node.next\n  node.next.prev = node.prev\n}\n\nfunc (this *LRUCache) moveToHead(node *DLinkNode) {\n  this.removeNode(node)\n  this.addToHead(node)\n}\n\nfunc (this *LRUCache) addToHead(node *DLinkNode) {\n  node.prev = this.head\n  node.next = this.head.next\n  this.head.next.prev = node\n  this.head.next = node\n}\n\nfunc (this *LRUCache) removeFromTail() {\n  this.removeNode(this.tail.prev)\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * obj := Constructor(capacity);\n * param_1 := obj.Get(key);\n * obj.Put(key,value);\n */\n \n ```","source":"_posts/算法/leetcode/146.LRU缓存.md","raw":"---\ntitle: 146.LRU缓存\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n```Go\ntype LRUCache struct {\n  capacity int\n  size int\n  hashMap map[int]*DLinkNode\n  head, tail *DLinkNode\n}\n\ntype DLinkNode struct {\n  key, value int\n  prev *DLinkNode\n  next *DLinkNode\n}\n\nfunc NewDLinkNode(key, value int) *DLinkNode {\n  return &DLinkNode{\n    key: key,\n    value: value,\n  }\n}\n\nfunc Constructor(capacity int) LRUCache {\n  head := NewDLinkNode(0, 0)\n  tail := NewDLinkNode(0, 0)\n  head.next = tail\n  tail.prev = head\n\n  return LRUCache{\n    capacity: capacity, \n    hashMap: make(map[int]*DLinkNode),\n    head: head,\n    tail: tail,\n    size: 0,\n  }\n}\n\n\nfunc (this *LRUCache) Get(key int) int {\n  if node, ok := this.hashMap[key]; ok {\n    this.moveToHead(node)\n    return node.value\n  } else {\n    return -1\n  }\n}\n\n\nfunc (this *LRUCache) Put(key int, value int)  {\n  node, ok := this.hashMap[key]\n  if ok {\n    node.value = value\n    this.moveToHead(node)\n  } else {\n    node = NewDLinkNode(key, value)\n    this.addToHead(node)\n    this.size++\n  }\n\n  if this.size > this.capacity {\n    delete(this.hashMap, this.tail.prev.key)\n    this.removeFromTail()\n    this.size--\n  }\n\n  this.hashMap[key] = node\n}\n\nfunc (this *LRUCache) removeNode(node *DLinkNode) {\n  node.prev.next = node.next\n  node.next.prev = node.prev\n}\n\nfunc (this *LRUCache) moveToHead(node *DLinkNode) {\n  this.removeNode(node)\n  this.addToHead(node)\n}\n\nfunc (this *LRUCache) addToHead(node *DLinkNode) {\n  node.prev = this.head\n  node.next = this.head.next\n  this.head.next.prev = node\n  this.head.next = node\n}\n\nfunc (this *LRUCache) removeFromTail() {\n  this.removeNode(this.tail.prev)\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * obj := Constructor(capacity);\n * param_1 := obj.Get(key);\n * obj.Put(key,value);\n */\n \n ```","slug":"leetcode/146.LRU缓存","published":1,"updated":"2022-10-29T17:59:35.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6ov000cca4lfpq0gpc9","content":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">type</span> LRUCache <span class=\"hljs-keyword\">struct</span> &#123;<br>  capacity <span class=\"hljs-type\">int</span><br>  size <span class=\"hljs-type\">int</span><br>  hashMap <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]*DLinkNode<br>  head, tail *DLinkNode<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> DLinkNode <span class=\"hljs-keyword\">struct</span> &#123;<br>  key, value <span class=\"hljs-type\">int</span><br>  prev *DLinkNode<br>  next *DLinkNode<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewDLinkNode</span><span class=\"hljs-params\">(key, value <span class=\"hljs-type\">int</span>)</span></span> *DLinkNode &#123;<br>  <span class=\"hljs-keyword\">return</span> &amp;DLinkNode&#123;<br>    key: key,<br>    value: value,<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">(capacity <span class=\"hljs-type\">int</span>)</span></span> LRUCache &#123;<br>  head := NewDLinkNode(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)<br>  tail := NewDLinkNode(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)<br>  head.next = tail<br>  tail.prev = head<br><br>  <span class=\"hljs-keyword\">return</span> LRUCache&#123;<br>    capacity: capacity, <br>    hashMap: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]*DLinkNode),<br>    head: head,<br>    tail: tail,<br>    size: <span class=\"hljs-number\">0</span>,<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> Get(key <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">int</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> node, ok := this.hashMap[key]; ok &#123;<br>    this.moveToHead(node)<br>    <span class=\"hljs-keyword\">return</span> node.value<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> Put(key <span class=\"hljs-type\">int</span>, value <span class=\"hljs-type\">int</span>)  &#123;<br>  node, ok := this.hashMap[key]<br>  <span class=\"hljs-keyword\">if</span> ok &#123;<br>    node.value = value<br>    this.moveToHead(node)<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    node = NewDLinkNode(key, value)<br>    this.addToHead(node)<br>    this.size++<br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> this.size &gt; this.capacity &#123;<br>    <span class=\"hljs-built_in\">delete</span>(this.hashMap, this.tail.prev.key)<br>    this.removeFromTail()<br>    this.size--<br>  &#125;<br><br>  this.hashMap[key] = node<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> removeNode(node *DLinkNode) &#123;<br>  node.prev.next = node.next<br>  node.next.prev = node.prev<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> moveToHead(node *DLinkNode) &#123;<br>  this.removeNode(node)<br>  this.addToHead(node)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> addToHead(node *DLinkNode) &#123;<br>  node.prev = this.head<br>  node.next = this.head.next<br>  this.head.next.prev = node<br>  this.head.next = node<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> removeFromTail() &#123;<br>  this.removeNode(this.tail.prev)<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your LRUCache object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * obj := Constructor(capacity);</span><br><span class=\"hljs-comment\"> * param_1 := obj.Get(key);</span><br><span class=\"hljs-comment\"> * obj.Put(key,value);</span><br><span class=\"hljs-comment\"> */</span><br> <br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1711,"excerpt":"","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">type</span> LRUCache <span class=\"hljs-keyword\">struct</span> &#123;<br>  capacity <span class=\"hljs-type\">int</span><br>  size <span class=\"hljs-type\">int</span><br>  hashMap <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]*DLinkNode<br>  head, tail *DLinkNode<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> DLinkNode <span class=\"hljs-keyword\">struct</span> &#123;<br>  key, value <span class=\"hljs-type\">int</span><br>  prev *DLinkNode<br>  next *DLinkNode<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewDLinkNode</span><span class=\"hljs-params\">(key, value <span class=\"hljs-type\">int</span>)</span></span> *DLinkNode &#123;<br>  <span class=\"hljs-keyword\">return</span> &amp;DLinkNode&#123;<br>    key: key,<br>    value: value,<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">(capacity <span class=\"hljs-type\">int</span>)</span></span> LRUCache &#123;<br>  head := NewDLinkNode(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)<br>  tail := NewDLinkNode(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)<br>  head.next = tail<br>  tail.prev = head<br><br>  <span class=\"hljs-keyword\">return</span> LRUCache&#123;<br>    capacity: capacity, <br>    hashMap: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]*DLinkNode),<br>    head: head,<br>    tail: tail,<br>    size: <span class=\"hljs-number\">0</span>,<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> Get(key <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">int</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> node, ok := this.hashMap[key]; ok &#123;<br>    this.moveToHead(node)<br>    <span class=\"hljs-keyword\">return</span> node.value<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> Put(key <span class=\"hljs-type\">int</span>, value <span class=\"hljs-type\">int</span>)  &#123;<br>  node, ok := this.hashMap[key]<br>  <span class=\"hljs-keyword\">if</span> ok &#123;<br>    node.value = value<br>    this.moveToHead(node)<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    node = NewDLinkNode(key, value)<br>    this.addToHead(node)<br>    this.size++<br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> this.size &gt; this.capacity &#123;<br>    <span class=\"hljs-built_in\">delete</span>(this.hashMap, this.tail.prev.key)<br>    this.removeFromTail()<br>    this.size--<br>  &#125;<br><br>  this.hashMap[key] = node<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> removeNode(node *DLinkNode) &#123;<br>  node.prev.next = node.next<br>  node.next.prev = node.prev<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> moveToHead(node *DLinkNode) &#123;<br>  this.removeNode(node)<br>  this.addToHead(node)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> addToHead(node *DLinkNode) &#123;<br>  node.prev = this.head<br>  node.next = this.head.next<br>  this.head.next.prev = node<br>  this.head.next = node<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *LRUCache)</span></span> removeFromTail() &#123;<br>  this.removeNode(this.tail.prev)<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your LRUCache object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * obj := Constructor(capacity);</span><br><span class=\"hljs-comment\"> * param_1 := obj.Get(key);</span><br><span class=\"hljs-comment\"> * obj.Put(key,value);</span><br><span class=\"hljs-comment\"> */</span><br> <br></code></pre></td></tr></table></figure>"},{"title":"152.乘积最大子数组","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n考虑当前数字为正还是为负，并维护前序乘积最大和最小数组。\n\n由于当前位置乘积最大值只与前一位置的乘积最大值或最小值有关，则可以优化数组为两个变量。\n\n时间复杂度： O(N)\n空间复杂度： O(1)\n\n```Go\nfunc maxProduct(nums []int) int {\n    // nums[i] > 0\n    // dpMax[i] = max(dpMax[i-1] * nums[i], nums[i])\n    // dpMin[i] = min(dpMin[i-1] * nums[i], nums[i])\n\n    // nums[i] < 0\n    // dpMax[i] = max(dpMin[i-1] * nums[i], nums[i])\n    // dpMin[i] = min(dpMax[i-1] * nums[i], nums[i])\n\n    dpMax := nums[0]\n    dpMin := nums[0]\n    ans := nums[0]\n\n    for i := 1; i < len(nums); i++ {\n        if nums[i] > 0 {\n            dpMax = max(dpMax * nums[i], nums[i])\n            dpMin = min(dpMin * nums[i], nums[i])\n        } else {\n            temp := dpMax\n            dpMax = max(dpMin * nums[i], nums[i])\n            dpMin = min(temp * nums[i], nums[i])\n        }\n        ans = max(dpMax, ans)\n    }\n\n    return ans\n}\n\nfunc max(a, b int) int {\n    if (a > b) {\n        return a\n    }\n\n    return b\n}\n\nfunc min(a, b int) int {\n    if (a < b) {\n        return a\n    }\n\n    return b\n}```","source":"_posts/算法/leetcode/152.乘积最大子数组.md","raw":"---\ntitle: 152.乘积最大子数组\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n考虑当前数字为正还是为负，并维护前序乘积最大和最小数组。\n\n由于当前位置乘积最大值只与前一位置的乘积最大值或最小值有关，则可以优化数组为两个变量。\n\n时间复杂度： O(N)\n空间复杂度： O(1)\n\n```Go\nfunc maxProduct(nums []int) int {\n    // nums[i] > 0\n    // dpMax[i] = max(dpMax[i-1] * nums[i], nums[i])\n    // dpMin[i] = min(dpMin[i-1] * nums[i], nums[i])\n\n    // nums[i] < 0\n    // dpMax[i] = max(dpMin[i-1] * nums[i], nums[i])\n    // dpMin[i] = min(dpMax[i-1] * nums[i], nums[i])\n\n    dpMax := nums[0]\n    dpMin := nums[0]\n    ans := nums[0]\n\n    for i := 1; i < len(nums); i++ {\n        if nums[i] > 0 {\n            dpMax = max(dpMax * nums[i], nums[i])\n            dpMin = min(dpMin * nums[i], nums[i])\n        } else {\n            temp := dpMax\n            dpMax = max(dpMin * nums[i], nums[i])\n            dpMin = min(temp * nums[i], nums[i])\n        }\n        ans = max(dpMax, ans)\n    }\n\n    return ans\n}\n\nfunc max(a, b int) int {\n    if (a > b) {\n        return a\n    }\n\n    return b\n}\n\nfunc min(a, b int) int {\n    if (a < b) {\n        return a\n    }\n\n    return b\n}```","slug":"leetcode/152.乘积最大子数组","published":1,"updated":"2022-10-29T17:59:44.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6ow000eca4lc36wd90h","content":"<p>动态规划</p>\n<p>考虑当前数字为正还是为负，并维护前序乘积最大和最小数组。</p>\n<p>由于当前位置乘积最大值只与前一位置的乘积最大值或最小值有关，则可以优化数组为两个变量。</p>\n<p>时间复杂度： O(N)<br>空间复杂度： O(1)</p>\n<p>&#96;&#96;&#96;Go<br>func maxProduct(nums []int) int {<br>    &#x2F;&#x2F; nums[i] &gt; 0<br>    &#x2F;&#x2F; dpMax[i] &#x3D; max(dpMax[i-1] * nums[i], nums[i])<br>    &#x2F;&#x2F; dpMin[i] &#x3D; min(dpMin[i-1] * nums[i], nums[i])</p>\n<pre><code class=\"hljs\">// nums[i] &lt; 0\n// dpMax[i] = max(dpMin[i-1] * nums[i], nums[i])\n// dpMin[i] = min(dpMax[i-1] * nums[i], nums[i])\n\ndpMax := nums[0]\ndpMin := nums[0]\nans := nums[0]\n\nfor i := 1; i &lt; len(nums); i++ &#123;\n    if nums[i] &gt; 0 &#123;\n        dpMax = max(dpMax * nums[i], nums[i])\n        dpMin = min(dpMin * nums[i], nums[i])\n    &#125; else &#123;\n        temp := dpMax\n        dpMax = max(dpMin * nums[i], nums[i])\n        dpMin = min(temp * nums[i], nums[i])\n    &#125;\n    ans = max(dpMax, ans)\n&#125;\n\nreturn ans\n</code></pre>\n<p>}</p>\n<p>func max(a, b int) int {<br>    if (a &gt; b) {<br>        return a<br>    }</p>\n<pre><code class=\"hljs\">return b\n</code></pre>\n<p>}</p>\n<p>func min(a, b int) int {<br>    if (a &lt; b) {<br>        return a<br>    }</p>\n<pre><code class=\"hljs\">return b\n</code></pre>\n<p>}&#96;&#96;&#96;</p>\n","site":{"data":{}},"wordcount":770,"excerpt":"","more":"<p>动态规划</p>\n<p>考虑当前数字为正还是为负，并维护前序乘积最大和最小数组。</p>\n<p>由于当前位置乘积最大值只与前一位置的乘积最大值或最小值有关，则可以优化数组为两个变量。</p>\n<p>时间复杂度： O(N)<br>空间复杂度： O(1)</p>\n<p>&#96;&#96;&#96;Go<br>func maxProduct(nums []int) int {<br>    &#x2F;&#x2F; nums[i] &gt; 0<br>    &#x2F;&#x2F; dpMax[i] &#x3D; max(dpMax[i-1] * nums[i], nums[i])<br>    &#x2F;&#x2F; dpMin[i] &#x3D; min(dpMin[i-1] * nums[i], nums[i])</p>\n<pre><code>// nums[i] &lt; 0\n// dpMax[i] = max(dpMin[i-1] * nums[i], nums[i])\n// dpMin[i] = min(dpMax[i-1] * nums[i], nums[i])\n\ndpMax := nums[0]\ndpMin := nums[0]\nans := nums[0]\n\nfor i := 1; i &lt; len(nums); i++ &#123;\n    if nums[i] &gt; 0 &#123;\n        dpMax = max(dpMax * nums[i], nums[i])\n        dpMin = min(dpMin * nums[i], nums[i])\n    &#125; else &#123;\n        temp := dpMax\n        dpMax = max(dpMin * nums[i], nums[i])\n        dpMin = min(temp * nums[i], nums[i])\n    &#125;\n    ans = max(dpMax, ans)\n&#125;\n\nreturn ans\n</code></pre>\n<p>}</p>\n<p>func max(a, b int) int {<br>    if (a &gt; b) {<br>        return a<br>    }</p>\n<pre><code>return b\n</code></pre>\n<p>}</p>\n<p>func min(a, b int) int {<br>    if (a &lt; b) {<br>        return a<br>    }</p>\n<pre><code>return b\n</code></pre>\n<p>}&#96;&#96;&#96;</p>\n"},{"title":"1584.连接所有点的最小费用","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n最小生成树问题，Kruskal 算法\n\n任意一颗最小生成树一定包含无向图中权值最小的边。\n\n把任何一个生成森林扩展成最小生成树，一定使用了图中剩余边中权值最小的边。\n\n证明方法： 树上加一条边成环  + 反证法\n\n时间复杂度：O(N^2logN)\n空间复杂度：O(N^2)\n\n```Go\n\nfunc minCostConnectPoints(points [][]int) int {\n    n := len(points)\n    groups := make([]int, n)\n    edges := [][]int{}\n    ans := 0\n\n    // 并查集\n    for i := 0; i < n; i++ {\n        groups[i] = i\n    }\n\n    var find func(int) int\n    find = func(i int) int {\n        if i == groups[i] {\n            return i\n        }\n        groups[i] = find(groups[i])\n        return groups[i]\n    }\n\n    union := func(x, y int) {\n        gx := find(x)\n        gy := find(y)\n\n        if gx != gy {\n            groups[gx] = gy\n        }\n    }\n\n    // 构建出边数组\n    for i := 0; i < n; i ++ {\n        for j := i + 1; j < n; j++ {\n            xi := points[i][0]\n            yi := points[i][1]\n            xj := points[j][0]\n            yj := points[j][1]\n\n            edges = append(edges, []int{i, j, abs(xi-xj) + abs(yi-yj)})\n        }\n    }\n\n    // 根据权重排序\n    sort.Slice(edges, func(i, j int) bool {\n        return edges[i][2] < edges[j][2]\n    })\n    \n    // 依次链接，计算费用\n    left := n - 1\n    for _, edge := range edges {\n        if left == 0 {\n            break\n        }\n        if find(edge[0]) == find(edge[1]) {\n            continue\n        }else{\n            union(edge[0], edge[1])\n            ans += edge[2]\n        }\n        left--\n    }\n\n    return ans\n}\n\nfunc abs(val int) int {\n    if val < 0 {\n        return -val\n    }\n    return val\n}\n```","source":"_posts/算法/leetcode/1584.连接所有点的最小费用.md","raw":"---\ntitle: 1584.连接所有点的最小费用\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n最小生成树问题，Kruskal 算法\n\n任意一颗最小生成树一定包含无向图中权值最小的边。\n\n把任何一个生成森林扩展成最小生成树，一定使用了图中剩余边中权值最小的边。\n\n证明方法： 树上加一条边成环  + 反证法\n\n时间复杂度：O(N^2logN)\n空间复杂度：O(N^2)\n\n```Go\n\nfunc minCostConnectPoints(points [][]int) int {\n    n := len(points)\n    groups := make([]int, n)\n    edges := [][]int{}\n    ans := 0\n\n    // 并查集\n    for i := 0; i < n; i++ {\n        groups[i] = i\n    }\n\n    var find func(int) int\n    find = func(i int) int {\n        if i == groups[i] {\n            return i\n        }\n        groups[i] = find(groups[i])\n        return groups[i]\n    }\n\n    union := func(x, y int) {\n        gx := find(x)\n        gy := find(y)\n\n        if gx != gy {\n            groups[gx] = gy\n        }\n    }\n\n    // 构建出边数组\n    for i := 0; i < n; i ++ {\n        for j := i + 1; j < n; j++ {\n            xi := points[i][0]\n            yi := points[i][1]\n            xj := points[j][0]\n            yj := points[j][1]\n\n            edges = append(edges, []int{i, j, abs(xi-xj) + abs(yi-yj)})\n        }\n    }\n\n    // 根据权重排序\n    sort.Slice(edges, func(i, j int) bool {\n        return edges[i][2] < edges[j][2]\n    })\n    \n    // 依次链接，计算费用\n    left := n - 1\n    for _, edge := range edges {\n        if left == 0 {\n            break\n        }\n        if find(edge[0]) == find(edge[1]) {\n            continue\n        }else{\n            union(edge[0], edge[1])\n            ans += edge[2]\n        }\n        left--\n    }\n\n    return ans\n}\n\nfunc abs(val int) int {\n    if val < 0 {\n        return -val\n    }\n    return val\n}\n```","slug":"leetcode/1584.连接所有点的最小费用","published":1,"updated":"2022-10-29T18:03:18.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6oy000gca4leq83gr2y","content":"<p>最小生成树问题，Kruskal 算法</p>\n<p>任意一颗最小生成树一定包含无向图中权值最小的边。</p>\n<p>把任何一个生成森林扩展成最小生成树，一定使用了图中剩余边中权值最小的边。</p>\n<p>证明方法： 树上加一条边成环  + 反证法</p>\n<p>时间复杂度：O(N^2logN)<br>空间复杂度：O(N^2)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minCostConnectPoints</span><span class=\"hljs-params\">(points [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    n := <span class=\"hljs-built_in\">len</span>(points)<br>    groups := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>    edges := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    ans := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-comment\">// 并查集</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        groups[i] = i<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> find <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span><br>    find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> i == groups[i] &#123;<br>            <span class=\"hljs-keyword\">return</span> i<br>        &#125;<br>        groups[i] = find(groups[i])<br>        <span class=\"hljs-keyword\">return</span> groups[i]<br>    &#125;<br><br>    union := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(x, y <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>        gx := find(x)<br>        gy := find(y)<br><br>        <span class=\"hljs-keyword\">if</span> gx != gy &#123;<br>            groups[gx] = gy<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 构建出边数组</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i ++ &#123;<br>        <span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; n; j++ &#123;<br>            xi := points[i][<span class=\"hljs-number\">0</span>]<br>            yi := points[i][<span class=\"hljs-number\">1</span>]<br>            xj := points[j][<span class=\"hljs-number\">0</span>]<br>            yj := points[j][<span class=\"hljs-number\">1</span>]<br><br>            edges = <span class=\"hljs-built_in\">append</span>(edges, []<span class=\"hljs-type\">int</span>&#123;i, j, abs(xi-xj) + abs(yi-yj)&#125;)<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 根据权重排序</span><br>    sort.Slice(edges, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> edges[i][<span class=\"hljs-number\">2</span>] &lt; edges[j][<span class=\"hljs-number\">2</span>]<br>    &#125;)<br>    <br>    <span class=\"hljs-comment\">// 依次链接，计算费用</span><br>    left := n - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">for</span> _, edge := <span class=\"hljs-keyword\">range</span> edges &#123;<br>        <span class=\"hljs-keyword\">if</span> left == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> find(edge[<span class=\"hljs-number\">0</span>]) == find(edge[<span class=\"hljs-number\">1</span>]) &#123;<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            union(edge[<span class=\"hljs-number\">0</span>], edge[<span class=\"hljs-number\">1</span>])<br>            ans += edge[<span class=\"hljs-number\">2</span>]<br>        &#125;<br>        left--<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">(val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> val &lt; <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -val<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> val<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1177,"excerpt":"","more":"<p>最小生成树问题，Kruskal 算法</p>\n<p>任意一颗最小生成树一定包含无向图中权值最小的边。</p>\n<p>把任何一个生成森林扩展成最小生成树，一定使用了图中剩余边中权值最小的边。</p>\n<p>证明方法： 树上加一条边成环  + 反证法</p>\n<p>时间复杂度：O(N^2logN)<br>空间复杂度：O(N^2)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minCostConnectPoints</span><span class=\"hljs-params\">(points [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    n := <span class=\"hljs-built_in\">len</span>(points)<br>    groups := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>    edges := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    ans := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-comment\">// 并查集</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        groups[i] = i<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> find <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span><br>    find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> i == groups[i] &#123;<br>            <span class=\"hljs-keyword\">return</span> i<br>        &#125;<br>        groups[i] = find(groups[i])<br>        <span class=\"hljs-keyword\">return</span> groups[i]<br>    &#125;<br><br>    union := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(x, y <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>        gx := find(x)<br>        gy := find(y)<br><br>        <span class=\"hljs-keyword\">if</span> gx != gy &#123;<br>            groups[gx] = gy<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 构建出边数组</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i ++ &#123;<br>        <span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; n; j++ &#123;<br>            xi := points[i][<span class=\"hljs-number\">0</span>]<br>            yi := points[i][<span class=\"hljs-number\">1</span>]<br>            xj := points[j][<span class=\"hljs-number\">0</span>]<br>            yj := points[j][<span class=\"hljs-number\">1</span>]<br><br>            edges = <span class=\"hljs-built_in\">append</span>(edges, []<span class=\"hljs-type\">int</span>&#123;i, j, abs(xi-xj) + abs(yi-yj)&#125;)<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 根据权重排序</span><br>    sort.Slice(edges, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> edges[i][<span class=\"hljs-number\">2</span>] &lt; edges[j][<span class=\"hljs-number\">2</span>]<br>    &#125;)<br>    <br>    <span class=\"hljs-comment\">// 依次链接，计算费用</span><br>    left := n - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">for</span> _, edge := <span class=\"hljs-keyword\">range</span> edges &#123;<br>        <span class=\"hljs-keyword\">if</span> left == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> find(edge[<span class=\"hljs-number\">0</span>]) == find(edge[<span class=\"hljs-number\">1</span>]) &#123;<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            union(edge[<span class=\"hljs-number\">0</span>], edge[<span class=\"hljs-number\">1</span>])<br>            ans += edge[<span class=\"hljs-number\">2</span>]<br>        &#125;<br>        left--<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">(val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> val &lt; <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -val<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> val<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"154. 寻找旋转排序数组中的最小值 2","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/)\n\n使用二分法可以减少时间复杂度。注意有重复元素，遇到重复元素则可以删除一个，至少留有一个来参与最小值比较。\n\n```Go\nfunc findMin(nums []int) int {\n    left, right := 0, len(nums) - 1\n\n    for left < right {\n        mid := (left + right) / 2\n        // 重复元素则去掉最右端的那个\n        if nums[mid] == nums[right] {\n            right--\n        }else if nums[mid] < nums[right] {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n\n    return nums[right]\n}\n```","source":"_posts/算法/leetcode/154. 寻找旋转排序数组中的最小值 2.md","raw":"---\ntitle: 154. 寻找旋转排序数组中的最小值 2\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/)\n\n使用二分法可以减少时间复杂度。注意有重复元素，遇到重复元素则可以删除一个，至少留有一个来参与最小值比较。\n\n```Go\nfunc findMin(nums []int) int {\n    left, right := 0, len(nums) - 1\n\n    for left < right {\n        mid := (left + right) / 2\n        // 重复元素则去掉最右端的那个\n        if nums[mid] == nums[right] {\n            right--\n        }else if nums[mid] < nums[right] {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n\n    return nums[right]\n}\n```","slug":"leetcode/154. 寻找旋转排序数组中的最小值 2","published":1,"updated":"2022-10-29T17:59:51.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6oz000ica4lbnaea0rm","content":"<p><a href=\"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/\">leetcode</a></p>\n<p>使用二分法可以减少时间复杂度。注意有重复元素，遇到重复元素则可以删除一个，至少留有一个来参与最小值比较。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findMin</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    left, right := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        mid := (left + right) / <span class=\"hljs-number\">2</span><br>        <span class=\"hljs-comment\">// 重复元素则去掉最右端的那个</span><br>        <span class=\"hljs-keyword\">if</span> nums[mid] == nums[right] &#123;<br>            right--<br>        &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; nums[right] &#123;<br>            right = mid<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> nums[right]<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":346,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/\">leetcode</a></p>\n<p>使用二分法可以减少时间复杂度。注意有重复元素，遇到重复元素则可以删除一个，至少留有一个来参与最小值比较。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findMin</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    left, right := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        mid := (left + right) / <span class=\"hljs-number\">2</span><br>        <span class=\"hljs-comment\">// 重复元素则去掉最右端的那个</span><br>        <span class=\"hljs-keyword\">if</span> nums[mid] == nums[right] &#123;<br>            right--<br>        &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; nums[right] &#123;<br>            right = mid<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> nums[right]<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"17.电话号码的字母组合","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/)\n\n深度优先遍历，注意这里每次选取数字必定会选取一个对应字母，不存在不选的情况。\n\n时间复杂度：O(3^m x 4^n)\n空间复杂度：O(m+n)\n\n```Go\nfunc letterCombinations(digits string) []string {\n    if digits == \"\" {\n        return []string{}\n    }\n\n    letterMap := map[string][]string{\n        \"2\": {\"a\", \"b\", \"c\"},\n        \"3\": {\"d\", \"e\", \"f\"},\n        \"4\": {\"g\", \"h\", \"i\"},\n        \"5\": {\"j\", \"k\", \"l\"},\n        \"6\": {\"m\", \"n\", \"o\"},\n        \"7\": {\"p\", \"q\", \"r\", \"s\"},\n        \"8\": {\"t\", \"u\", \"v\"},\n        \"9\": {\"w\", \"x\", \"y\", \"z\"},\n    }\n\n    cur := \"\"\n    results := []string{}\n    var dfs func(int)\n\n    dfs = func(i int) {\n        if i == len(digits) {\n            results = append(results, cur)\n            return\n        }\n\n        d := string(digits[i])\n        letters := letterMap[d]\n\n        for _, l := range letters {\n            cur = cur + l\n            dfs(i + 1)\n            cur = string(cur[:len(cur) - 1])\n        }\n    }\n\n    dfs(0)\n\n    return results\n}\n```\n\n","source":"_posts/算法/leetcode/17.电话号码的字母组合.md","raw":"---\ntitle: 17.电话号码的字母组合\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/)\n\n深度优先遍历，注意这里每次选取数字必定会选取一个对应字母，不存在不选的情况。\n\n时间复杂度：O(3^m x 4^n)\n空间复杂度：O(m+n)\n\n```Go\nfunc letterCombinations(digits string) []string {\n    if digits == \"\" {\n        return []string{}\n    }\n\n    letterMap := map[string][]string{\n        \"2\": {\"a\", \"b\", \"c\"},\n        \"3\": {\"d\", \"e\", \"f\"},\n        \"4\": {\"g\", \"h\", \"i\"},\n        \"5\": {\"j\", \"k\", \"l\"},\n        \"6\": {\"m\", \"n\", \"o\"},\n        \"7\": {\"p\", \"q\", \"r\", \"s\"},\n        \"8\": {\"t\", \"u\", \"v\"},\n        \"9\": {\"w\", \"x\", \"y\", \"z\"},\n    }\n\n    cur := \"\"\n    results := []string{}\n    var dfs func(int)\n\n    dfs = func(i int) {\n        if i == len(digits) {\n            results = append(results, cur)\n            return\n        }\n\n        d := string(digits[i])\n        letters := letterMap[d]\n\n        for _, l := range letters {\n            cur = cur + l\n            dfs(i + 1)\n            cur = string(cur[:len(cur) - 1])\n        }\n    }\n\n    dfs(0)\n\n    return results\n}\n```\n\n","slug":"leetcode/17.电话号码的字母组合","published":1,"updated":"2022-10-29T17:55:09.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6oz000kca4lh70ohmff","content":"<p><a href=\"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\">leetcode</a></p>\n<p>深度优先遍历，注意这里每次选取数字必定会选取一个对应字母，不存在不选的情况。</p>\n<p>时间复杂度：O(3^m x 4^n)<br>空间复杂度：O(m+n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">letterCombinations</span><span class=\"hljs-params\">(digits <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> digits == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">string</span>&#123;&#125;<br>    &#125;<br><br>    letterMap := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span>&#123;<br>        <span class=\"hljs-string\">&quot;2&quot;</span>: &#123;<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;3&quot;</span>: &#123;<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;4&quot;</span>: &#123;<span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;5&quot;</span>: &#123;<span class=\"hljs-string\">&quot;j&quot;</span>, <span class=\"hljs-string\">&quot;k&quot;</span>, <span class=\"hljs-string\">&quot;l&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;6&quot;</span>: &#123;<span class=\"hljs-string\">&quot;m&quot;</span>, <span class=\"hljs-string\">&quot;n&quot;</span>, <span class=\"hljs-string\">&quot;o&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;7&quot;</span>: &#123;<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-string\">&quot;q&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, <span class=\"hljs-string\">&quot;s&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;8&quot;</span>: &#123;<span class=\"hljs-string\">&quot;t&quot;</span>, <span class=\"hljs-string\">&quot;u&quot;</span>, <span class=\"hljs-string\">&quot;v&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;9&quot;</span>: &#123;<span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;x&quot;</span>, <span class=\"hljs-string\">&quot;y&quot;</span>, <span class=\"hljs-string\">&quot;z&quot;</span>&#125;,<br>    &#125;<br><br>    cur := <span class=\"hljs-string\">&quot;&quot;</span><br>    results := []<span class=\"hljs-type\">string</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>        <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-built_in\">len</span>(digits) &#123;<br>            results = <span class=\"hljs-built_in\">append</span>(results, cur)<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        d := <span class=\"hljs-type\">string</span>(digits[i])<br>        letters := letterMap[d]<br><br>        <span class=\"hljs-keyword\">for</span> _, l := <span class=\"hljs-keyword\">range</span> letters &#123;<br>            cur = cur + l<br>            dfs(i + <span class=\"hljs-number\">1</span>)<br>            cur = <span class=\"hljs-type\">string</span>(cur[:<span class=\"hljs-built_in\">len</span>(cur) - <span class=\"hljs-number\">1</span>])<br>        &#125;<br>    &#125;<br><br>    dfs(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">return</span> results<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1160,"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\">leetcode</a></p>\n<p>深度优先遍历，注意这里每次选取数字必定会选取一个对应字母，不存在不选的情况。</p>\n<p>时间复杂度：O(3^m x 4^n)<br>空间复杂度：O(m+n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">letterCombinations</span><span class=\"hljs-params\">(digits <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> digits == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">string</span>&#123;&#125;<br>    &#125;<br><br>    letterMap := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span>&#123;<br>        <span class=\"hljs-string\">&quot;2&quot;</span>: &#123;<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;3&quot;</span>: &#123;<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;4&quot;</span>: &#123;<span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;5&quot;</span>: &#123;<span class=\"hljs-string\">&quot;j&quot;</span>, <span class=\"hljs-string\">&quot;k&quot;</span>, <span class=\"hljs-string\">&quot;l&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;6&quot;</span>: &#123;<span class=\"hljs-string\">&quot;m&quot;</span>, <span class=\"hljs-string\">&quot;n&quot;</span>, <span class=\"hljs-string\">&quot;o&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;7&quot;</span>: &#123;<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-string\">&quot;q&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, <span class=\"hljs-string\">&quot;s&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;8&quot;</span>: &#123;<span class=\"hljs-string\">&quot;t&quot;</span>, <span class=\"hljs-string\">&quot;u&quot;</span>, <span class=\"hljs-string\">&quot;v&quot;</span>&#125;,<br>        <span class=\"hljs-string\">&quot;9&quot;</span>: &#123;<span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;x&quot;</span>, <span class=\"hljs-string\">&quot;y&quot;</span>, <span class=\"hljs-string\">&quot;z&quot;</span>&#125;,<br>    &#125;<br><br>    cur := <span class=\"hljs-string\">&quot;&quot;</span><br>    results := []<span class=\"hljs-type\">string</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>        <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-built_in\">len</span>(digits) &#123;<br>            results = <span class=\"hljs-built_in\">append</span>(results, cur)<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        d := <span class=\"hljs-type\">string</span>(digits[i])<br>        letters := letterMap[d]<br><br>        <span class=\"hljs-keyword\">for</span> _, l := <span class=\"hljs-keyword\">range</span> letters &#123;<br>            cur = cur + l<br>            dfs(i + <span class=\"hljs-number\">1</span>)<br>            cur = <span class=\"hljs-type\">string</span>(cur[:<span class=\"hljs-built_in\">len</span>(cur) - <span class=\"hljs-number\">1</span>])<br>        &#125;<br>    &#125;<br><br>    dfs(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">return</span> results<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"136.邻值查找","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[Acwing](https://www.acwing.com/problem/content/138/)\n\n双向链表\n\n用排序后的双向链表维护每个数字前后相邻的两个数字用来计算最大绝对值。\n\n计算绝对值时根据原数组顺序从后往前遍历，处理完后则在链表中删除当前数字。\n\n时间复杂度：O(N)\n空间复杂度：O(N)\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\ntype Node struct {\n    Prev *Node\n    Next *Node\n    Val int\n    Index int\n}\n\nfunc main() {\n    var n int\n    fmt.Scan(&n)\n    \n    nums := make([][]int, n)\n    \n    for i := 0; i < n; i++ {\n        nums[i] = make([]int, 2)\n        fmt.Scanf(\"%d\", &nums[i][0])\n        nums[i][1] = i\n    }\n    \n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i][0] < nums[j][0]\n    })\n    \n    head := &Node{\n        Index: -1,\n    }\n    prev := head\n    nodes := make([]*Node, n)\n    ans := make([][]int, n)\n    \n    for i := 0; i < n; i++ {\n        node := &Node{\n            Prev: prev,\n            Val: nums[i][0],\n            Index: nums[i][1],\n        }\n        \n        prev.Next = node\n        prev = node\n        nodes[nums[i][1]] = node\n        // fmt.Printf(\"%v, %v\\n\", nums[i][1], node)\n    }\n    \n    prev.Next =  &Node{\n            Index: n,\n        }\n    \n    for i := n - 1; i > 0; i--{\n        curr := nodes[i]\n        pn := nodes[i].Prev\n        nn := nodes[i].Next\n        \n\n        ans[i] = make([]int, 2)\n        // fmt.Printf(\"%v %v %v\\n\", p.Val, curr.Val, n.Val)\n        if nn.Index == n || (pn.Index != -1 && abs(pn.Val - curr.Val) <= abs(nn.Val - curr.Val)) {\n            ans[i][0] = abs(pn.Val - curr.Val)\n            ans[i][1] = pn.Index + 1\n        } else {\n            ans[i][0] = abs(nn.Val - curr.Val)\n            ans[i][1] = nn.Index + 1\n        }\n        \n        pn.Next = curr.Next\n        nn.Prev = pn\n    }\n    \n    for i := 1; i < n; i++ {\n        fmt.Printf(\"%v %v\\n\", ans[i][0], ans[i][1])\n    }\n    \n}\n\nfunc abs(a int) int {\n    if a < 0 {\n        return -a\n    }\n    return a\n}\n```","source":"_posts/算法/leetcode/136.邻值查找.md","raw":"---\ntitle: 136.邻值查找\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[Acwing](https://www.acwing.com/problem/content/138/)\n\n双向链表\n\n用排序后的双向链表维护每个数字前后相邻的两个数字用来计算最大绝对值。\n\n计算绝对值时根据原数组顺序从后往前遍历，处理完后则在链表中删除当前数字。\n\n时间复杂度：O(N)\n空间复杂度：O(N)\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\ntype Node struct {\n    Prev *Node\n    Next *Node\n    Val int\n    Index int\n}\n\nfunc main() {\n    var n int\n    fmt.Scan(&n)\n    \n    nums := make([][]int, n)\n    \n    for i := 0; i < n; i++ {\n        nums[i] = make([]int, 2)\n        fmt.Scanf(\"%d\", &nums[i][0])\n        nums[i][1] = i\n    }\n    \n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i][0] < nums[j][0]\n    })\n    \n    head := &Node{\n        Index: -1,\n    }\n    prev := head\n    nodes := make([]*Node, n)\n    ans := make([][]int, n)\n    \n    for i := 0; i < n; i++ {\n        node := &Node{\n            Prev: prev,\n            Val: nums[i][0],\n            Index: nums[i][1],\n        }\n        \n        prev.Next = node\n        prev = node\n        nodes[nums[i][1]] = node\n        // fmt.Printf(\"%v, %v\\n\", nums[i][1], node)\n    }\n    \n    prev.Next =  &Node{\n            Index: n,\n        }\n    \n    for i := n - 1; i > 0; i--{\n        curr := nodes[i]\n        pn := nodes[i].Prev\n        nn := nodes[i].Next\n        \n\n        ans[i] = make([]int, 2)\n        // fmt.Printf(\"%v %v %v\\n\", p.Val, curr.Val, n.Val)\n        if nn.Index == n || (pn.Index != -1 && abs(pn.Val - curr.Val) <= abs(nn.Val - curr.Val)) {\n            ans[i][0] = abs(pn.Val - curr.Val)\n            ans[i][1] = pn.Index + 1\n        } else {\n            ans[i][0] = abs(nn.Val - curr.Val)\n            ans[i][1] = nn.Index + 1\n        }\n        \n        pn.Next = curr.Next\n        nn.Prev = pn\n    }\n    \n    for i := 1; i < n; i++ {\n        fmt.Printf(\"%v %v\\n\", ans[i][0], ans[i][1])\n    }\n    \n}\n\nfunc abs(a int) int {\n    if a < 0 {\n        return -a\n    }\n    return a\n}\n```","slug":"leetcode/136.邻值查找","published":1,"updated":"2022-10-29T17:59:29.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p0000mca4l2v3pgq1n","content":"<p><a href=\"https://www.acwing.com/problem/content/138/\">Acwing</a></p>\n<p>双向链表</p>\n<p>用排序后的双向链表维护每个数字前后相邻的两个数字用来计算最大绝对值。</p>\n<p>计算绝对值时根据原数组顺序从后往前遍历，处理完后则在链表中删除当前数字。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>    <span class=\"hljs-string\">&quot;fmt&quot;</span><br>    <span class=\"hljs-string\">&quot;sort&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> &#123;<br>    Prev *Node<br>    Next *Node<br>    Val <span class=\"hljs-type\">int</span><br>    Index <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    <span class=\"hljs-keyword\">var</span> n <span class=\"hljs-type\">int</span><br>    fmt.Scan(&amp;n)<br>    <br>    nums := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>    <br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        nums[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">2</span>)<br>        fmt.Scanf(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;nums[i][<span class=\"hljs-number\">0</span>])<br>        nums[i][<span class=\"hljs-number\">1</span>] = i<br>    &#125;<br>    <br>    sort.Slice(nums, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> nums[i][<span class=\"hljs-number\">0</span>] &lt; nums[j][<span class=\"hljs-number\">0</span>]<br>    &#125;)<br>    <br>    head := &amp;Node&#123;<br>        Index: <span class=\"hljs-number\">-1</span>,<br>    &#125;<br>    prev := head<br>    nodes := <span class=\"hljs-built_in\">make</span>([]*Node, n)<br>    ans := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>    <br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        node := &amp;Node&#123;<br>            Prev: prev,<br>            Val: nums[i][<span class=\"hljs-number\">0</span>],<br>            Index: nums[i][<span class=\"hljs-number\">1</span>],<br>        &#125;<br>        <br>        prev.Next = node<br>        prev = node<br>        nodes[nums[i][<span class=\"hljs-number\">1</span>]] = node<br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;%v, %v\\n&quot;, nums[i][1], node)</span><br>    &#125;<br>    <br>    prev.Next =  &amp;Node&#123;<br>            Index: n,<br>        &#125;<br>    <br>    <span class=\"hljs-keyword\">for</span> i := n - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--&#123;<br>        curr := nodes[i]<br>        pn := nodes[i].Prev<br>        nn := nodes[i].Next<br>        <br><br>        ans[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;%v %v %v\\n&quot;, p.Val, curr.Val, n.Val)</span><br>        <span class=\"hljs-keyword\">if</span> nn.Index == n || (pn.Index != <span class=\"hljs-number\">-1</span> &amp;&amp; abs(pn.Val - curr.Val) &lt;= abs(nn.Val - curr.Val)) &#123;<br>            ans[i][<span class=\"hljs-number\">0</span>] = abs(pn.Val - curr.Val)<br>            ans[i][<span class=\"hljs-number\">1</span>] = pn.Index + <span class=\"hljs-number\">1</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ans[i][<span class=\"hljs-number\">0</span>] = abs(nn.Val - curr.Val)<br>            ans[i][<span class=\"hljs-number\">1</span>] = nn.Index + <span class=\"hljs-number\">1</span><br>        &#125;<br>        <br>        pn.Next = curr.Next<br>        nn.Prev = pn<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; n; i++ &#123;<br>        fmt.Printf(<span class=\"hljs-string\">&quot;%v %v\\n&quot;</span>, ans[i][<span class=\"hljs-number\">0</span>], ans[i][<span class=\"hljs-number\">1</span>])<br>    &#125;<br>    <br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">(a <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &lt; <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -a<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1473,"excerpt":"","more":"<p><a href=\"https://www.acwing.com/problem/content/138/\">Acwing</a></p>\n<p>双向链表</p>\n<p>用排序后的双向链表维护每个数字前后相邻的两个数字用来计算最大绝对值。</p>\n<p>计算绝对值时根据原数组顺序从后往前遍历，处理完后则在链表中删除当前数字。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>    <span class=\"hljs-string\">&quot;fmt&quot;</span><br>    <span class=\"hljs-string\">&quot;sort&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> &#123;<br>    Prev *Node<br>    Next *Node<br>    Val <span class=\"hljs-type\">int</span><br>    Index <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    <span class=\"hljs-keyword\">var</span> n <span class=\"hljs-type\">int</span><br>    fmt.Scan(&amp;n)<br>    <br>    nums := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>    <br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        nums[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">2</span>)<br>        fmt.Scanf(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;nums[i][<span class=\"hljs-number\">0</span>])<br>        nums[i][<span class=\"hljs-number\">1</span>] = i<br>    &#125;<br>    <br>    sort.Slice(nums, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> nums[i][<span class=\"hljs-number\">0</span>] &lt; nums[j][<span class=\"hljs-number\">0</span>]<br>    &#125;)<br>    <br>    head := &amp;Node&#123;<br>        Index: <span class=\"hljs-number\">-1</span>,<br>    &#125;<br>    prev := head<br>    nodes := <span class=\"hljs-built_in\">make</span>([]*Node, n)<br>    ans := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>    <br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        node := &amp;Node&#123;<br>            Prev: prev,<br>            Val: nums[i][<span class=\"hljs-number\">0</span>],<br>            Index: nums[i][<span class=\"hljs-number\">1</span>],<br>        &#125;<br>        <br>        prev.Next = node<br>        prev = node<br>        nodes[nums[i][<span class=\"hljs-number\">1</span>]] = node<br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;%v, %v\\n&quot;, nums[i][1], node)</span><br>    &#125;<br>    <br>    prev.Next =  &amp;Node&#123;<br>            Index: n,<br>        &#125;<br>    <br>    <span class=\"hljs-keyword\">for</span> i := n - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--&#123;<br>        curr := nodes[i]<br>        pn := nodes[i].Prev<br>        nn := nodes[i].Next<br>        <br><br>        ans[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;%v %v %v\\n&quot;, p.Val, curr.Val, n.Val)</span><br>        <span class=\"hljs-keyword\">if</span> nn.Index == n || (pn.Index != <span class=\"hljs-number\">-1</span> &amp;&amp; abs(pn.Val - curr.Val) &lt;= abs(nn.Val - curr.Val)) &#123;<br>            ans[i][<span class=\"hljs-number\">0</span>] = abs(pn.Val - curr.Val)<br>            ans[i][<span class=\"hljs-number\">1</span>] = pn.Index + <span class=\"hljs-number\">1</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ans[i][<span class=\"hljs-number\">0</span>] = abs(nn.Val - curr.Val)<br>            ans[i][<span class=\"hljs-number\">1</span>] = nn.Index + <span class=\"hljs-number\">1</span><br>        &#125;<br>        <br>        pn.Next = curr.Next<br>        nn.Prev = pn<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; n; i++ &#123;<br>        fmt.Printf(<span class=\"hljs-string\">&quot;%v %v\\n&quot;</span>, ans[i][<span class=\"hljs-number\">0</span>], ans[i][<span class=\"hljs-number\">1</span>])<br>    &#125;<br>    <br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">(a <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &lt; <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -a<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"198.打家劫舍","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n考虑当前房屋偷还是不偷。同时当前房屋的状态只与前一间房屋有关，所以可以用滚动数组进行空间优化。\n\n时间复杂度：O(N)\n空间复杂度：O(1)\n\n```Go\nfunc rob(nums []int) int {\n    dp := make([]int, 2)\n    dp[0] = 0\n    dp[1] = 0\n\n    for i := 1; i <= len(nums); i++ {\n        temp := dp[0]\n        dp[0] = max(dp[1], dp[0])\n        dp[1] = temp + nums[i-1]\n    }\n\n    return max(dp[0], dp[1])\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```","source":"_posts/算法/leetcode/198.打家劫舍.md","raw":"---\ntitle: 198.打家劫舍\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n考虑当前房屋偷还是不偷。同时当前房屋的状态只与前一间房屋有关，所以可以用滚动数组进行空间优化。\n\n时间复杂度：O(N)\n空间复杂度：O(1)\n\n```Go\nfunc rob(nums []int) int {\n    dp := make([]int, 2)\n    dp[0] = 0\n    dp[1] = 0\n\n    for i := 1; i <= len(nums); i++ {\n        temp := dp[0]\n        dp[0] = max(dp[1], dp[0])\n        dp[1] = temp + nums[i-1]\n    }\n\n    return max(dp[0], dp[1])\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```","slug":"leetcode/198.打家劫舍","published":1,"updated":"2022-10-29T17:59:58.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p1000oca4lb19k4r6v","content":"<p>动态规划</p>\n<p>考虑当前房屋偷还是不偷。同时当前房屋的状态只与前一间房屋有关，所以可以用滚动数组进行空间优化。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rob</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">2</span>)<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span><br>    dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>        temp := dp[<span class=\"hljs-number\">0</span>]<br>        dp[<span class=\"hljs-number\">0</span>] = max(dp[<span class=\"hljs-number\">1</span>], dp[<span class=\"hljs-number\">0</span>])<br>        dp[<span class=\"hljs-number\">1</span>] = temp + nums[i<span class=\"hljs-number\">-1</span>]<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> max(dp[<span class=\"hljs-number\">0</span>], dp[<span class=\"hljs-number\">1</span>])<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":344,"excerpt":"","more":"<p>动态规划</p>\n<p>考虑当前房屋偷还是不偷。同时当前房屋的状态只与前一间房屋有关，所以可以用滚动数组进行空间优化。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rob</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">2</span>)<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span><br>    dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>        temp := dp[<span class=\"hljs-number\">0</span>]<br>        dp[<span class=\"hljs-number\">0</span>] = max(dp[<span class=\"hljs-number\">1</span>], dp[<span class=\"hljs-number\">0</span>])<br>        dp[<span class=\"hljs-number\">1</span>] = temp + nums[i<span class=\"hljs-number\">-1</span>]<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> max(dp[<span class=\"hljs-number\">0</span>], dp[<span class=\"hljs-number\">1</span>])<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"200.岛屿数量","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/number-of-islands/)\n\n深度优先搜索\n\n时间复杂度：O(MN)\n空间复杂度：O(MN)\n\n```Go\nfunc numIslands(grid [][]byte) int {\n    result := 0\n\n    var dfs func(int, int, int)\n\n    dfs = func(row int, col int, count int){\n        if row < 0 || col < 0 || row >= len(grid) || col >= len(grid[0]) {\n            return\n        }\n\n        if string(grid[row][col]) == \"0\" || string(grid[row][col]) == \"2\" {\n            return\n        }\n\n        // if count > 0 {\n        //     fmt.Printf(\"grid: %v\\n\", grid)\n        // }\n        grid[row][col] = '2'\n        result += count\n\n        dfs(row - 1, col, 0) //上\n        dfs(row, col + 1, 0) //右\n        dfs(row + 1, col, 0) //下\n        bfs(row, col - 1, 0) //左\n    }\n\n    for i := 0; i < len(grid); i++ {\n        for j := 0; j < len(grid[0]); j++ {\n            bfs(i, j, 1)\n        }\n    }\n\n    return result\n}\n```","source":"_posts/算法/leetcode/200.岛屿数量.md","raw":"---\ntitle: 200.岛屿数量\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/number-of-islands/)\n\n深度优先搜索\n\n时间复杂度：O(MN)\n空间复杂度：O(MN)\n\n```Go\nfunc numIslands(grid [][]byte) int {\n    result := 0\n\n    var dfs func(int, int, int)\n\n    dfs = func(row int, col int, count int){\n        if row < 0 || col < 0 || row >= len(grid) || col >= len(grid[0]) {\n            return\n        }\n\n        if string(grid[row][col]) == \"0\" || string(grid[row][col]) == \"2\" {\n            return\n        }\n\n        // if count > 0 {\n        //     fmt.Printf(\"grid: %v\\n\", grid)\n        // }\n        grid[row][col] = '2'\n        result += count\n\n        dfs(row - 1, col, 0) //上\n        dfs(row, col + 1, 0) //右\n        dfs(row + 1, col, 0) //下\n        bfs(row, col - 1, 0) //左\n    }\n\n    for i := 0; i < len(grid); i++ {\n        for j := 0; j < len(grid[0]); j++ {\n            bfs(i, j, 1)\n        }\n    }\n\n    return result\n}\n```","slug":"leetcode/200.岛屿数量","published":1,"updated":"2022-10-29T18:00:04.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p3000qca4l4bt1h1jg","content":"<p><a href=\"https://leetcode.cn/problems/number-of-islands/\">leetcode</a></p>\n<p>深度优先搜索</p>\n<p>时间复杂度：O(MN)<br>空间复杂度：O(MN)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">numIslands</span><span class=\"hljs-params\">(grid [][]<span class=\"hljs-type\">byte</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    result := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span><br><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(row <span class=\"hljs-type\">int</span>, col <span class=\"hljs-type\">int</span>, count <span class=\"hljs-type\">int</span>)</span></span>&#123;<br>        <span class=\"hljs-keyword\">if</span> row &lt; <span class=\"hljs-number\">0</span> || col &lt; <span class=\"hljs-number\">0</span> || row &gt;= <span class=\"hljs-built_in\">len</span>(grid) || col &gt;= <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">string</span>(grid[row][col]) == <span class=\"hljs-string\">&quot;0&quot;</span> || <span class=\"hljs-type\">string</span>(grid[row][col]) == <span class=\"hljs-string\">&quot;2&quot;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        <span class=\"hljs-comment\">// if count &gt; 0 &#123;</span><br>        <span class=\"hljs-comment\">//     fmt.Printf(&quot;grid: %v\\n&quot;, grid)</span><br>        <span class=\"hljs-comment\">// &#125;</span><br>        grid[row][col] = <span class=\"hljs-string\">&#x27;2&#x27;</span><br>        result += count<br><br>        dfs(row - <span class=\"hljs-number\">1</span>, col, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//上</span><br>        dfs(row, col + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//右</span><br>        dfs(row + <span class=\"hljs-number\">1</span>, col, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//下</span><br>        bfs(row, col - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//左</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(grid); i++ &#123;<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]); j++ &#123;<br>            bfs(i, j, <span class=\"hljs-number\">1</span>)<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":675,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/number-of-islands/\">leetcode</a></p>\n<p>深度优先搜索</p>\n<p>时间复杂度：O(MN)<br>空间复杂度：O(MN)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">numIslands</span><span class=\"hljs-params\">(grid [][]<span class=\"hljs-type\">byte</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    result := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span><br><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(row <span class=\"hljs-type\">int</span>, col <span class=\"hljs-type\">int</span>, count <span class=\"hljs-type\">int</span>)</span></span>&#123;<br>        <span class=\"hljs-keyword\">if</span> row &lt; <span class=\"hljs-number\">0</span> || col &lt; <span class=\"hljs-number\">0</span> || row &gt;= <span class=\"hljs-built_in\">len</span>(grid) || col &gt;= <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">string</span>(grid[row][col]) == <span class=\"hljs-string\">&quot;0&quot;</span> || <span class=\"hljs-type\">string</span>(grid[row][col]) == <span class=\"hljs-string\">&quot;2&quot;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        <span class=\"hljs-comment\">// if count &gt; 0 &#123;</span><br>        <span class=\"hljs-comment\">//     fmt.Printf(&quot;grid: %v\\n&quot;, grid)</span><br>        <span class=\"hljs-comment\">// &#125;</span><br>        grid[row][col] = <span class=\"hljs-string\">&#x27;2&#x27;</span><br>        result += count<br><br>        dfs(row - <span class=\"hljs-number\">1</span>, col, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//上</span><br>        dfs(row, col + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//右</span><br>        dfs(row + <span class=\"hljs-number\">1</span>, col, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//下</span><br>        bfs(row, col - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//左</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(grid); i++ &#123;<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]); j++ &#123;<br>            bfs(i, j, <span class=\"hljs-number\">1</span>)<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"18.四数之和","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n排序+双指针，注意剪枝的几种情况。\n\n1. 最小四个数比target大\n2. 选择的前两个数遇到重复数字时\n3. 剩下两数最大比 `target-preSum` 小或者最小比 `target-preSum` 大（也可以不判断）\n4. 剩下两数遇到重复数字时\n\n时间复杂度：O(n^3)\n空间复杂度：O(logN)，快排的递归深度\n\n```Go\nfunc fourSum(nums []int, target int) [][]int {\n    sort.Ints(nums)\n    n := len(nums)\n    ans := [][]int{}\n\n    // 挑选第一个数\n    for i := 0; i < n - 3; i++ {\n        // 最小四个数比target还大，剪枝\n        if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target{\n            continue\n        }\n\n        // 重复数字跳过\n        if i > 0 && nums[i] == nums[i-1]{\n            continue\n        }\n\n        // 挑选第二个数\n        for j := i + 1; j < n - 2; j++{\n            preSum := nums[i] + nums[j]\n\n            // 重复数字跳过，从第i+2个数字开始\n            if j > i + 1 && nums[j] == nums[j-1]{\n                continue\n            }\n\n            // 剩下求两数之和\n            l, r := j + 1, n - 1\n            // 最大两数和比target小，剪枝\n            if preSum + nums[r] + nums[r-1] < target{\n                continue\n            }\n            // 最小两数和比target大，剪枝\n            if preSum + nums[l] + nums[l+1] > target{\n                continue\n            }\n\n            for l < r {\n                if preSum + nums[l] + nums[r] == target {\n                    ans = append(ans, []int{nums[i], nums[j], nums[l], nums[r]})\n                    for l < r {\n                        l++\n                        // 当前数字和前一个数字不同则停止右移\n                        if nums[l-1] != nums[l] {\n                            break\n                        }\n                    }\n                    for l < r  {\n                        r--\n                        // 当前数字和前一个数字不同则停止左移\n                        if nums[r+1] != nums[j] {\n                            break\n                        }\n                    }\n                }\n                if preSum + nums[l] + nums[r] < target{\n                    l++\n                }\n                if preSum + nums[l] + nums[r] > target{\n                    r--\n                }\n            }\n        }\n    }\n\n    return ans\n}\n```\n\n\n","source":"_posts/算法/leetcode/18.四数之和.md","raw":"---\ntitle: 18.四数之和\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n排序+双指针，注意剪枝的几种情况。\n\n1. 最小四个数比target大\n2. 选择的前两个数遇到重复数字时\n3. 剩下两数最大比 `target-preSum` 小或者最小比 `target-preSum` 大（也可以不判断）\n4. 剩下两数遇到重复数字时\n\n时间复杂度：O(n^3)\n空间复杂度：O(logN)，快排的递归深度\n\n```Go\nfunc fourSum(nums []int, target int) [][]int {\n    sort.Ints(nums)\n    n := len(nums)\n    ans := [][]int{}\n\n    // 挑选第一个数\n    for i := 0; i < n - 3; i++ {\n        // 最小四个数比target还大，剪枝\n        if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target{\n            continue\n        }\n\n        // 重复数字跳过\n        if i > 0 && nums[i] == nums[i-1]{\n            continue\n        }\n\n        // 挑选第二个数\n        for j := i + 1; j < n - 2; j++{\n            preSum := nums[i] + nums[j]\n\n            // 重复数字跳过，从第i+2个数字开始\n            if j > i + 1 && nums[j] == nums[j-1]{\n                continue\n            }\n\n            // 剩下求两数之和\n            l, r := j + 1, n - 1\n            // 最大两数和比target小，剪枝\n            if preSum + nums[r] + nums[r-1] < target{\n                continue\n            }\n            // 最小两数和比target大，剪枝\n            if preSum + nums[l] + nums[l+1] > target{\n                continue\n            }\n\n            for l < r {\n                if preSum + nums[l] + nums[r] == target {\n                    ans = append(ans, []int{nums[i], nums[j], nums[l], nums[r]})\n                    for l < r {\n                        l++\n                        // 当前数字和前一个数字不同则停止右移\n                        if nums[l-1] != nums[l] {\n                            break\n                        }\n                    }\n                    for l < r  {\n                        r--\n                        // 当前数字和前一个数字不同则停止左移\n                        if nums[r+1] != nums[j] {\n                            break\n                        }\n                    }\n                }\n                if preSum + nums[l] + nums[r] < target{\n                    l++\n                }\n                if preSum + nums[l] + nums[r] > target{\n                    r--\n                }\n            }\n        }\n    }\n\n    return ans\n}\n```\n\n\n","slug":"leetcode/18.四数之和","published":1,"updated":"2022-10-29T17:55:20.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p4000sca4l1tv5bl1h","content":"<p>排序+双指针，注意剪枝的几种情况。</p>\n<ol>\n<li>最小四个数比target大</li>\n<li>选择的前两个数遇到重复数字时</li>\n<li>剩下两数最大比 <code>target-preSum</code> 小或者最小比 <code>target-preSum</code> 大（也可以不判断）</li>\n<li>剩下两数遇到重复数字时</li>\n</ol>\n<p>时间复杂度：O(n^3)<br>空间复杂度：O(logN)，快排的递归深度</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fourSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>    sort.Ints(nums)<br>    n := <span class=\"hljs-built_in\">len</span>(nums)<br>    ans := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-comment\">// 挑选第一个数</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">3</span>; i++ &#123;<br>        <span class=\"hljs-comment\">// 最小四个数比target还大，剪枝</span><br>        <span class=\"hljs-keyword\">if</span> nums[i] + nums[i+<span class=\"hljs-number\">1</span>] + nums[i+<span class=\"hljs-number\">2</span>] + nums[i+<span class=\"hljs-number\">3</span>] &gt; target&#123;<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        <span class=\"hljs-comment\">// 重复数字跳过</span><br>        <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"hljs-number\">-1</span>]&#123;<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        <span class=\"hljs-comment\">// 挑选第二个数</span><br>        <span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; n - <span class=\"hljs-number\">2</span>; j++&#123;<br>            preSum := nums[i] + nums[j]<br><br>            <span class=\"hljs-comment\">// 重复数字跳过，从第i+2个数字开始</span><br>            <span class=\"hljs-keyword\">if</span> j &gt; i + <span class=\"hljs-number\">1</span> &amp;&amp; nums[j] == nums[j<span class=\"hljs-number\">-1</span>]&#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-comment\">// 剩下求两数之和</span><br>            l, r := j + <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span><br>            <span class=\"hljs-comment\">// 最大两数和比target小，剪枝</span><br>            <span class=\"hljs-keyword\">if</span> preSum + nums[r] + nums[r<span class=\"hljs-number\">-1</span>] &lt; target&#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br>            <span class=\"hljs-comment\">// 最小两数和比target大，剪枝</span><br>            <span class=\"hljs-keyword\">if</span> preSum + nums[l] + nums[l+<span class=\"hljs-number\">1</span>] &gt; target&#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">for</span> l &lt; r &#123;<br>                <span class=\"hljs-keyword\">if</span> preSum + nums[l] + nums[r] == target &#123;<br>                    ans = <span class=\"hljs-built_in\">append</span>(ans, []<span class=\"hljs-type\">int</span>&#123;nums[i], nums[j], nums[l], nums[r]&#125;)<br>                    <span class=\"hljs-keyword\">for</span> l &lt; r &#123;<br>                        l++<br>                        <span class=\"hljs-comment\">// 当前数字和前一个数字不同则停止右移</span><br>                        <span class=\"hljs-keyword\">if</span> nums[l<span class=\"hljs-number\">-1</span>] != nums[l] &#123;<br>                            <span class=\"hljs-keyword\">break</span><br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">for</span> l &lt; r  &#123;<br>                        r--<br>                        <span class=\"hljs-comment\">// 当前数字和前一个数字不同则停止左移</span><br>                        <span class=\"hljs-keyword\">if</span> nums[r+<span class=\"hljs-number\">1</span>] != nums[j] &#123;<br>                            <span class=\"hljs-keyword\">break</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class=\"hljs-keyword\">if</span> preSum + nums[l] + nums[r] &lt; target&#123;<br>                    l++<br>                &#125;<br>                <span class=\"hljs-keyword\">if</span> preSum + nums[l] + nums[r] &gt; target&#123;<br>                    r--<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"wordcount":1262,"excerpt":"","more":"<p>排序+双指针，注意剪枝的几种情况。</p>\n<ol>\n<li>最小四个数比target大</li>\n<li>选择的前两个数遇到重复数字时</li>\n<li>剩下两数最大比 <code>target-preSum</code> 小或者最小比 <code>target-preSum</code> 大（也可以不判断）</li>\n<li>剩下两数遇到重复数字时</li>\n</ol>\n<p>时间复杂度：O(n^3)<br>空间复杂度：O(logN)，快排的递归深度</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fourSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>    sort.Ints(nums)<br>    n := <span class=\"hljs-built_in\">len</span>(nums)<br>    ans := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-comment\">// 挑选第一个数</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">3</span>; i++ &#123;<br>        <span class=\"hljs-comment\">// 最小四个数比target还大，剪枝</span><br>        <span class=\"hljs-keyword\">if</span> nums[i] + nums[i+<span class=\"hljs-number\">1</span>] + nums[i+<span class=\"hljs-number\">2</span>] + nums[i+<span class=\"hljs-number\">3</span>] &gt; target&#123;<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        <span class=\"hljs-comment\">// 重复数字跳过</span><br>        <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"hljs-number\">-1</span>]&#123;<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        <span class=\"hljs-comment\">// 挑选第二个数</span><br>        <span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; n - <span class=\"hljs-number\">2</span>; j++&#123;<br>            preSum := nums[i] + nums[j]<br><br>            <span class=\"hljs-comment\">// 重复数字跳过，从第i+2个数字开始</span><br>            <span class=\"hljs-keyword\">if</span> j &gt; i + <span class=\"hljs-number\">1</span> &amp;&amp; nums[j] == nums[j<span class=\"hljs-number\">-1</span>]&#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-comment\">// 剩下求两数之和</span><br>            l, r := j + <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span><br>            <span class=\"hljs-comment\">// 最大两数和比target小，剪枝</span><br>            <span class=\"hljs-keyword\">if</span> preSum + nums[r] + nums[r<span class=\"hljs-number\">-1</span>] &lt; target&#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br>            <span class=\"hljs-comment\">// 最小两数和比target大，剪枝</span><br>            <span class=\"hljs-keyword\">if</span> preSum + nums[l] + nums[l+<span class=\"hljs-number\">1</span>] &gt; target&#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">for</span> l &lt; r &#123;<br>                <span class=\"hljs-keyword\">if</span> preSum + nums[l] + nums[r] == target &#123;<br>                    ans = <span class=\"hljs-built_in\">append</span>(ans, []<span class=\"hljs-type\">int</span>&#123;nums[i], nums[j], nums[l], nums[r]&#125;)<br>                    <span class=\"hljs-keyword\">for</span> l &lt; r &#123;<br>                        l++<br>                        <span class=\"hljs-comment\">// 当前数字和前一个数字不同则停止右移</span><br>                        <span class=\"hljs-keyword\">if</span> nums[l<span class=\"hljs-number\">-1</span>] != nums[l] &#123;<br>                            <span class=\"hljs-keyword\">break</span><br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">for</span> l &lt; r  &#123;<br>                        r--<br>                        <span class=\"hljs-comment\">// 当前数字和前一个数字不同则停止左移</span><br>                        <span class=\"hljs-keyword\">if</span> nums[r+<span class=\"hljs-number\">1</span>] != nums[j] &#123;<br>                            <span class=\"hljs-keyword\">break</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class=\"hljs-keyword\">if</span> preSum + nums[l] + nums[r] &lt; target&#123;<br>                    l++<br>                &#125;<br>                <span class=\"hljs-keyword\">if</span> preSum + nums[l] + nums[r] &gt; target&#123;<br>                    r--<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"208.实现 Trie (前缀树)","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n字典树\n\n树的节点存储两个数据：\n\n1. Count作为结束节点的次数（用来标识单词结束以及统计单词出现次数）\n2. Edges存储从该节点还可以延伸下去的边（指针指向下一个节点），可以是数组也可以是map，map适用性更强。\n\n```Go\ntype Trie struct {\n    Count int\n    Edges map[byte]*Trie\n}\n\nfunc Constructor() Trie {\n    return Trie{\n        Count: 0,\n        Edges: make(map[byte]*Trie),\n    }\n}\n\n\nfunc (this *Trie) Insert(word string)  {\n    curr := this\n    for i := 0; i < len(word); i++ {\n        next, ok := curr.Edges[word[i]]\n        if !ok {\n            next = &Trie{\n                Count: 0,\n                Edges: make(map[byte]*Trie),\n            }\n            curr.Edges[word[i]] = next\n        }\n\n        if i == len(word) - 1 {\n            next.Count++\n        }\n        // fmt.Printf(\"curr: %v\\n\", curr)\n\n        curr = next\n\n    }\n}\n\nfunc (this *Trie) Search(word string) bool {\n    curr := this\n    ok := true\n    for i := 0; i < len(word); i++ {\n        if ok {\n            curr, ok = curr.Edges[word[i]]  \n        } else {\n            return false\n        }\n    }\n    return ok && curr.Count > 0\n}\n\n\nfunc (this *Trie) StartsWith(prefix string) bool {\n    curr := this\n    ok := true\n    for i := 0; i < len(prefix); i++ {\n        if ok {\n            curr, ok = curr.Edges[prefix[i]]  \n        } else {\n            return false\n        }\n    }\n    return ok && true\n}\n\n\n/**\n * Your Trie object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Insert(word);\n * param_2 := obj.Search(word);\n * param_3 := obj.StartsWith(prefix);\n */\n ```","source":"_posts/算法/leetcode/208.实现 Trie (前缀树).md","raw":"---\ntitle: 208.实现 Trie (前缀树)\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n字典树\n\n树的节点存储两个数据：\n\n1. Count作为结束节点的次数（用来标识单词结束以及统计单词出现次数）\n2. Edges存储从该节点还可以延伸下去的边（指针指向下一个节点），可以是数组也可以是map，map适用性更强。\n\n```Go\ntype Trie struct {\n    Count int\n    Edges map[byte]*Trie\n}\n\nfunc Constructor() Trie {\n    return Trie{\n        Count: 0,\n        Edges: make(map[byte]*Trie),\n    }\n}\n\n\nfunc (this *Trie) Insert(word string)  {\n    curr := this\n    for i := 0; i < len(word); i++ {\n        next, ok := curr.Edges[word[i]]\n        if !ok {\n            next = &Trie{\n                Count: 0,\n                Edges: make(map[byte]*Trie),\n            }\n            curr.Edges[word[i]] = next\n        }\n\n        if i == len(word) - 1 {\n            next.Count++\n        }\n        // fmt.Printf(\"curr: %v\\n\", curr)\n\n        curr = next\n\n    }\n}\n\nfunc (this *Trie) Search(word string) bool {\n    curr := this\n    ok := true\n    for i := 0; i < len(word); i++ {\n        if ok {\n            curr, ok = curr.Edges[word[i]]  \n        } else {\n            return false\n        }\n    }\n    return ok && curr.Count > 0\n}\n\n\nfunc (this *Trie) StartsWith(prefix string) bool {\n    curr := this\n    ok := true\n    for i := 0; i < len(prefix); i++ {\n        if ok {\n            curr, ok = curr.Edges[prefix[i]]  \n        } else {\n            return false\n        }\n    }\n    return ok && true\n}\n\n\n/**\n * Your Trie object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Insert(word);\n * param_2 := obj.Search(word);\n * param_3 := obj.StartsWith(prefix);\n */\n ```","slug":"leetcode/208.实现 Trie (前缀树)","published":1,"updated":"2022-10-29T18:00:09.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p4000uca4l22gb4shy","content":"<p>字典树</p>\n<p>树的节点存储两个数据：</p>\n<ol>\n<li>Count作为结束节点的次数（用来标识单词结束以及统计单词出现次数）</li>\n<li>Edges存储从该节点还可以延伸下去的边（指针指向下一个节点），可以是数组也可以是map，map适用性更强。</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">type</span> Trie <span class=\"hljs-keyword\">struct</span> &#123;<br>    Count <span class=\"hljs-type\">int</span><br>    Edges <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]*Trie<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> Trie &#123;<br>    <span class=\"hljs-keyword\">return</span> Trie&#123;<br>        Count: <span class=\"hljs-number\">0</span>,<br>        Edges: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]*Trie),<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Trie)</span></span> Insert(word <span class=\"hljs-type\">string</span>)  &#123;<br>    curr := this<br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(word); i++ &#123;<br>        next, ok := curr.Edges[word[i]]<br>        <span class=\"hljs-keyword\">if</span> !ok &#123;<br>            next = &amp;Trie&#123;<br>                Count: <span class=\"hljs-number\">0</span>,<br>                Edges: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]*Trie),<br>            &#125;<br>            curr.Edges[word[i]] = next<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-built_in\">len</span>(word) - <span class=\"hljs-number\">1</span> &#123;<br>            next.Count++<br>        &#125;<br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;curr: %v\\n&quot;, curr)</span><br><br>        curr = next<br><br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Trie)</span></span> Search(word <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">bool</span> &#123;<br>    curr := this<br>    ok := <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(word); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> ok &#123;<br>            curr, ok = curr.Edges[word[i]]  <br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ok &amp;&amp; curr.Count &gt; <span class=\"hljs-number\">0</span><br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Trie)</span></span> StartsWith(prefix <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">bool</span> &#123;<br>    curr := this<br>    ok := <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(prefix); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> ok &#123;<br>            curr, ok = curr.Edges[prefix[i]]  <br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ok &amp;&amp; <span class=\"hljs-literal\">true</span><br>&#125;<br><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your Trie object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * obj := Constructor();</span><br><span class=\"hljs-comment\"> * obj.Insert(word);</span><br><span class=\"hljs-comment\"> * param_2 := obj.Search(word);</span><br><span class=\"hljs-comment\"> * param_3 := obj.StartsWith(prefix);</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1255,"excerpt":"","more":"<p>字典树</p>\n<p>树的节点存储两个数据：</p>\n<ol>\n<li>Count作为结束节点的次数（用来标识单词结束以及统计单词出现次数）</li>\n<li>Edges存储从该节点还可以延伸下去的边（指针指向下一个节点），可以是数组也可以是map，map适用性更强。</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">type</span> Trie <span class=\"hljs-keyword\">struct</span> &#123;<br>    Count <span class=\"hljs-type\">int</span><br>    Edges <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]*Trie<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> Trie &#123;<br>    <span class=\"hljs-keyword\">return</span> Trie&#123;<br>        Count: <span class=\"hljs-number\">0</span>,<br>        Edges: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]*Trie),<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Trie)</span></span> Insert(word <span class=\"hljs-type\">string</span>)  &#123;<br>    curr := this<br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(word); i++ &#123;<br>        next, ok := curr.Edges[word[i]]<br>        <span class=\"hljs-keyword\">if</span> !ok &#123;<br>            next = &amp;Trie&#123;<br>                Count: <span class=\"hljs-number\">0</span>,<br>                Edges: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]*Trie),<br>            &#125;<br>            curr.Edges[word[i]] = next<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-built_in\">len</span>(word) - <span class=\"hljs-number\">1</span> &#123;<br>            next.Count++<br>        &#125;<br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;curr: %v\\n&quot;, curr)</span><br><br>        curr = next<br><br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Trie)</span></span> Search(word <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">bool</span> &#123;<br>    curr := this<br>    ok := <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(word); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> ok &#123;<br>            curr, ok = curr.Edges[word[i]]  <br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ok &amp;&amp; curr.Count &gt; <span class=\"hljs-number\">0</span><br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Trie)</span></span> StartsWith(prefix <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">bool</span> &#123;<br>    curr := this<br>    ok := <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(prefix); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> ok &#123;<br>            curr, ok = curr.Edges[prefix[i]]  <br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ok &amp;&amp; <span class=\"hljs-literal\">true</span><br>&#125;<br><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your Trie object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * obj := Constructor();</span><br><span class=\"hljs-comment\"> * obj.Insert(word);</span><br><span class=\"hljs-comment\"> * param_2 := obj.Search(word);</span><br><span class=\"hljs-comment\"> * param_3 := obj.StartsWith(prefix);</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></td></tr></table></figure>"},{"title":"210.课程表2","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/course-schedule-ii/)\n\n建立前序后序邻接表，找到入度为零的节点，然后维护邻接表。\n\n最后路径长度等于课程总数则表示可以学完所有课程。\n\n时间复杂度：O(n + m)\n空间复杂度：O(n + m)\n\n```Go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tresult := []int{}\n\tpre := make(map[int][]int)\n\tpost := make(map[int][]int)\n\n\tfor _, req := range prerequisites {\n\t\tx := req[0]\n\t\ty := req[1]\n\t\tpre[x] = append(pre[x], y)\n\t\tpost[y] = append(post[y], x)\n\t}\n\n\t// fmt.Printf(\"pre: %v\\n\", pre)\n\t// fmt.Printf(\"post: %v\\n\", post)\n\n\tqueue := []int{}\n\n\tfor i := 0; i < numCourses; i++ {\n\t\tif _, ok := pre[i]; !ok {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\n\tfor len(queue) > 0 {\n\t\tcur := queue[0]\n\t\tresult = append(result, cur)\n\t\t// fmt.Printf(\"queue: %v\\n\", queue)\n\t\tqueue = queue[1:]\n\t\tfor _, p := range post[cur] {\n\t\t\tfor i, q := range pre[p] {\n\t\t\t\tif q == cur {\n\t\t\t\t\tpre[p] = append(pre[p][:i], pre[p][i+1:]...)\n\t\t\t\t\tif len(pre[p]) == 0 {\n\t\t\t\t\t\tqueue = append(queue, p)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tif len(result) != numCourses {\n\t\treturn []int{}\n\t}\n\n\treturn result\n}\n```","source":"_posts/算法/leetcode/210.课程表2.md","raw":"---\ntitle: 210.课程表2\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/course-schedule-ii/)\n\n建立前序后序邻接表，找到入度为零的节点，然后维护邻接表。\n\n最后路径长度等于课程总数则表示可以学完所有课程。\n\n时间复杂度：O(n + m)\n空间复杂度：O(n + m)\n\n```Go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tresult := []int{}\n\tpre := make(map[int][]int)\n\tpost := make(map[int][]int)\n\n\tfor _, req := range prerequisites {\n\t\tx := req[0]\n\t\ty := req[1]\n\t\tpre[x] = append(pre[x], y)\n\t\tpost[y] = append(post[y], x)\n\t}\n\n\t// fmt.Printf(\"pre: %v\\n\", pre)\n\t// fmt.Printf(\"post: %v\\n\", post)\n\n\tqueue := []int{}\n\n\tfor i := 0; i < numCourses; i++ {\n\t\tif _, ok := pre[i]; !ok {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\n\tfor len(queue) > 0 {\n\t\tcur := queue[0]\n\t\tresult = append(result, cur)\n\t\t// fmt.Printf(\"queue: %v\\n\", queue)\n\t\tqueue = queue[1:]\n\t\tfor _, p := range post[cur] {\n\t\t\tfor i, q := range pre[p] {\n\t\t\t\tif q == cur {\n\t\t\t\t\tpre[p] = append(pre[p][:i], pre[p][i+1:]...)\n\t\t\t\t\tif len(pre[p]) == 0 {\n\t\t\t\t\t\tqueue = append(queue, p)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tif len(result) != numCourses {\n\t\treturn []int{}\n\t}\n\n\treturn result\n}\n```","slug":"leetcode/210.课程表2","published":1,"updated":"2022-10-29T18:00:15.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p5000wca4l3okt11ks","content":"<p><a href=\"https://leetcode.cn/problems/course-schedule-ii/\">leetcode</a></p>\n<p>建立前序后序邻接表，找到入度为零的节点，然后维护邻接表。</p>\n<p>最后路径长度等于课程总数则表示可以学完所有课程。</p>\n<p>时间复杂度：O(n + m)<br>空间复杂度：O(n + m)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-type\">int</span>, prerequisites [][]<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tpre := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>)<br>\tpost := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>)<br><br>\t<span class=\"hljs-keyword\">for</span> _, req := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tx := req[<span class=\"hljs-number\">0</span>]<br>\t\ty := req[<span class=\"hljs-number\">1</span>]<br>\t\tpre[x] = <span class=\"hljs-built_in\">append</span>(pre[x], y)<br>\t\tpost[y] = <span class=\"hljs-built_in\">append</span>(post[y], x)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// fmt.Printf(&quot;pre: %v\\n&quot;, pre)</span><br>\t<span class=\"hljs-comment\">// fmt.Printf(&quot;post: %v\\n&quot;, post)</span><br><br>\tqueue := []<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := pre[i]; !ok &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tcur := queue[<span class=\"hljs-number\">0</span>]<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, cur)<br>\t\t<span class=\"hljs-comment\">// fmt.Printf(&quot;queue: %v\\n&quot;, queue)</span><br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\t<span class=\"hljs-keyword\">for</span> _, p := <span class=\"hljs-keyword\">range</span> post[cur] &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> i, q := <span class=\"hljs-keyword\">range</span> pre[p] &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> q == cur &#123;<br>\t\t\t\t\tpre[p] = <span class=\"hljs-built_in\">append</span>(pre[p][:i], pre[p][i+<span class=\"hljs-number\">1</span>:]...)<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(pre[p]) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, p)<br>\t\t\t\t\t&#125;<br>\t\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(result) != numCourses &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":986,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/course-schedule-ii/\">leetcode</a></p>\n<p>建立前序后序邻接表，找到入度为零的节点，然后维护邻接表。</p>\n<p>最后路径长度等于课程总数则表示可以学完所有课程。</p>\n<p>时间复杂度：O(n + m)<br>空间复杂度：O(n + m)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-type\">int</span>, prerequisites [][]<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tpre := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>)<br>\tpost := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>)<br><br>\t<span class=\"hljs-keyword\">for</span> _, req := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tx := req[<span class=\"hljs-number\">0</span>]<br>\t\ty := req[<span class=\"hljs-number\">1</span>]<br>\t\tpre[x] = <span class=\"hljs-built_in\">append</span>(pre[x], y)<br>\t\tpost[y] = <span class=\"hljs-built_in\">append</span>(post[y], x)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// fmt.Printf(&quot;pre: %v\\n&quot;, pre)</span><br>\t<span class=\"hljs-comment\">// fmt.Printf(&quot;post: %v\\n&quot;, post)</span><br><br>\tqueue := []<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := pre[i]; !ok &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tcur := queue[<span class=\"hljs-number\">0</span>]<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, cur)<br>\t\t<span class=\"hljs-comment\">// fmt.Printf(&quot;queue: %v\\n&quot;, queue)</span><br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\t<span class=\"hljs-keyword\">for</span> _, p := <span class=\"hljs-keyword\">range</span> post[cur] &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> i, q := <span class=\"hljs-keyword\">range</span> pre[p] &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> q == cur &#123;<br>\t\t\t\t\tpre[p] = <span class=\"hljs-built_in\">append</span>(pre[p][:i], pre[p][i+<span class=\"hljs-number\">1</span>:]...)<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(pre[p]) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, p)<br>\t\t\t\t\t&#125;<br>\t\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(result) != numCourses &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"22.括号生成","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/generate-parentheses/submissions/)\n\n先选定一对括号，生成的序列可以写为`(left)right`，其中 `left` 和 `right` 分别为 `i` 对括号和 `n-i-1` 对括号的序列。\n\n再利用递归计算 `left` 和 `right` 。\n\n时间复杂度：O(4n/√n)\n空间复杂度：O(4n/√n)\n\n```Go\nvar cache = make(map[int][]string)\n\nfunc generateParenthesis(n int) []string {\n    return generate(n)\n}\n\nfunc generate(n int) []string {\n    if n == 0 {\n        return []string{\"\"}\n    }\n\n    if n == 1 {\n        return []string{\"()\"}\n    }\n\n    if c, ok := cache[n]; ok {\n        return c\n    }\n\n    result := []string{}\n    for i := 0; i < n; i++ {\n        left := generate(i)\n        right := generate(n - i -1)\n        \n        for _, l := range left {\n            temp := fmt.Sprintf(\"(%s)\", l)\n            for _, r := range right {\n                result = append(result, fmt.Sprintf(\"%s%s\", temp, r))\n            }\n        }\n\n    }\n\n    cache[n] = result\n    return result\n}\n```","source":"_posts/算法/leetcode/22.括号生成.md","raw":"---\ntitle: 22.括号生成\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/generate-parentheses/submissions/)\n\n先选定一对括号，生成的序列可以写为`(left)right`，其中 `left` 和 `right` 分别为 `i` 对括号和 `n-i-1` 对括号的序列。\n\n再利用递归计算 `left` 和 `right` 。\n\n时间复杂度：O(4n/√n)\n空间复杂度：O(4n/√n)\n\n```Go\nvar cache = make(map[int][]string)\n\nfunc generateParenthesis(n int) []string {\n    return generate(n)\n}\n\nfunc generate(n int) []string {\n    if n == 0 {\n        return []string{\"\"}\n    }\n\n    if n == 1 {\n        return []string{\"()\"}\n    }\n\n    if c, ok := cache[n]; ok {\n        return c\n    }\n\n    result := []string{}\n    for i := 0; i < n; i++ {\n        left := generate(i)\n        right := generate(n - i -1)\n        \n        for _, l := range left {\n            temp := fmt.Sprintf(\"(%s)\", l)\n            for _, r := range right {\n                result = append(result, fmt.Sprintf(\"%s%s\", temp, r))\n            }\n        }\n\n    }\n\n    cache[n] = result\n    return result\n}\n```","slug":"leetcode/22.括号生成","published":1,"updated":"2022-10-29T17:55:28.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p6000yca4l5tw8b8v8","content":"<p><a href=\"https://leetcode.cn/problems/generate-parentheses/submissions/\">leetcode</a></p>\n<p>先选定一对括号，生成的序列可以写为<code>(left)right</code>，其中 <code>left</code> 和 <code>right</code> 分别为 <code>i</code> 对括号和 <code>n-i-1</code> 对括号的序列。</p>\n<p>再利用递归计算 <code>left</code> 和 <code>right</code> 。</p>\n<p>时间复杂度：O(4n&#x2F;√n)<br>空间复杂度：O(4n&#x2F;√n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">var</span> cache = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">string</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generateParenthesis</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> generate(n)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generate</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;&quot;</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;()&quot;</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> c, ok := cache[n]; ok &#123;<br>        <span class=\"hljs-keyword\">return</span> c<br>    &#125;<br><br>    result := []<span class=\"hljs-type\">string</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        left := generate(i)<br>        right := generate(n - i <span class=\"hljs-number\">-1</span>)<br>        <br>        <span class=\"hljs-keyword\">for</span> _, l := <span class=\"hljs-keyword\">range</span> left &#123;<br>            temp := fmt.Sprintf(<span class=\"hljs-string\">&quot;(%s)&quot;</span>, l)<br>            <span class=\"hljs-keyword\">for</span> _, r := <span class=\"hljs-keyword\">range</span> right &#123;<br>                result = <span class=\"hljs-built_in\">append</span>(result, fmt.Sprintf(<span class=\"hljs-string\">&quot;%s%s&quot;</span>, temp, r))<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    cache[n] = result<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":753,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/generate-parentheses/submissions/\">leetcode</a></p>\n<p>先选定一对括号，生成的序列可以写为<code>(left)right</code>，其中 <code>left</code> 和 <code>right</code> 分别为 <code>i</code> 对括号和 <code>n-i-1</code> 对括号的序列。</p>\n<p>再利用递归计算 <code>left</code> 和 <code>right</code> 。</p>\n<p>时间复杂度：O(4n&#x2F;√n)<br>空间复杂度：O(4n&#x2F;√n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">var</span> cache = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">string</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generateParenthesis</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> generate(n)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generate</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;&quot;</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;()&quot;</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> c, ok := cache[n]; ok &#123;<br>        <span class=\"hljs-keyword\">return</span> c<br>    &#125;<br><br>    result := []<span class=\"hljs-type\">string</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>        left := generate(i)<br>        right := generate(n - i <span class=\"hljs-number\">-1</span>)<br>        <br>        <span class=\"hljs-keyword\">for</span> _, l := <span class=\"hljs-keyword\">range</span> left &#123;<br>            temp := fmt.Sprintf(<span class=\"hljs-string\">&quot;(%s)&quot;</span>, l)<br>            <span class=\"hljs-keyword\">for</span> _, r := <span class=\"hljs-keyword\">range</span> right &#123;<br>                result = <span class=\"hljs-built_in\">append</span>(result, fmt.Sprintf(<span class=\"hljs-string\">&quot;%s%s&quot;</span>, temp, r))<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    cache[n] = result<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"23. 合并K个升序链表","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/merge-k-sorted-lists/)\n\n分治思想\n\n时间复杂度：O(kn * log k)\n空间复杂度：O(log k)\n\n```Go\n/**\n\n* Definition for singly-linked list.\n\n* type ListNode struct {\n\n* Val int\n\n* Next *ListNode\n\n* }\n\n*/\n\nfunc mergeKLists(lists []*ListNode) *ListNode {\n\n\tk := len(lists)\n\t\n\tif k == 0 {\n\t\n\t\treturn nil\n\t\n\t}\n\t\n\t  \n\t\n\tif k == 1 {\n\t\n\t\treturn lists[0]\n\t\n\t}\n\t\n\t  \n\t\n\tmid := k / 2\n\t\n\tleft := lists[0:mid]\n\t\n\tright := lists[mid:k]\n\t\n\tleftList := mergeKLists(left)\n\t\n\trightList := mergeKLists(right)\n\t\n\t  \n\t\n\treturn merge(leftList, rightList)\n\n}\n\n  \n\nfunc merge(left *ListNode, right *ListNode) *ListNode{\n\n\tdummy := &ListNode{}\n\t\n\tresult := dummy\n\t\n\tfor left != nil && right != nil {\n\t\t\n\t\tif left.Val < right.Val {\n\t\t\n\t\t\tdummy.Next = left\n\t\t\t\n\t\t\tdummy = left\n\t\t\t\n\t\t\tleft = left.Next\n\t\t\n\t\t}else{\n\t\t\n\t\t\tdummy.Next = right\n\t\t\t\n\t\t\tdummy = right\n\t\t\t\n\t\t\tright = right.Next\n\t\t\t\n\t\t}\n\t\n\t}\n\t\n\t  \n\t\n\tif left == nil {\n\t\n\t\tdummy.Next = right\n\t\n\t}\n\t\n\t  \n\t\n\tif right == nil {\n\t\n\t\tdummy.Next = left\n\t\n\t}\n\t\n\t\n\treturn result.Next\n\n}\n```","source":"_posts/算法/leetcode/23. 合并K个升序链表.md","raw":"---\ntitle: 23. 合并K个升序链表\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/merge-k-sorted-lists/)\n\n分治思想\n\n时间复杂度：O(kn * log k)\n空间复杂度：O(log k)\n\n```Go\n/**\n\n* Definition for singly-linked list.\n\n* type ListNode struct {\n\n* Val int\n\n* Next *ListNode\n\n* }\n\n*/\n\nfunc mergeKLists(lists []*ListNode) *ListNode {\n\n\tk := len(lists)\n\t\n\tif k == 0 {\n\t\n\t\treturn nil\n\t\n\t}\n\t\n\t  \n\t\n\tif k == 1 {\n\t\n\t\treturn lists[0]\n\t\n\t}\n\t\n\t  \n\t\n\tmid := k / 2\n\t\n\tleft := lists[0:mid]\n\t\n\tright := lists[mid:k]\n\t\n\tleftList := mergeKLists(left)\n\t\n\trightList := mergeKLists(right)\n\t\n\t  \n\t\n\treturn merge(leftList, rightList)\n\n}\n\n  \n\nfunc merge(left *ListNode, right *ListNode) *ListNode{\n\n\tdummy := &ListNode{}\n\t\n\tresult := dummy\n\t\n\tfor left != nil && right != nil {\n\t\t\n\t\tif left.Val < right.Val {\n\t\t\n\t\t\tdummy.Next = left\n\t\t\t\n\t\t\tdummy = left\n\t\t\t\n\t\t\tleft = left.Next\n\t\t\n\t\t}else{\n\t\t\n\t\t\tdummy.Next = right\n\t\t\t\n\t\t\tdummy = right\n\t\t\t\n\t\t\tright = right.Next\n\t\t\t\n\t\t}\n\t\n\t}\n\t\n\t  \n\t\n\tif left == nil {\n\t\n\t\tdummy.Next = right\n\t\n\t}\n\t\n\t  \n\t\n\tif right == nil {\n\t\n\t\tdummy.Next = left\n\t\n\t}\n\t\n\t\n\treturn result.Next\n\n}\n```","slug":"leetcode/23. 合并K个升序链表","published":1,"updated":"2022-10-29T17:55:34.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p60010ca4lahgl8c74","content":"<p><a href=\"https://leetcode.cn/problems/merge-k-sorted-lists/\">leetcode</a></p>\n<p>分治思想</p>\n<p>时间复杂度：O(kn * log k)<br>空间复杂度：O(log k)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* Definition for singly-linked list.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* type ListNode struct &#123;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* Val int</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* Next *ListNode</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">*/</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mergeKLists</span><span class=\"hljs-params\">(lists []*ListNode)</span></span> *ListNode &#123;<br><br>\tk := <span class=\"hljs-built_in\">len</span>(lists)<br>\t<br>\t<span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">0</span> &#123;<br>\t<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">1</span> &#123;<br>\t<br>\t\t<span class=\"hljs-keyword\">return</span> lists[<span class=\"hljs-number\">0</span>]<br>\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\tmid := k / <span class=\"hljs-number\">2</span><br>\t<br>\tleft := lists[<span class=\"hljs-number\">0</span>:mid]<br>\t<br>\tright := lists[mid:k]<br>\t<br>\tleftList := mergeKLists(left)<br>\t<br>\trightList := mergeKLists(right)<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">return</span> merge(leftList, rightList)<br><br>&#125;<br><br>  <br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(left *ListNode, right *ListNode)</span></span> *ListNode&#123;<br><br>\tdummy := &amp;ListNode&#123;&#125;<br>\t<br>\tresult := dummy<br>\t<br>\t<span class=\"hljs-keyword\">for</span> left != <span class=\"hljs-literal\">nil</span> &amp;&amp; right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<br>\t\t<span class=\"hljs-keyword\">if</span> left.Val &lt; right.Val &#123;<br>\t\t<br>\t\t\tdummy.Next = left<br>\t\t\t<br>\t\t\tdummy = left<br>\t\t\t<br>\t\t\tleft = left.Next<br>\t\t<br>\t\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t<br>\t\t\tdummy.Next = right<br>\t\t\t<br>\t\t\tdummy = right<br>\t\t\t<br>\t\t\tright = right.Next<br>\t\t\t<br>\t\t&#125;<br>\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">if</span> left == <span class=\"hljs-literal\">nil</span> &#123;<br>\t<br>\t\tdummy.Next = right<br>\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">if</span> right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t<br>\t\tdummy.Next = left<br>\t<br>\t&#125;<br>\t<br>\t<br>\t<span class=\"hljs-keyword\">return</span> result.Next<br><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":958,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/merge-k-sorted-lists/\">leetcode</a></p>\n<p>分治思想</p>\n<p>时间复杂度：O(kn * log k)<br>空间复杂度：O(log k)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* Definition for singly-linked list.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* type ListNode struct &#123;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* Val int</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* Next *ListNode</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">*/</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mergeKLists</span><span class=\"hljs-params\">(lists []*ListNode)</span></span> *ListNode &#123;<br><br>\tk := <span class=\"hljs-built_in\">len</span>(lists)<br>\t<br>\t<span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">0</span> &#123;<br>\t<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">1</span> &#123;<br>\t<br>\t\t<span class=\"hljs-keyword\">return</span> lists[<span class=\"hljs-number\">0</span>]<br>\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\tmid := k / <span class=\"hljs-number\">2</span><br>\t<br>\tleft := lists[<span class=\"hljs-number\">0</span>:mid]<br>\t<br>\tright := lists[mid:k]<br>\t<br>\tleftList := mergeKLists(left)<br>\t<br>\trightList := mergeKLists(right)<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">return</span> merge(leftList, rightList)<br><br>&#125;<br><br>  <br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(left *ListNode, right *ListNode)</span></span> *ListNode&#123;<br><br>\tdummy := &amp;ListNode&#123;&#125;<br>\t<br>\tresult := dummy<br>\t<br>\t<span class=\"hljs-keyword\">for</span> left != <span class=\"hljs-literal\">nil</span> &amp;&amp; right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<br>\t\t<span class=\"hljs-keyword\">if</span> left.Val &lt; right.Val &#123;<br>\t\t<br>\t\t\tdummy.Next = left<br>\t\t\t<br>\t\t\tdummy = left<br>\t\t\t<br>\t\t\tleft = left.Next<br>\t\t<br>\t\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t<br>\t\t\tdummy.Next = right<br>\t\t\t<br>\t\t\tdummy = right<br>\t\t\t<br>\t\t\tright = right.Next<br>\t\t\t<br>\t\t&#125;<br>\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">if</span> left == <span class=\"hljs-literal\">nil</span> &#123;<br>\t<br>\t\tdummy.Next = right<br>\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">if</span> right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t<br>\t\tdummy.Next = left<br>\t<br>\t&#125;<br>\t<br>\t<br>\t<span class=\"hljs-keyword\">return</span> result.Next<br><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"239.滑动窗口最大值","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/sliding-window-maximum/)\n\n使用container.heap包实现大根堆。需要维护数据的index来判断是否在窗口内。\n\n```Go\nvar a []int\nfunc maxSlidingWindow(nums []int, k int) []int {\n    a = nums\n    h := &Heap{}\n    heap.Init(h)\n    ans := []int{}\n\n    for i := 0; i < len(nums); i++ {\n        heap.Push(h, i)\n        for h.slice[0] <= i - k {\n            heap.Pop(h)\n        }\n        // fmt.Printf(\"h: %v\\n\", h)\n        if i >= k - 1 {\n            ans = append(ans, nums[h.slice[0]])\n        }\n    }\n    return ans\n}\n\ntype Heap struct {\n    slice sort.IntSlice\n}\n\nfunc (h Heap) Len() int {\n    return len(h.slice)\n}\n\nfunc (h Heap) Swap(i, j int) {\n    h.slice[i], h.slice[j] = h.slice[j], h.slice[i]\n}\n\nfunc (h Heap) Less(i, j int) bool {\n    return a[h.slice[i]] > a[h.slice[j]]\n}\n\nfunc (h *Heap) Push(x interface{}) {\n    h.slice = append(h.slice, x.(int))\n}\n\nfunc (h *Heap) Pop() interface{} {\n    old := h.slice\n    n := len(old)\n    x := old[n-1]\n    h.slice = old[:n-1]\n    return x\n}\n\n\n\ntype NodeHeap []Node\n\nfunc (nh NodeHeap) Len() int {\n\treturn len(nh)\n}\n\nfunc (nh NodeHeap) Swap(i, j int) {\n\tnh[i], nh[j] = nh[j], nh[i]\n}\nfunc (nh NodeHeap) Less(i, j int) bool {\n\tif nh[i].count > nh[j].count {\n\t\treturn true\n\t}\n\n\tif nh[i].count == nh[j].count {\n\t\tif nh[i].x + nh[i].y < nh[j].x + nh[j].y{\n\t\t\treturn true\n\t\t}\n\n\t\tif nh[i].x + nh[i].y == nh[j].x + nh[j].y && nh[i].x < nh[].x{\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn nh[i].Area() < nh[j].Area()\n}\n\nfunc (nh *NodeHeap) Push(h interface{}) {\n\t*nh = append(*nh, h.(Node))\n}\nfunc (nh *NodeHeap) Pop() (x interface{}) {\n\tn := len(*nh)\n\tx = (*nh)[n-1]    \n\t*nh = (*nh)[:n-1]\n\treturn x\n}\n```\n\n","source":"_posts/算法/leetcode/239.滑动窗口最大值.md","raw":"---\ntitle: 239.滑动窗口最大值\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/sliding-window-maximum/)\n\n使用container.heap包实现大根堆。需要维护数据的index来判断是否在窗口内。\n\n```Go\nvar a []int\nfunc maxSlidingWindow(nums []int, k int) []int {\n    a = nums\n    h := &Heap{}\n    heap.Init(h)\n    ans := []int{}\n\n    for i := 0; i < len(nums); i++ {\n        heap.Push(h, i)\n        for h.slice[0] <= i - k {\n            heap.Pop(h)\n        }\n        // fmt.Printf(\"h: %v\\n\", h)\n        if i >= k - 1 {\n            ans = append(ans, nums[h.slice[0]])\n        }\n    }\n    return ans\n}\n\ntype Heap struct {\n    slice sort.IntSlice\n}\n\nfunc (h Heap) Len() int {\n    return len(h.slice)\n}\n\nfunc (h Heap) Swap(i, j int) {\n    h.slice[i], h.slice[j] = h.slice[j], h.slice[i]\n}\n\nfunc (h Heap) Less(i, j int) bool {\n    return a[h.slice[i]] > a[h.slice[j]]\n}\n\nfunc (h *Heap) Push(x interface{}) {\n    h.slice = append(h.slice, x.(int))\n}\n\nfunc (h *Heap) Pop() interface{} {\n    old := h.slice\n    n := len(old)\n    x := old[n-1]\n    h.slice = old[:n-1]\n    return x\n}\n\n\n\ntype NodeHeap []Node\n\nfunc (nh NodeHeap) Len() int {\n\treturn len(nh)\n}\n\nfunc (nh NodeHeap) Swap(i, j int) {\n\tnh[i], nh[j] = nh[j], nh[i]\n}\nfunc (nh NodeHeap) Less(i, j int) bool {\n\tif nh[i].count > nh[j].count {\n\t\treturn true\n\t}\n\n\tif nh[i].count == nh[j].count {\n\t\tif nh[i].x + nh[i].y < nh[j].x + nh[j].y{\n\t\t\treturn true\n\t\t}\n\n\t\tif nh[i].x + nh[i].y == nh[j].x + nh[j].y && nh[i].x < nh[].x{\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn nh[i].Area() < nh[j].Area()\n}\n\nfunc (nh *NodeHeap) Push(h interface{}) {\n\t*nh = append(*nh, h.(Node))\n}\nfunc (nh *NodeHeap) Pop() (x interface{}) {\n\tn := len(*nh)\n\tx = (*nh)[n-1]    \n\t*nh = (*nh)[:n-1]\n\treturn x\n}\n```\n\n","slug":"leetcode/239.滑动窗口最大值","published":1,"updated":"2022-10-29T18:00:20.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p70012ca4lfchh3g87","content":"<p><a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">leetcode</a></p>\n<p>使用container.heap包实现大根堆。需要维护数据的index来判断是否在窗口内。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">var</span> a []<span class=\"hljs-type\">int</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxSlidingWindow</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    a = nums<br>    h := &amp;Heap&#123;&#125;<br>    heap.Init(h)<br>    ans := []<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>        heap.Push(h, i)<br>        <span class=\"hljs-keyword\">for</span> h.slice[<span class=\"hljs-number\">0</span>] &lt;= i - k &#123;<br>            heap.Pop(h)<br>        &#125;<br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;h: %v\\n&quot;, h)</span><br>        <span class=\"hljs-keyword\">if</span> i &gt;= k - <span class=\"hljs-number\">1</span> &#123;<br>            ans = <span class=\"hljs-built_in\">append</span>(ans, nums[h.slice[<span class=\"hljs-number\">0</span>]])<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Heap <span class=\"hljs-keyword\">struct</span> &#123;<br>    slice sort.IntSlice<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Heap)</span></span> Len() <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(h.slice)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Heap)</span></span> Swap(i, j <span class=\"hljs-type\">int</span>) &#123;<br>    h.slice[i], h.slice[j] = h.slice[j], h.slice[i]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Heap)</span></span> Less(i, j <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">bool</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> a[h.slice[i]] &gt; a[h.slice[j]]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *Heap)</span></span> Push(x <span class=\"hljs-keyword\">interface</span>&#123;&#125;) &#123;<br>    h.slice = <span class=\"hljs-built_in\">append</span>(h.slice, x.(<span class=\"hljs-type\">int</span>))<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *Heap)</span></span> Pop() <span class=\"hljs-keyword\">interface</span>&#123;&#125; &#123;<br>    old := h.slice<br>    n := <span class=\"hljs-built_in\">len</span>(old)<br>    x := old[n<span class=\"hljs-number\">-1</span>]<br>    h.slice = old[:n<span class=\"hljs-number\">-1</span>]<br>    <span class=\"hljs-keyword\">return</span> x<br>&#125;<br><br><br><br><span class=\"hljs-keyword\">type</span> NodeHeap []Node<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh NodeHeap)</span></span> Len() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(nh)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh NodeHeap)</span></span> Swap(i, j <span class=\"hljs-type\">int</span>) &#123;<br>\tnh[i], nh[j] = nh[j], nh[i]<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh NodeHeap)</span></span> Less(i, j <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> nh[i].count &gt; nh[j].count &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> nh[i].count == nh[j].count &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nh[i].x + nh[i].y &lt; nh[j].x + nh[j].y&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">if</span> nh[i].x + nh[i].y == nh[j].x + nh[j].y &amp;&amp; nh[i].x &lt; nh[].x&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> nh[i].Area() &lt; nh[j].Area()<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh *NodeHeap)</span></span> Push(h <span class=\"hljs-keyword\">interface</span>&#123;&#125;) &#123;<br>\t*nh = <span class=\"hljs-built_in\">append</span>(*nh, h.(Node))<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh *NodeHeap)</span></span> Pop() (x <span class=\"hljs-keyword\">interface</span>&#123;&#125;) &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(*nh)<br>\tx = (*nh)[n<span class=\"hljs-number\">-1</span>]    <br>\t*nh = (*nh)[:n<span class=\"hljs-number\">-1</span>]<br>\t<span class=\"hljs-keyword\">return</span> x<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1594,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">leetcode</a></p>\n<p>使用container.heap包实现大根堆。需要维护数据的index来判断是否在窗口内。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">var</span> a []<span class=\"hljs-type\">int</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxSlidingWindow</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    a = nums<br>    h := &amp;Heap&#123;&#125;<br>    heap.Init(h)<br>    ans := []<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>        heap.Push(h, i)<br>        <span class=\"hljs-keyword\">for</span> h.slice[<span class=\"hljs-number\">0</span>] &lt;= i - k &#123;<br>            heap.Pop(h)<br>        &#125;<br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;h: %v\\n&quot;, h)</span><br>        <span class=\"hljs-keyword\">if</span> i &gt;= k - <span class=\"hljs-number\">1</span> &#123;<br>            ans = <span class=\"hljs-built_in\">append</span>(ans, nums[h.slice[<span class=\"hljs-number\">0</span>]])<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Heap <span class=\"hljs-keyword\">struct</span> &#123;<br>    slice sort.IntSlice<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Heap)</span></span> Len() <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(h.slice)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Heap)</span></span> Swap(i, j <span class=\"hljs-type\">int</span>) &#123;<br>    h.slice[i], h.slice[j] = h.slice[j], h.slice[i]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Heap)</span></span> Less(i, j <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">bool</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> a[h.slice[i]] &gt; a[h.slice[j]]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *Heap)</span></span> Push(x <span class=\"hljs-keyword\">interface</span>&#123;&#125;) &#123;<br>    h.slice = <span class=\"hljs-built_in\">append</span>(h.slice, x.(<span class=\"hljs-type\">int</span>))<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *Heap)</span></span> Pop() <span class=\"hljs-keyword\">interface</span>&#123;&#125; &#123;<br>    old := h.slice<br>    n := <span class=\"hljs-built_in\">len</span>(old)<br>    x := old[n<span class=\"hljs-number\">-1</span>]<br>    h.slice = old[:n<span class=\"hljs-number\">-1</span>]<br>    <span class=\"hljs-keyword\">return</span> x<br>&#125;<br><br><br><br><span class=\"hljs-keyword\">type</span> NodeHeap []Node<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh NodeHeap)</span></span> Len() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(nh)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh NodeHeap)</span></span> Swap(i, j <span class=\"hljs-type\">int</span>) &#123;<br>\tnh[i], nh[j] = nh[j], nh[i]<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh NodeHeap)</span></span> Less(i, j <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> nh[i].count &gt; nh[j].count &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> nh[i].count == nh[j].count &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nh[i].x + nh[i].y &lt; nh[j].x + nh[j].y&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">if</span> nh[i].x + nh[i].y == nh[j].x + nh[j].y &amp;&amp; nh[i].x &lt; nh[].x&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> nh[i].Area() &lt; nh[j].Area()<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh *NodeHeap)</span></span> Push(h <span class=\"hljs-keyword\">interface</span>&#123;&#125;) &#123;<br>\t*nh = <span class=\"hljs-built_in\">append</span>(*nh, h.(Node))<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(nh *NodeHeap)</span></span> Pop() (x <span class=\"hljs-keyword\">interface</span>&#123;&#125;) &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(*nh)<br>\tx = (*nh)[n<span class=\"hljs-number\">-1</span>]    <br>\t*nh = (*nh)[:n<span class=\"hljs-number\">-1</span>]<br>\t<span class=\"hljs-keyword\">return</span> x<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"279.完全平方数","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n`dp[i]`  表示和为i的完全平方数的最少数量。则可以得到状态转移方程： `dp[i] = min(dp[i-j^2]) + 1` 。\n\n时间复杂度： O(N√N)。状态转移的时间复杂度为O(√N)，攻击N个状态。\n空间复杂度：O(N)\n\n\n```Go\nfunc numSquares(n int) int {\n    // dp[i] = min(dp[i-j^2]) + 1\n\n    dp := make([]int, n+1)\n    for i := 1; i <= n; i++{\n        minDp := math.MaxInt\n        for j := 1; j*j <= i; j++ {\n            minDp = min(minDp, dp[i-j*j])\n        }\n        dp[i] = minDp + 1\n    }\n\n    return dp[n]\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```","source":"_posts/算法/leetcode/279.完全平方数.md","raw":"---\ntitle: 279.完全平方数\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n`dp[i]`  表示和为i的完全平方数的最少数量。则可以得到状态转移方程： `dp[i] = min(dp[i-j^2]) + 1` 。\n\n时间复杂度： O(N√N)。状态转移的时间复杂度为O(√N)，攻击N个状态。\n空间复杂度：O(N)\n\n\n```Go\nfunc numSquares(n int) int {\n    // dp[i] = min(dp[i-j^2]) + 1\n\n    dp := make([]int, n+1)\n    for i := 1; i <= n; i++{\n        minDp := math.MaxInt\n        for j := 1; j*j <= i; j++ {\n            minDp = min(minDp, dp[i-j*j])\n        }\n        dp[i] = minDp + 1\n    }\n\n    return dp[n]\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```","slug":"leetcode/279.完全平方数","published":1,"updated":"2022-10-29T18:00:25.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p70014ca4l79zqfvpz","content":"<p>动态规划</p>\n<p><code>dp[i]</code>  表示和为i的完全平方数的最少数量。则可以得到状态转移方程： <code>dp[i] = min(dp[i-j^2]) + 1</code> 。</p>\n<p>时间复杂度： O(N√N)。状态转移的时间复杂度为O(√N)，攻击N个状态。<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">numSquares</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// dp[i] = min(dp[i-j^2]) + 1</span><br><br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n+<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= n; i++&#123;<br>        minDp := math.MaxInt<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j*j &lt;= i; j++ &#123;<br>            minDp = min(minDp, dp[i-j*j])<br>        &#125;<br>        dp[i] = minDp + <span class=\"hljs-number\">1</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> dp[n]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":415,"excerpt":"","more":"<p>动态规划</p>\n<p><code>dp[i]</code>  表示和为i的完全平方数的最少数量。则可以得到状态转移方程： <code>dp[i] = min(dp[i-j^2]) + 1</code> 。</p>\n<p>时间复杂度： O(N√N)。状态转移的时间复杂度为O(√N)，攻击N个状态。<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">numSquares</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// dp[i] = min(dp[i-j^2]) + 1</span><br><br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n+<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= n; i++&#123;<br>        minDp := math.MaxInt<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j*j &lt;= i; j++ &#123;<br>            minDp = min(minDp, dp[i-j*j])<br>        &#125;<br>        dp[i] = minDp + <span class=\"hljs-number\">1</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> dp[n]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"297.二叉树的序列化与反序列化","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/submissions/)\n\n时间复杂度： O(n)\n空间复杂度： O(n)\n\n\n```Go\n/**  \n * Definition for a binary tree node. * type TreeNode struct { *     Val int *     Left *TreeNode *     Right *TreeNode * } */  \ntype Codec struct {  \n   StrArray []string  \n   path int  \n}  \n  \nfunc Constructor() Codec {  \n   return Codec{  \n      StrArray: []string{},  \n      path: 0,  \n   }  \n}  \n  \n// Serializes a tree to a single string.  \nfunc (this *Codec) serialize(root *TreeNode) string {  \n   this.SeRecusival(root)  \n   // fmt.Printf(\"array: %v\\n\", this.StrArray)  \n  \n   return strings.Join(this.StrArray, \",\")  \n}  \n  \n// Deserializes your encoded data to tree.  \nfunc (this *Codec) deserialize(data string) *TreeNode {  \n   this.StrArray = strings.Split(data, \",\")  \n   this.path = 0  \n  \n   return this.DeRecusival()  \n}  \n  \n// 1 2 nil nil 3 4 nil nil 5 nil nil  \n  \nfunc (this *Codec) DeRecusival() *TreeNode {  \n   if this.StrArray[this.path] == \"nil\" {  \n      return nil  \n   }  \n  \n   intVar, _ := strconv.Atoi(this.StrArray[this.path])  \n  \n   root := &TreeNode{Val: intVar}  \n   this.path++  \n   root.Left = this.DeRecusival()  \n   this.path++  \n   root.Right = this.DeRecusival()  \n  \n   return root  \n}  \n  \nfunc (this *Codec) SeRecusival(root *TreeNode) {  \n   if root == nil {  \n      this.StrArray = append(this.StrArray, \"nil\")  \n      return  \n   }  \n  \n   // fmt.Printf(\"val: %v\\n\", strconv.Itoa(root.Val))  \n  \n   this.StrArray = append(this.StrArray, strconv.Itoa(root.Val))  \n   this.SeRecusival(root.Left)  \n   this.SeRecusival(root.Right)  \n}  \n  \n  \n/**\n\n* Your Codec object will be instantiated and called as such:\n\n* ser := Constructor();\n\n* deser := Constructor();\n\n* data := ser.serialize(root);\n\n* ans := deser.deserialize(data);\n\n*/\n```","source":"_posts/算法/leetcode/297.二叉树的序列化与反序列化.md","raw":"---\ntitle: 297.二叉树的序列化与反序列化\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/submissions/)\n\n时间复杂度： O(n)\n空间复杂度： O(n)\n\n\n```Go\n/**  \n * Definition for a binary tree node. * type TreeNode struct { *     Val int *     Left *TreeNode *     Right *TreeNode * } */  \ntype Codec struct {  \n   StrArray []string  \n   path int  \n}  \n  \nfunc Constructor() Codec {  \n   return Codec{  \n      StrArray: []string{},  \n      path: 0,  \n   }  \n}  \n  \n// Serializes a tree to a single string.  \nfunc (this *Codec) serialize(root *TreeNode) string {  \n   this.SeRecusival(root)  \n   // fmt.Printf(\"array: %v\\n\", this.StrArray)  \n  \n   return strings.Join(this.StrArray, \",\")  \n}  \n  \n// Deserializes your encoded data to tree.  \nfunc (this *Codec) deserialize(data string) *TreeNode {  \n   this.StrArray = strings.Split(data, \",\")  \n   this.path = 0  \n  \n   return this.DeRecusival()  \n}  \n  \n// 1 2 nil nil 3 4 nil nil 5 nil nil  \n  \nfunc (this *Codec) DeRecusival() *TreeNode {  \n   if this.StrArray[this.path] == \"nil\" {  \n      return nil  \n   }  \n  \n   intVar, _ := strconv.Atoi(this.StrArray[this.path])  \n  \n   root := &TreeNode{Val: intVar}  \n   this.path++  \n   root.Left = this.DeRecusival()  \n   this.path++  \n   root.Right = this.DeRecusival()  \n  \n   return root  \n}  \n  \nfunc (this *Codec) SeRecusival(root *TreeNode) {  \n   if root == nil {  \n      this.StrArray = append(this.StrArray, \"nil\")  \n      return  \n   }  \n  \n   // fmt.Printf(\"val: %v\\n\", strconv.Itoa(root.Val))  \n  \n   this.StrArray = append(this.StrArray, strconv.Itoa(root.Val))  \n   this.SeRecusival(root.Left)  \n   this.SeRecusival(root.Right)  \n}  \n  \n  \n/**\n\n* Your Codec object will be instantiated and called as such:\n\n* ser := Constructor();\n\n* deser := Constructor();\n\n* data := ser.serialize(root);\n\n* ans := deser.deserialize(data);\n\n*/\n```","slug":"leetcode/297.二叉树的序列化与反序列化","published":1,"updated":"2022-10-29T18:00:31.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p70016ca4lg1lp1p4t","content":"<p><a href=\"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/submissions/\">leetcode</a></p>\n<p>时间复杂度： O(n)<br>空间复杂度： O(n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * Definition for a binary tree node. * type TreeNode struct &#123; *     Val int *     Left *TreeNode *     Right *TreeNode * &#125; */</span>  <br><span class=\"hljs-keyword\">type</span> Codec <span class=\"hljs-keyword\">struct</span> &#123;  <br>   StrArray []<span class=\"hljs-type\">string</span>  <br>   path <span class=\"hljs-type\">int</span>  <br>&#125;  <br>  <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> Codec &#123;  <br>   <span class=\"hljs-keyword\">return</span> Codec&#123;  <br>      StrArray: []<span class=\"hljs-type\">string</span>&#123;&#125;,  <br>      path: <span class=\"hljs-number\">0</span>,  <br>   &#125;  <br>&#125;  <br>  <br><span class=\"hljs-comment\">// Serializes a tree to a single string.  </span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Codec)</span></span> serialize(root *TreeNode) <span class=\"hljs-type\">string</span> &#123;  <br>   this.SeRecusival(root)  <br>   <span class=\"hljs-comment\">// fmt.Printf(&quot;array: %v\\n&quot;, this.StrArray)  </span><br>  <br>   <span class=\"hljs-keyword\">return</span> strings.Join(this.StrArray, <span class=\"hljs-string\">&quot;,&quot;</span>)  <br>&#125;  <br>  <br><span class=\"hljs-comment\">// Deserializes your encoded data to tree.  </span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Codec)</span></span> deserialize(data <span class=\"hljs-type\">string</span>) *TreeNode &#123;  <br>   this.StrArray = strings.Split(data, <span class=\"hljs-string\">&quot;,&quot;</span>)  <br>   this.path = <span class=\"hljs-number\">0</span>  <br>  <br>   <span class=\"hljs-keyword\">return</span> this.DeRecusival()  <br>&#125;  <br>  <br><span class=\"hljs-comment\">// 1 2 nil nil 3 4 nil nil 5 nil nil  </span><br>  <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Codec)</span></span> DeRecusival() *TreeNode &#123;  <br>   <span class=\"hljs-keyword\">if</span> this.StrArray[this.path] == <span class=\"hljs-string\">&quot;nil&quot;</span> &#123;  <br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>  <br>   &#125;  <br>  <br>   intVar, _ := strconv.Atoi(this.StrArray[this.path])  <br>  <br>   root := &amp;TreeNode&#123;Val: intVar&#125;  <br>   this.path++  <br>   root.Left = this.DeRecusival()  <br>   this.path++  <br>   root.Right = this.DeRecusival()  <br>  <br>   <span class=\"hljs-keyword\">return</span> root  <br>&#125;  <br>  <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Codec)</span></span> SeRecusival(root *TreeNode) &#123;  <br>   <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;  <br>      this.StrArray = <span class=\"hljs-built_in\">append</span>(this.StrArray, <span class=\"hljs-string\">&quot;nil&quot;</span>)  <br>      <span class=\"hljs-keyword\">return</span>  <br>   &#125;  <br>  <br>   <span class=\"hljs-comment\">// fmt.Printf(&quot;val: %v\\n&quot;, strconv.Itoa(root.Val))  </span><br>  <br>   this.StrArray = <span class=\"hljs-built_in\">append</span>(this.StrArray, strconv.Itoa(root.Val))  <br>   this.SeRecusival(root.Left)  <br>   this.SeRecusival(root.Right)  <br>&#125;  <br>  <br>  <br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* Your Codec object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* ser := Constructor();</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* deser := Constructor();</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* data := ser.serialize(root);</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* ans := deser.deserialize(data);</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1579,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/submissions/\">leetcode</a></p>\n<p>时间复杂度： O(n)<br>空间复杂度： O(n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * Definition for a binary tree node. * type TreeNode struct &#123; *     Val int *     Left *TreeNode *     Right *TreeNode * &#125; */</span>  <br><span class=\"hljs-keyword\">type</span> Codec <span class=\"hljs-keyword\">struct</span> &#123;  <br>   StrArray []<span class=\"hljs-type\">string</span>  <br>   path <span class=\"hljs-type\">int</span>  <br>&#125;  <br>  <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> Codec &#123;  <br>   <span class=\"hljs-keyword\">return</span> Codec&#123;  <br>      StrArray: []<span class=\"hljs-type\">string</span>&#123;&#125;,  <br>      path: <span class=\"hljs-number\">0</span>,  <br>   &#125;  <br>&#125;  <br>  <br><span class=\"hljs-comment\">// Serializes a tree to a single string.  </span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Codec)</span></span> serialize(root *TreeNode) <span class=\"hljs-type\">string</span> &#123;  <br>   this.SeRecusival(root)  <br>   <span class=\"hljs-comment\">// fmt.Printf(&quot;array: %v\\n&quot;, this.StrArray)  </span><br>  <br>   <span class=\"hljs-keyword\">return</span> strings.Join(this.StrArray, <span class=\"hljs-string\">&quot;,&quot;</span>)  <br>&#125;  <br>  <br><span class=\"hljs-comment\">// Deserializes your encoded data to tree.  </span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Codec)</span></span> deserialize(data <span class=\"hljs-type\">string</span>) *TreeNode &#123;  <br>   this.StrArray = strings.Split(data, <span class=\"hljs-string\">&quot;,&quot;</span>)  <br>   this.path = <span class=\"hljs-number\">0</span>  <br>  <br>   <span class=\"hljs-keyword\">return</span> this.DeRecusival()  <br>&#125;  <br>  <br><span class=\"hljs-comment\">// 1 2 nil nil 3 4 nil nil 5 nil nil  </span><br>  <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Codec)</span></span> DeRecusival() *TreeNode &#123;  <br>   <span class=\"hljs-keyword\">if</span> this.StrArray[this.path] == <span class=\"hljs-string\">&quot;nil&quot;</span> &#123;  <br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>  <br>   &#125;  <br>  <br>   intVar, _ := strconv.Atoi(this.StrArray[this.path])  <br>  <br>   root := &amp;TreeNode&#123;Val: intVar&#125;  <br>   this.path++  <br>   root.Left = this.DeRecusival()  <br>   this.path++  <br>   root.Right = this.DeRecusival()  <br>  <br>   <span class=\"hljs-keyword\">return</span> root  <br>&#125;  <br>  <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Codec)</span></span> SeRecusival(root *TreeNode) &#123;  <br>   <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;  <br>      this.StrArray = <span class=\"hljs-built_in\">append</span>(this.StrArray, <span class=\"hljs-string\">&quot;nil&quot;</span>)  <br>      <span class=\"hljs-keyword\">return</span>  <br>   &#125;  <br>  <br>   <span class=\"hljs-comment\">// fmt.Printf(&quot;val: %v\\n&quot;, strconv.Itoa(root.Val))  </span><br>  <br>   this.StrArray = <span class=\"hljs-built_in\">append</span>(this.StrArray, strconv.Itoa(root.Val))  <br>   this.SeRecusival(root.Left)  <br>   this.SeRecusival(root.Right)  <br>&#125;  <br>  <br>  <br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* Your Codec object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* ser := Constructor();</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* deser := Constructor();</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* data := ser.serialize(root);</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">* ans := deser.deserialize(data);</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>"},{"title":"300.最长递增子序列","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n时间复杂度：O(N^2)\n空间复杂度：O(N)\n\n```Go\nfunc lengthOfLIS(nums []int) int {\n    dp := make([]int, len(nums))\n    ans := 0\n\n    for i := 0; i < len(nums); i++ {\n        dp[i] = 1\n        for j := 0; j < i; j++ {\n            if nums[j] < nums[i] && dp[i] < dp[j] + 1 {\n                dp[i] = dp[j] + 1\n            }\n        }\n        if ans < dp[i] {\n            ans = dp[i]\n        }\n    }\n\n    return ans\n}```","source":"_posts/算法/leetcode/300.最长递增子序列.md","raw":"---\ntitle: 300.最长递增子序列\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n时间复杂度：O(N^2)\n空间复杂度：O(N)\n\n```Go\nfunc lengthOfLIS(nums []int) int {\n    dp := make([]int, len(nums))\n    ans := 0\n\n    for i := 0; i < len(nums); i++ {\n        dp[i] = 1\n        for j := 0; j < i; j++ {\n            if nums[j] < nums[i] && dp[i] < dp[j] + 1 {\n                dp[i] = dp[j] + 1\n            }\n        }\n        if ans < dp[i] {\n            ans = dp[i]\n        }\n    }\n\n    return ans\n}```","slug":"leetcode/300.最长递增子序列","published":1,"updated":"2022-10-29T18:00:36.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p80018ca4l7w15cglg","content":"<p>动态规划</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(N)</p>\n<p>&#96;&#96;&#96;Go<br>func lengthOfLIS(nums []int) int {<br>    dp :&#x3D; make([]int, len(nums))<br>    ans :&#x3D; 0</p>\n<pre><code class=\"hljs\">for i := 0; i &lt; len(nums); i++ &#123;\n    dp[i] = 1\n    for j := 0; j &lt; i; j++ &#123;\n        if nums[j] &lt; nums[i] &amp;&amp; dp[i] &lt; dp[j] + 1 &#123;\n            dp[i] = dp[j] + 1\n        &#125;\n    &#125;\n    if ans &lt; dp[i] &#123;\n        ans = dp[i]\n    &#125;\n&#125;\n\nreturn ans\n</code></pre>\n<p>}&#96;&#96;&#96;</p>\n","site":{"data":{}},"wordcount":320,"excerpt":"","more":"<p>动态规划</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(N)</p>\n<p>&#96;&#96;&#96;Go<br>func lengthOfLIS(nums []int) int {<br>    dp :&#x3D; make([]int, len(nums))<br>    ans :&#x3D; 0</p>\n<pre><code>for i := 0; i &lt; len(nums); i++ &#123;\n    dp[i] = 1\n    for j := 0; j &lt; i; j++ &#123;\n        if nums[j] &lt; nums[i] &amp;&amp; dp[i] &lt; dp[j] + 1 &#123;\n            dp[i] = dp[j] + 1\n        &#125;\n    &#125;\n    if ans &lt; dp[i] &#123;\n        ans = dp[i]\n    &#125;\n&#125;\n\nreturn ans\n</code></pre>\n<p>}&#96;&#96;&#96;</p>\n"},{"title":"322.零钱兑换","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n自底向上，计算1~amount每个数作为结果所需要的最小硬币数量。\n\n时间复杂度：O(Sn)，其中 SS 是金额，nn 是面额数\n空间复杂度：O(S)\n\n```Go\nfunc coinChange(coins []int, amount int) int {\n    if amount == 0 {\n        return 0\n    }\n    \n    dp := make([]int, amount + 1)\n    dp[0] = 0\n    for i := 1; i < amount+1; i++ {\n        dp[i] = amount + 1\n    }\n\n    // 计算1~amount的每种情况下所需硬币数\n    for i := 1; i <= amount; i++{\n        for _, coin := range coins {\n            //硬币面额大于amount则跳过\n            if coin <= i {\n                // 求最小dp[i-coin]\n                if dp[i] > dp[i-coin] + 1{\n                    dp[i] = dp[i-coin] + 1\n                }\n            }\n        }\n    }\n\n    if dp[amount] == amount + 1 {\n        return -1\n    } else {\n        return dp[amount]\n    }\n}\n```","source":"_posts/算法/leetcode/322.零钱兑换.md","raw":"---\ntitle: 322.零钱兑换\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n自底向上，计算1~amount每个数作为结果所需要的最小硬币数量。\n\n时间复杂度：O(Sn)，其中 SS 是金额，nn 是面额数\n空间复杂度：O(S)\n\n```Go\nfunc coinChange(coins []int, amount int) int {\n    if amount == 0 {\n        return 0\n    }\n    \n    dp := make([]int, amount + 1)\n    dp[0] = 0\n    for i := 1; i < amount+1; i++ {\n        dp[i] = amount + 1\n    }\n\n    // 计算1~amount的每种情况下所需硬币数\n    for i := 1; i <= amount; i++{\n        for _, coin := range coins {\n            //硬币面额大于amount则跳过\n            if coin <= i {\n                // 求最小dp[i-coin]\n                if dp[i] > dp[i-coin] + 1{\n                    dp[i] = dp[i-coin] + 1\n                }\n            }\n        }\n    }\n\n    if dp[amount] == amount + 1 {\n        return -1\n    } else {\n        return dp[amount]\n    }\n}\n```","slug":"leetcode/322.零钱兑换","published":1,"updated":"2022-10-29T18:00:45.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p8001aca4lbr0dgnu4","content":"<p>动态规划</p>\n<p>自底向上，计算1~amount每个数作为结果所需要的最小硬币数量。</p>\n<p>时间复杂度：O(Sn)，其中 SS 是金额，nn 是面额数<br>空间复杂度：O(S)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">coinChange</span><span class=\"hljs-params\">(coins []<span class=\"hljs-type\">int</span>, amount <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> amount == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    &#125;<br>    <br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, amount + <span class=\"hljs-number\">1</span>)<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; amount+<span class=\"hljs-number\">1</span>; i++ &#123;<br>        dp[i] = amount + <span class=\"hljs-number\">1</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">// 计算1~amount的每种情况下所需硬币数</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= amount; i++&#123;<br>        <span class=\"hljs-keyword\">for</span> _, coin := <span class=\"hljs-keyword\">range</span> coins &#123;<br>            <span class=\"hljs-comment\">//硬币面额大于amount则跳过</span><br>            <span class=\"hljs-keyword\">if</span> coin &lt;= i &#123;<br>                <span class=\"hljs-comment\">// 求最小dp[i-coin]</span><br>                <span class=\"hljs-keyword\">if</span> dp[i] &gt; dp[i-coin] + <span class=\"hljs-number\">1</span>&#123;<br>                    dp[i] = dp[i-coin] + <span class=\"hljs-number\">1</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> dp[amount] == amount + <span class=\"hljs-number\">1</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> dp[amount]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":562,"excerpt":"","more":"<p>动态规划</p>\n<p>自底向上，计算1~amount每个数作为结果所需要的最小硬币数量。</p>\n<p>时间复杂度：O(Sn)，其中 SS 是金额，nn 是面额数<br>空间复杂度：O(S)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">coinChange</span><span class=\"hljs-params\">(coins []<span class=\"hljs-type\">int</span>, amount <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> amount == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    &#125;<br>    <br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, amount + <span class=\"hljs-number\">1</span>)<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; amount+<span class=\"hljs-number\">1</span>; i++ &#123;<br>        dp[i] = amount + <span class=\"hljs-number\">1</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">// 计算1~amount的每种情况下所需硬币数</span><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= amount; i++&#123;<br>        <span class=\"hljs-keyword\">for</span> _, coin := <span class=\"hljs-keyword\">range</span> coins &#123;<br>            <span class=\"hljs-comment\">//硬币面额大于amount则跳过</span><br>            <span class=\"hljs-keyword\">if</span> coin &lt;= i &#123;<br>                <span class=\"hljs-comment\">// 求最小dp[i-coin]</span><br>                <span class=\"hljs-keyword\">if</span> dp[i] &gt; dp[i-coin] + <span class=\"hljs-number\">1</span>&#123;<br>                    dp[i] = dp[i-coin] + <span class=\"hljs-number\">1</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> dp[amount] == amount + <span class=\"hljs-number\">1</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> dp[amount]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"337.打家劫舍 III","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n后序遍历+动态规划\n\n看到树形结构优先考虑root和左右子树的关系。\n\n使用后序遍历是因为需要得到两个子节点的状态才能计算当前节点。\n\n时间复杂度：O(N)\n空间复杂度：O(N)\n\n```Go\nfunc rob(root *TreeNode) int {\n    // root[1] = root.left[0] + root.right[0] \n    // root[0] = max(root.left[0], root.left[1]) + max(root.right[0], root.right[1])\n\n    var dfs func(*TreeNode) []int\n    dfs = func(root *TreeNode) []int {\n        if root == nil {\n            return []int{0, 0}\n        }\n\n\t\t// 得到子节点的状态\n        left := dfs(root.Left)\n        right := dfs(root.Right)\n\n\t\t// 状态转移\n        selected := root.Val + left[0] + right[0]\n        noSelected := max(left[0], left[1]) + max(right[0], right[1])\n\n\t\t// 返回状态给上一层使用\n        return []int{noSelected, selected}\n    }\n\n    temp := dfs(root)\n\n    return max(temp[0], temp[1])\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```","source":"_posts/算法/leetcode/337.打家劫舍 III.md","raw":"---\ntitle: 337.打家劫舍 III\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n后序遍历+动态规划\n\n看到树形结构优先考虑root和左右子树的关系。\n\n使用后序遍历是因为需要得到两个子节点的状态才能计算当前节点。\n\n时间复杂度：O(N)\n空间复杂度：O(N)\n\n```Go\nfunc rob(root *TreeNode) int {\n    // root[1] = root.left[0] + root.right[0] \n    // root[0] = max(root.left[0], root.left[1]) + max(root.right[0], root.right[1])\n\n    var dfs func(*TreeNode) []int\n    dfs = func(root *TreeNode) []int {\n        if root == nil {\n            return []int{0, 0}\n        }\n\n\t\t// 得到子节点的状态\n        left := dfs(root.Left)\n        right := dfs(root.Right)\n\n\t\t// 状态转移\n        selected := root.Val + left[0] + right[0]\n        noSelected := max(left[0], left[1]) + max(right[0], right[1])\n\n\t\t// 返回状态给上一层使用\n        return []int{noSelected, selected}\n    }\n\n    temp := dfs(root)\n\n    return max(temp[0], temp[1])\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```","slug":"leetcode/337.打家劫舍 III","published":1,"updated":"2022-10-29T18:01:01.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p9001cca4lbrkh6ojb","content":"<p>后序遍历+动态规划</p>\n<p>看到树形结构优先考虑root和左右子树的关系。</p>\n<p>使用后序遍历是因为需要得到两个子节点的状态才能计算当前节点。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rob</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// root[1] = root.left[0] + root.right[0] </span><br>    <span class=\"hljs-comment\">// root[0] = max(root.left[0], root.left[1]) + max(root.right[0], root.right[1])</span><br><br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(*TreeNode)</span></span> []<span class=\"hljs-type\">int</span><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>&#125;<br>        &#125;<br><br>\t\t<span class=\"hljs-comment\">// 得到子节点的状态</span><br>        left := dfs(root.Left)<br>        right := dfs(root.Right)<br><br>\t\t<span class=\"hljs-comment\">// 状态转移</span><br>        selected := root.Val + left[<span class=\"hljs-number\">0</span>] + right[<span class=\"hljs-number\">0</span>]<br>        noSelected := max(left[<span class=\"hljs-number\">0</span>], left[<span class=\"hljs-number\">1</span>]) + max(right[<span class=\"hljs-number\">0</span>], right[<span class=\"hljs-number\">1</span>])<br><br>\t\t<span class=\"hljs-comment\">// 返回状态给上一层使用</span><br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;noSelected, selected&#125;<br>    &#125;<br><br>    temp := dfs(root)<br><br>    <span class=\"hljs-keyword\">return</span> max(temp[<span class=\"hljs-number\">0</span>], temp[<span class=\"hljs-number\">1</span>])<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":707,"excerpt":"","more":"<p>后序遍历+动态规划</p>\n<p>看到树形结构优先考虑root和左右子树的关系。</p>\n<p>使用后序遍历是因为需要得到两个子节点的状态才能计算当前节点。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rob</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// root[1] = root.left[0] + root.right[0] </span><br>    <span class=\"hljs-comment\">// root[0] = max(root.left[0], root.left[1]) + max(root.right[0], root.right[1])</span><br><br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(*TreeNode)</span></span> []<span class=\"hljs-type\">int</span><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>&#125;<br>        &#125;<br><br>\t\t<span class=\"hljs-comment\">// 得到子节点的状态</span><br>        left := dfs(root.Left)<br>        right := dfs(root.Right)<br><br>\t\t<span class=\"hljs-comment\">// 状态转移</span><br>        selected := root.Val + left[<span class=\"hljs-number\">0</span>] + right[<span class=\"hljs-number\">0</span>]<br>        noSelected := max(left[<span class=\"hljs-number\">0</span>], left[<span class=\"hljs-number\">1</span>]) + max(right[<span class=\"hljs-number\">0</span>], right[<span class=\"hljs-number\">1</span>])<br><br>\t\t<span class=\"hljs-comment\">// 返回状态给上一层使用</span><br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;noSelected, selected&#125;<br>    &#125;<br><br>    temp := dfs(root)<br><br>    <span class=\"hljs-keyword\">return</span> max(temp[<span class=\"hljs-number\">0</span>], temp[<span class=\"hljs-number\">1</span>])<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"34.在排序数组中查找元素的第一个和最后一个位置","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n进行两次二分查找\n\n时间复杂度：O(logN)\n空间复杂度：O(1)\n\n```Go\n// 手写二分查找\nfunc searchRange(nums []int, target int) []int {\n    if len(nums) == 0 {\n        return []int{-1, -1}\n    }\n\n    ans := []int{}\n    left, right := 0, len(nums) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if nums[mid] >= target {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n\n    if nums[right] != target {\n        ans = []int{-1, -1}\n        return ans\n    } else {\n        ans = append(ans, right)\n    }\n\n    right = len(nums) - 1\n    for left < right {\n        mid := (left + right + 1) / 2\n        if nums[mid] <= target {\n            left = mid\n        } else {\n            right = mid - 1\n        }\n    }\n\n    if nums[right] == target {\n        ans = append(ans, right)\n    } else {\n        ans = append(ans, ans[0])\n    }\n\n    return ans\n\n}\n```\n\n```Go\n// 使用标准库\n\nfunc searchRange(nums []int, target int) []int {\n\tleftmost := sort.SearchInts(nums, target)\n\tif leftmost == len(nums) || nums[leftmost] != target {\n\t\t// 没有找到target\n\t\treturn []int{-1, -1}\n\t}\n\n\t// nums中至少有一个target\n\trightmost := sort.SearchInts(nums, target + 1) - 1\n\treturn []int{leftmost, rightmost}\n}\n```","source":"_posts/算法/leetcode/34.在排序数组中查找元素的第一个和最后一个位置.md","raw":"---\ntitle: 34.在排序数组中查找元素的第一个和最后一个位置\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n进行两次二分查找\n\n时间复杂度：O(logN)\n空间复杂度：O(1)\n\n```Go\n// 手写二分查找\nfunc searchRange(nums []int, target int) []int {\n    if len(nums) == 0 {\n        return []int{-1, -1}\n    }\n\n    ans := []int{}\n    left, right := 0, len(nums) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if nums[mid] >= target {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n\n    if nums[right] != target {\n        ans = []int{-1, -1}\n        return ans\n    } else {\n        ans = append(ans, right)\n    }\n\n    right = len(nums) - 1\n    for left < right {\n        mid := (left + right + 1) / 2\n        if nums[mid] <= target {\n            left = mid\n        } else {\n            right = mid - 1\n        }\n    }\n\n    if nums[right] == target {\n        ans = append(ans, right)\n    } else {\n        ans = append(ans, ans[0])\n    }\n\n    return ans\n\n}\n```\n\n```Go\n// 使用标准库\n\nfunc searchRange(nums []int, target int) []int {\n\tleftmost := sort.SearchInts(nums, target)\n\tif leftmost == len(nums) || nums[leftmost] != target {\n\t\t// 没有找到target\n\t\treturn []int{-1, -1}\n\t}\n\n\t// nums中至少有一个target\n\trightmost := sort.SearchInts(nums, target + 1) - 1\n\treturn []int{leftmost, rightmost}\n}\n```","slug":"leetcode/34.在排序数组中查找元素的第一个和最后一个位置","published":1,"updated":"2022-10-29T17:55:45.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6p9001eca4lgg9pdm4m","content":"<p>进行两次二分查找</p>\n<p>时间复杂度：O(logN)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-comment\">// 手写二分查找</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125;<br><br>    ans := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    left, right := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        mid := (left + right) / <span class=\"hljs-number\">2</span><br>        <span class=\"hljs-keyword\">if</span> nums[mid] &gt;= target &#123;<br>            right = mid<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> nums[right] != target &#123;<br>        ans = []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>        <span class=\"hljs-keyword\">return</span> ans<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, right)<br>    &#125;<br><br>    right = <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        mid := (left + right + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span><br>        <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &#123;<br>            left = mid<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            right = mid - <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> nums[right] == target &#123;<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, right)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, ans[<span class=\"hljs-number\">0</span>])<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-comment\">// 使用标准库</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tleftmost := sort.SearchInts(nums, target)<br>\t<span class=\"hljs-keyword\">if</span> leftmost == <span class=\"hljs-built_in\">len</span>(nums) || nums[leftmost] != target &#123;<br>\t\t<span class=\"hljs-comment\">// 没有找到target</span><br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// nums中至少有一个target</span><br>\trightmost := sort.SearchInts(nums, target + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1041,"excerpt":"","more":"<p>进行两次二分查找</p>\n<p>时间复杂度：O(logN)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-comment\">// 手写二分查找</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125;<br><br>    ans := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    left, right := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        mid := (left + right) / <span class=\"hljs-number\">2</span><br>        <span class=\"hljs-keyword\">if</span> nums[mid] &gt;= target &#123;<br>            right = mid<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> nums[right] != target &#123;<br>        ans = []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>        <span class=\"hljs-keyword\">return</span> ans<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, right)<br>    &#125;<br><br>    right = <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        mid := (left + right + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span><br>        <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &#123;<br>            left = mid<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            right = mid - <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> nums[right] == target &#123;<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, right)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, ans[<span class=\"hljs-number\">0</span>])<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-comment\">// 使用标准库</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tleftmost := sort.SearchInts(nums, target)<br>\t<span class=\"hljs-keyword\">if</span> leftmost == <span class=\"hljs-built_in\">len</span>(nums) || nums[leftmost] != target &#123;<br>\t\t<span class=\"hljs-comment\">// 没有找到target</span><br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// nums中至少有一个target</span><br>\trightmost := sort.SearchInts(nums, target + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"394. 字符串解码","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n递归处理\n\n```Go\nfunc decodeString(s string) string {\n    // fmt.Printf(\"s: %v\\n\", s)\n    ans := \"\"\n\n    l, r, lc := 0, 0, 0\n    n := len(s)\n    count := \"\"\n\n    for i := 0; i < n; i++ {\n\n        if s[i] == '[' {\n            if lc == 0 {\n                l = i + 1\n            }\n            lc++\n            continue\n        }\n\n        if s[i] == ']' {\n            lc--\n            if lc == 0 {\n                r = i\n                temp := decodeString(s[l:r])\n                // fmt.Printf(\"temp: %v\\n\", s[l:r])\n                cnt, _ := strconv.Atoi(count)\n                \n                \n                for j := 0; j < cnt; j++ {\n                    ans += string(temp)\n                }\n                count = \"\"\n            }\n\n            continue\n        }\n\n        if lc == 0 {\n            if s[i] < '0' || s[i] > '9' {\n                ans += string(s[i])\n            } else  {\n                count += string(s[i])\n                // fmt.Printf(\"count: %v\\n\", count)\n            }\n        }\n\n    }\n\n    // fmt.Printf(\"ans: %v\\n\", ans)\n    return ans\n}\n```","source":"_posts/算法/leetcode/394. 字符串解码.md","raw":"---\ntitle: 394. 字符串解码\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n递归处理\n\n```Go\nfunc decodeString(s string) string {\n    // fmt.Printf(\"s: %v\\n\", s)\n    ans := \"\"\n\n    l, r, lc := 0, 0, 0\n    n := len(s)\n    count := \"\"\n\n    for i := 0; i < n; i++ {\n\n        if s[i] == '[' {\n            if lc == 0 {\n                l = i + 1\n            }\n            lc++\n            continue\n        }\n\n        if s[i] == ']' {\n            lc--\n            if lc == 0 {\n                r = i\n                temp := decodeString(s[l:r])\n                // fmt.Printf(\"temp: %v\\n\", s[l:r])\n                cnt, _ := strconv.Atoi(count)\n                \n                \n                for j := 0; j < cnt; j++ {\n                    ans += string(temp)\n                }\n                count = \"\"\n            }\n\n            continue\n        }\n\n        if lc == 0 {\n            if s[i] < '0' || s[i] > '9' {\n                ans += string(s[i])\n            } else  {\n                count += string(s[i])\n                // fmt.Printf(\"count: %v\\n\", count)\n            }\n        }\n\n    }\n\n    // fmt.Printf(\"ans: %v\\n\", ans)\n    return ans\n}\n```","slug":"leetcode/394. 字符串解码","published":1,"updated":"2022-10-29T18:01:08.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pb001gca4l5fkeghq7","content":"<p>递归处理</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">decodeString</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;s: %v\\n&quot;, s)</span><br>    ans := <span class=\"hljs-string\">&quot;&quot;</span><br><br>    l, r, lc := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>    n := <span class=\"hljs-built_in\">len</span>(s)<br>    count := <span class=\"hljs-string\">&quot;&quot;</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br><br>        <span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">&#x27;[&#x27;</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> lc == <span class=\"hljs-number\">0</span> &#123;<br>                l = i + <span class=\"hljs-number\">1</span><br>            &#125;<br>            lc++<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">&#x27;]&#x27;</span> &#123;<br>            lc--<br>            <span class=\"hljs-keyword\">if</span> lc == <span class=\"hljs-number\">0</span> &#123;<br>                r = i<br>                temp := decodeString(s[l:r])<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;temp: %v\\n&quot;, s[l:r])</span><br>                cnt, _ := strconv.Atoi(count)<br>                <br>                <br>                <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; cnt; j++ &#123;<br>                    ans += <span class=\"hljs-type\">string</span>(temp)<br>                &#125;<br>                count = <span class=\"hljs-string\">&quot;&quot;</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> lc == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> s[i] &lt; <span class=\"hljs-string\">&#x27;0&#x27;</span> || s[i] &gt; <span class=\"hljs-string\">&#x27;9&#x27;</span> &#123;<br>                ans += <span class=\"hljs-type\">string</span>(s[i])<br>            &#125; <span class=\"hljs-keyword\">else</span>  &#123;<br>                count += <span class=\"hljs-type\">string</span>(s[i])<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;count: %v\\n&quot;, count)</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;ans: %v\\n&quot;, ans)</span><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":775,"excerpt":"","more":"<p>递归处理</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">decodeString</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;s: %v\\n&quot;, s)</span><br>    ans := <span class=\"hljs-string\">&quot;&quot;</span><br><br>    l, r, lc := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>    n := <span class=\"hljs-built_in\">len</span>(s)<br>    count := <span class=\"hljs-string\">&quot;&quot;</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br><br>        <span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">&#x27;[&#x27;</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> lc == <span class=\"hljs-number\">0</span> &#123;<br>                l = i + <span class=\"hljs-number\">1</span><br>            &#125;<br>            lc++<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">&#x27;]&#x27;</span> &#123;<br>            lc--<br>            <span class=\"hljs-keyword\">if</span> lc == <span class=\"hljs-number\">0</span> &#123;<br>                r = i<br>                temp := decodeString(s[l:r])<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;temp: %v\\n&quot;, s[l:r])</span><br>                cnt, _ := strconv.Atoi(count)<br>                <br>                <br>                <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; cnt; j++ &#123;<br>                    ans += <span class=\"hljs-type\">string</span>(temp)<br>                &#125;<br>                count = <span class=\"hljs-string\">&quot;&quot;</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> lc == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> s[i] &lt; <span class=\"hljs-string\">&#x27;0&#x27;</span> || s[i] &gt; <span class=\"hljs-string\">&#x27;9&#x27;</span> &#123;<br>                ans += <span class=\"hljs-type\">string</span>(s[i])<br>            &#125; <span class=\"hljs-keyword\">else</span>  &#123;<br>                count += <span class=\"hljs-type\">string</span>(s[i])<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;count: %v\\n&quot;, count)</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;ans: %v\\n&quot;, ans)</span><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"327.区间的个数","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n归并排序，排序时统计符合条件的下标对。\n\n\n```GO\nfunc countRangeSum(nums []int, lower int, upper int) int {\n    // 计算前缀和\n    preSum := make([]int, len(nums) + 1)\n    for i, v := range nums {\n        preSum[i + 1] = preSum[i] + v\n    }\n\n    var countSum func([]int) int\n\n    countSum = func(arr []int) int {\n        length := len(arr)\n        if length <= 1 {\n            return 0\n        }\n\n        left := append([]int{}, arr[:length/2]...)\n        right := append([]int{}, arr[length/2:]...)\n\n        count := countSum(left) + countSum(right)\n\n\t\t// 统计符合条件的下标对\n        l, r := 0, 0\n        for _, v := range left {\n            for l < len(right) && right[l] - v < lower {\n                l++\n            }\n\n            for r < len(right) && right[r] - v <= upper {\n                r++\n            }\n\n            count += r - l\n        }\n\n        // 合并左右数组\n        p1, p2 := 0, 0\n        for i := range arr {\n            if p1 < len(left) && ( p2 == len(right) || left[p1] <= right[p2]) {\n                arr[i] = left[p1]\n                p1++\n            } else {\n                arr[i] = right[p2]\n                p2++\n            }\n        }\n\n        return count\n    }\n\n    return countSum(preSum)\n}\n```","source":"_posts/算法/leetcode/327.区间的个数.md","raw":"---\ntitle: 327.区间的个数\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n归并排序，排序时统计符合条件的下标对。\n\n\n```GO\nfunc countRangeSum(nums []int, lower int, upper int) int {\n    // 计算前缀和\n    preSum := make([]int, len(nums) + 1)\n    for i, v := range nums {\n        preSum[i + 1] = preSum[i] + v\n    }\n\n    var countSum func([]int) int\n\n    countSum = func(arr []int) int {\n        length := len(arr)\n        if length <= 1 {\n            return 0\n        }\n\n        left := append([]int{}, arr[:length/2]...)\n        right := append([]int{}, arr[length/2:]...)\n\n        count := countSum(left) + countSum(right)\n\n\t\t// 统计符合条件的下标对\n        l, r := 0, 0\n        for _, v := range left {\n            for l < len(right) && right[l] - v < lower {\n                l++\n            }\n\n            for r < len(right) && right[r] - v <= upper {\n                r++\n            }\n\n            count += r - l\n        }\n\n        // 合并左右数组\n        p1, p2 := 0, 0\n        for i := range arr {\n            if p1 < len(left) && ( p2 == len(right) || left[p1] <= right[p2]) {\n                arr[i] = left[p1]\n                p1++\n            } else {\n                arr[i] = right[p2]\n                p2++\n            }\n        }\n\n        return count\n    }\n\n    return countSum(preSum)\n}\n```","slug":"leetcode/327.区间的个数","published":1,"updated":"2022-10-29T18:00:52.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pc001ica4l86eyf131","content":"<p>归并排序，排序时统计符合条件的下标对。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs GO\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">countRangeSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, lower <span class=\"hljs-type\">int</span>, upper <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// 计算前缀和</span><br>    preSum := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(nums) + <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>        preSum[i + <span class=\"hljs-number\">1</span>] = preSum[i] + v<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> countSum <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">([]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span><br><br>    countSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(arr []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>        length := <span class=\"hljs-built_in\">len</span>(arr)<br>        <span class=\"hljs-keyword\">if</span> length &lt;= <span class=\"hljs-number\">1</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>        &#125;<br><br>        left := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, arr[:length/<span class=\"hljs-number\">2</span>]...)<br>        right := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, arr[length/<span class=\"hljs-number\">2</span>:]...)<br><br>        count := countSum(left) + countSum(right)<br><br>\t\t<span class=\"hljs-comment\">// 统计符合条件的下标对</span><br>        l, r := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> left &#123;<br>            <span class=\"hljs-keyword\">for</span> l &lt; <span class=\"hljs-built_in\">len</span>(right) &amp;&amp; right[l] - v &lt; lower &#123;<br>                l++<br>            &#125;<br><br>            <span class=\"hljs-keyword\">for</span> r &lt; <span class=\"hljs-built_in\">len</span>(right) &amp;&amp; right[r] - v &lt;= upper &#123;<br>                r++<br>            &#125;<br><br>            count += r - l<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 合并左右数组</span><br>        p1, p2 := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> arr &#123;<br>            <span class=\"hljs-keyword\">if</span> p1 &lt; <span class=\"hljs-built_in\">len</span>(left) &amp;&amp; ( p2 == <span class=\"hljs-built_in\">len</span>(right) || left[p1] &lt;= right[p2]) &#123;<br>                arr[i] = left[p1]<br>                p1++<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                arr[i] = right[p2]<br>                p2++<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> count<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> countSum(preSum)<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":906,"excerpt":"","more":"<p>归并排序，排序时统计符合条件的下标对。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs GO\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">countRangeSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, lower <span class=\"hljs-type\">int</span>, upper <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// 计算前缀和</span><br>    preSum := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(nums) + <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>        preSum[i + <span class=\"hljs-number\">1</span>] = preSum[i] + v<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> countSum <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">([]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span><br><br>    countSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(arr []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>        length := <span class=\"hljs-built_in\">len</span>(arr)<br>        <span class=\"hljs-keyword\">if</span> length &lt;= <span class=\"hljs-number\">1</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>        &#125;<br><br>        left := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, arr[:length/<span class=\"hljs-number\">2</span>]...)<br>        right := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, arr[length/<span class=\"hljs-number\">2</span>:]...)<br><br>        count := countSum(left) + countSum(right)<br><br>\t\t<span class=\"hljs-comment\">// 统计符合条件的下标对</span><br>        l, r := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> left &#123;<br>            <span class=\"hljs-keyword\">for</span> l &lt; <span class=\"hljs-built_in\">len</span>(right) &amp;&amp; right[l] - v &lt; lower &#123;<br>                l++<br>            &#125;<br><br>            <span class=\"hljs-keyword\">for</span> r &lt; <span class=\"hljs-built_in\">len</span>(right) &amp;&amp; right[r] - v &lt;= upper &#123;<br>                r++<br>            &#125;<br><br>            count += r - l<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 合并左右数组</span><br>        p1, p2 := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> arr &#123;<br>            <span class=\"hljs-keyword\">if</span> p1 &lt; <span class=\"hljs-built_in\">len</span>(left) &amp;&amp; ( p2 == <span class=\"hljs-built_in\">len</span>(right) || left[p1] &lt;= right[p2]) &#123;<br>                arr[i] = left[p1]<br>                p1++<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                arr[i] = right[p2]<br>                p2++<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> count<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> countSum(preSum)<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"45. 跳跃游戏 II","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n从后往前考虑。\n\n时间复杂度：O(N^2)\n空间复杂度：O(1)\n\n```Go\nfunc jump(nums []int) int {\n    count := 0\n    r := len(nums) - 1\n\n    for r > 0 {\n        for i := 0; i < r; i++ {\n            if nums[i] >= r - i {\n                r = i\n                count++\n                break\n            }\n        }\n    }\n\n    return count\n}\n```\n\n从前往后考虑。\n\n时间复杂度：O(N)\n空间复杂度：O(1)\n\n```Go\nfunc jump(nums []int) int {\n    count := 0\n    n := len(nums)\n    maxPosition := 0\n    end := 0\n    // r := len(nums) - 1\n\n\tfor i := 0; i < n - 1; i++ {\n\t\tmaxPosition = max(maxPosition, i + nums[i])\n\t\tif i == end {\n\t\t\tend = maxPosition\n\t\t\tcount++\n\t\t}\n\t}\n    \n    return count\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```","source":"_posts/算法/leetcode/45. 跳跃游戏 II.md","raw":"---\ntitle: 45. 跳跃游戏 II\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n从后往前考虑。\n\n时间复杂度：O(N^2)\n空间复杂度：O(1)\n\n```Go\nfunc jump(nums []int) int {\n    count := 0\n    r := len(nums) - 1\n\n    for r > 0 {\n        for i := 0; i < r; i++ {\n            if nums[i] >= r - i {\n                r = i\n                count++\n                break\n            }\n        }\n    }\n\n    return count\n}\n```\n\n从前往后考虑。\n\n时间复杂度：O(N)\n空间复杂度：O(1)\n\n```Go\nfunc jump(nums []int) int {\n    count := 0\n    n := len(nums)\n    maxPosition := 0\n    end := 0\n    // r := len(nums) - 1\n\n\tfor i := 0; i < n - 1; i++ {\n\t\tmaxPosition = max(maxPosition, i + nums[i])\n\t\tif i == end {\n\t\t\tend = maxPosition\n\t\t\tcount++\n\t\t}\n\t}\n    \n    return count\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```","slug":"leetcode/45. 跳跃游戏 II","published":1,"updated":"2022-10-29T17:55:52.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pc001kca4l4mojhjrn","content":"<p>动态规划</p>\n<p>从后往前考虑。</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">jump</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    count := <span class=\"hljs-number\">0</span><br>    r := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> r &gt; <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>            <span class=\"hljs-keyword\">if</span> nums[i] &gt;= r - i &#123;<br>                r = i<br>                count++<br>                <span class=\"hljs-keyword\">break</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从前往后考虑。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">jump</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    count := <span class=\"hljs-number\">0</span><br>    n := <span class=\"hljs-built_in\">len</span>(nums)<br>    maxPosition := <span class=\"hljs-number\">0</span><br>    end := <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-comment\">// r := len(nums) - 1</span><br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; i++ &#123;<br>\t\tmaxPosition = max(maxPosition, i + nums[i])<br>\t\t<span class=\"hljs-keyword\">if</span> i == end &#123;<br>\t\t\tend = maxPosition<br>\t\t\tcount++<br>\t\t&#125;<br>\t&#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> count<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(x, y <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> x &gt; y &#123;<br>        <span class=\"hljs-keyword\">return</span> x<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> y<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":561,"excerpt":"","more":"<p>动态规划</p>\n<p>从后往前考虑。</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">jump</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    count := <span class=\"hljs-number\">0</span><br>    r := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> r &gt; <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>            <span class=\"hljs-keyword\">if</span> nums[i] &gt;= r - i &#123;<br>                r = i<br>                count++<br>                <span class=\"hljs-keyword\">break</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从前往后考虑。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">jump</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    count := <span class=\"hljs-number\">0</span><br>    n := <span class=\"hljs-built_in\">len</span>(nums)<br>    maxPosition := <span class=\"hljs-number\">0</span><br>    end := <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-comment\">// r := len(nums) - 1</span><br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; i++ &#123;<br>\t\tmaxPosition = max(maxPosition, i + nums[i])<br>\t\t<span class=\"hljs-keyword\">if</span> i == end &#123;<br>\t\t\tend = maxPosition<br>\t\t\tcount++<br>\t\t&#125;<br>\t&#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> count<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(x, y <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> x &gt; y &#123;<br>        <span class=\"hljs-keyword\">return</span> x<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> y<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"433.最小基因变化","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/minimum-genetic-mutation/)\n\n广度优先搜索\n\n广度优先搜索的时候，注意要去掉已遍历过的情况，方法是从bankMap中删除已遍历的元素。\n\n时间复杂度：O(C x n x m)，其中C为基因位的可选项数量（此处为ACGT四种，C为4）， m为bank的长度，n为基因序列的长度。\n空间复杂度： O(m x n)。合法性的哈希表中一共存有 m个元素，队列中最多有 mm 个元素，每个元素的空间为 O(n)。O(m + n x m) = O(m x n)\n\n\n```Go\nfunc minMutation(start string, end string, bank []string) int {\n    if start == end {\n        return 0\n    }\n\n    if len(bank) == 0 {\n        return -1\n    }\n\n    bankMap := map[string]bool{}\n    queue := []string{}\n\n    for _, g := range bank {\n        bankMap[g] = true\n    }\n\n    queue = append(queue, start)\n\n    // 最少也进行了一次变化\n    for count := 1; len(queue) != 0; count++ {\n        for _, cur := range queue {\n            queue = queue[1:]\n            for i, x := range cur {\n                for _, y := range \"ACGT\" {\n                    if y != x {\n                        cur := cur[:i] + string(y) + cur[i+1:]\n                        // fmt.Printf(\"index: %v cur: %v\\n\", i, cur)\n                        if _, ok := bankMap[cur]; ok {\n                            if cur == end {\n                                return count\n                            }\n                            queue = append(queue, cur)\n                        \n                            // 去除已经遍历过的情况 \n                            delete(bankMap, cur)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return -1\n\n}\n```","source":"_posts/算法/leetcode/433.最小基因变化.md","raw":"---\ntitle: 433.最小基因变化\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/minimum-genetic-mutation/)\n\n广度优先搜索\n\n广度优先搜索的时候，注意要去掉已遍历过的情况，方法是从bankMap中删除已遍历的元素。\n\n时间复杂度：O(C x n x m)，其中C为基因位的可选项数量（此处为ACGT四种，C为4）， m为bank的长度，n为基因序列的长度。\n空间复杂度： O(m x n)。合法性的哈希表中一共存有 m个元素，队列中最多有 mm 个元素，每个元素的空间为 O(n)。O(m + n x m) = O(m x n)\n\n\n```Go\nfunc minMutation(start string, end string, bank []string) int {\n    if start == end {\n        return 0\n    }\n\n    if len(bank) == 0 {\n        return -1\n    }\n\n    bankMap := map[string]bool{}\n    queue := []string{}\n\n    for _, g := range bank {\n        bankMap[g] = true\n    }\n\n    queue = append(queue, start)\n\n    // 最少也进行了一次变化\n    for count := 1; len(queue) != 0; count++ {\n        for _, cur := range queue {\n            queue = queue[1:]\n            for i, x := range cur {\n                for _, y := range \"ACGT\" {\n                    if y != x {\n                        cur := cur[:i] + string(y) + cur[i+1:]\n                        // fmt.Printf(\"index: %v cur: %v\\n\", i, cur)\n                        if _, ok := bankMap[cur]; ok {\n                            if cur == end {\n                                return count\n                            }\n                            queue = append(queue, cur)\n                        \n                            // 去除已经遍历过的情况 \n                            delete(bankMap, cur)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return -1\n\n}\n```","slug":"leetcode/433.最小基因变化","published":1,"updated":"2022-10-29T18:01:14.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pc001mca4lbdr81ja3","content":"<p><a href=\"https://leetcode.cn/problems/minimum-genetic-mutation/\">leetcode</a></p>\n<p>广度优先搜索</p>\n<p>广度优先搜索的时候，注意要去掉已遍历过的情况，方法是从bankMap中删除已遍历的元素。</p>\n<p>时间复杂度：O(C x n x m)，其中C为基因位的可选项数量（此处为ACGT四种，C为4）， m为bank的长度，n为基因序列的长度。<br>空间复杂度： O(m x n)。合法性的哈希表中一共存有 m个元素，队列中最多有 mm 个元素，每个元素的空间为 O(n)。O(m + n x m) &#x3D; O(m x n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minMutation</span><span class=\"hljs-params\">(start <span class=\"hljs-type\">string</span>, end <span class=\"hljs-type\">string</span>, bank []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> start == end &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(bank) == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>    &#125;<br><br>    bankMap := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">bool</span>&#123;&#125;<br>    queue := []<span class=\"hljs-type\">string</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">for</span> _, g := <span class=\"hljs-keyword\">range</span> bank &#123;<br>        bankMap[g] = <span class=\"hljs-literal\">true</span><br>    &#125;<br><br>    queue = <span class=\"hljs-built_in\">append</span>(queue, start)<br><br>    <span class=\"hljs-comment\">// 最少也进行了一次变化</span><br>    <span class=\"hljs-keyword\">for</span> count := <span class=\"hljs-number\">1</span>; <span class=\"hljs-built_in\">len</span>(queue) != <span class=\"hljs-number\">0</span>; count++ &#123;<br>        <span class=\"hljs-keyword\">for</span> _, cur := <span class=\"hljs-keyword\">range</span> queue &#123;<br>            queue = queue[<span class=\"hljs-number\">1</span>:]<br>            <span class=\"hljs-keyword\">for</span> i, x := <span class=\"hljs-keyword\">range</span> cur &#123;<br>                <span class=\"hljs-keyword\">for</span> _, y := <span class=\"hljs-keyword\">range</span> <span class=\"hljs-string\">&quot;ACGT&quot;</span> &#123;<br>                    <span class=\"hljs-keyword\">if</span> y != x &#123;<br>                        cur := cur[:i] + <span class=\"hljs-type\">string</span>(y) + cur[i+<span class=\"hljs-number\">1</span>:]<br>                        <span class=\"hljs-comment\">// fmt.Printf(&quot;index: %v cur: %v\\n&quot;, i, cur)</span><br>                        <span class=\"hljs-keyword\">if</span> _, ok := bankMap[cur]; ok &#123;<br>                            <span class=\"hljs-keyword\">if</span> cur == end &#123;<br>                                <span class=\"hljs-keyword\">return</span> count<br>                            &#125;<br>                            queue = <span class=\"hljs-built_in\">append</span>(queue, cur)<br>                        <br>                            <span class=\"hljs-comment\">// 去除已经遍历过的情况 </span><br>                            <span class=\"hljs-built_in\">delete</span>(bankMap, cur)<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":942,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/minimum-genetic-mutation/\">leetcode</a></p>\n<p>广度优先搜索</p>\n<p>广度优先搜索的时候，注意要去掉已遍历过的情况，方法是从bankMap中删除已遍历的元素。</p>\n<p>时间复杂度：O(C x n x m)，其中C为基因位的可选项数量（此处为ACGT四种，C为4）， m为bank的长度，n为基因序列的长度。<br>空间复杂度： O(m x n)。合法性的哈希表中一共存有 m个元素，队列中最多有 mm 个元素，每个元素的空间为 O(n)。O(m + n x m) &#x3D; O(m x n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minMutation</span><span class=\"hljs-params\">(start <span class=\"hljs-type\">string</span>, end <span class=\"hljs-type\">string</span>, bank []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> start == end &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(bank) == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>    &#125;<br><br>    bankMap := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">bool</span>&#123;&#125;<br>    queue := []<span class=\"hljs-type\">string</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">for</span> _, g := <span class=\"hljs-keyword\">range</span> bank &#123;<br>        bankMap[g] = <span class=\"hljs-literal\">true</span><br>    &#125;<br><br>    queue = <span class=\"hljs-built_in\">append</span>(queue, start)<br><br>    <span class=\"hljs-comment\">// 最少也进行了一次变化</span><br>    <span class=\"hljs-keyword\">for</span> count := <span class=\"hljs-number\">1</span>; <span class=\"hljs-built_in\">len</span>(queue) != <span class=\"hljs-number\">0</span>; count++ &#123;<br>        <span class=\"hljs-keyword\">for</span> _, cur := <span class=\"hljs-keyword\">range</span> queue &#123;<br>            queue = queue[<span class=\"hljs-number\">1</span>:]<br>            <span class=\"hljs-keyword\">for</span> i, x := <span class=\"hljs-keyword\">range</span> cur &#123;<br>                <span class=\"hljs-keyword\">for</span> _, y := <span class=\"hljs-keyword\">range</span> <span class=\"hljs-string\">&quot;ACGT&quot;</span> &#123;<br>                    <span class=\"hljs-keyword\">if</span> y != x &#123;<br>                        cur := cur[:i] + <span class=\"hljs-type\">string</span>(y) + cur[i+<span class=\"hljs-number\">1</span>:]<br>                        <span class=\"hljs-comment\">// fmt.Printf(&quot;index: %v cur: %v\\n&quot;, i, cur)</span><br>                        <span class=\"hljs-keyword\">if</span> _, ok := bankMap[cur]; ok &#123;<br>                            <span class=\"hljs-keyword\">if</span> cur == end &#123;<br>                                <span class=\"hljs-keyword\">return</span> count<br>                            &#125;<br>                            queue = <span class=\"hljs-built_in\">append</span>(queue, cur)<br>                        <br>                            <span class=\"hljs-comment\">// 去除已经遍历过的情况 </span><br>                            <span class=\"hljs-built_in\">delete</span>(bankMap, cur)<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"47.全排列2","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/permutations-ii/)\n\n深度优先搜索\n\n```Go\nvar ans [][]int\n\n  \n\nfunc permuteUnique(nums []int) [][]int {\n\n\tsort.Ints(nums)\n\t\n\tused := make([]bool, len(nums))\n\t\n\tarr := []int{}\n\t\n\tans = [][]int{}\n\t\n\t  \n\t\n\tdfs(nums, used, arr)\n\t\n\treturn ans\n\n}\n\n  \n\nfunc dfs(nums []int, used []bool, arr []int) {\n\n\tif len(arr) == len(nums) {\n\t\n\t\tans = append(ans, append([]int{}, arr...))\n\t\t\n\t\treturn\n\t\t\n\t}\n\t\n\t  \n\t\n\tfor i := 0; i < len(nums); i++ {\n\t\n\t\tif used[i] {\n\t\t\n\t\t\tcontinue\n\t\t\n\t\t}\n\t\t\n\t\t  \n\t\t\n\t\t// 上一个元素如果和当前元素相同且没使用过，则跳过当前元素，防止重复\n\t\t\n\t\tif i > 0 && nums[i] == nums[i-1] && !used[i-1] {\n\t\t\n\t\t\tcontinue\n\t\t\n\t\t}\n\t\t\n\t\t  \n\t\t\n\t\tarr = append(arr, nums[i])\n\t\t\n\t\tused[i] = true\n\t\t\n\t\tdfs(nums, used, arr)\n\t\t\n\t\tused[i] = false\n\t\t\n\t\tarr = arr[:len(arr)-1]\n\t\n\t}\n\n}\n```","source":"_posts/算法/leetcode/47.全排列2.md","raw":"---\ntitle: 47.全排列2\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/permutations-ii/)\n\n深度优先搜索\n\n```Go\nvar ans [][]int\n\n  \n\nfunc permuteUnique(nums []int) [][]int {\n\n\tsort.Ints(nums)\n\t\n\tused := make([]bool, len(nums))\n\t\n\tarr := []int{}\n\t\n\tans = [][]int{}\n\t\n\t  \n\t\n\tdfs(nums, used, arr)\n\t\n\treturn ans\n\n}\n\n  \n\nfunc dfs(nums []int, used []bool, arr []int) {\n\n\tif len(arr) == len(nums) {\n\t\n\t\tans = append(ans, append([]int{}, arr...))\n\t\t\n\t\treturn\n\t\t\n\t}\n\t\n\t  \n\t\n\tfor i := 0; i < len(nums); i++ {\n\t\n\t\tif used[i] {\n\t\t\n\t\t\tcontinue\n\t\t\n\t\t}\n\t\t\n\t\t  \n\t\t\n\t\t// 上一个元素如果和当前元素相同且没使用过，则跳过当前元素，防止重复\n\t\t\n\t\tif i > 0 && nums[i] == nums[i-1] && !used[i-1] {\n\t\t\n\t\t\tcontinue\n\t\t\n\t\t}\n\t\t\n\t\t  \n\t\t\n\t\tarr = append(arr, nums[i])\n\t\t\n\t\tused[i] = true\n\t\t\n\t\tdfs(nums, used, arr)\n\t\t\n\t\tused[i] = false\n\t\t\n\t\tarr = arr[:len(arr)-1]\n\t\n\t}\n\n}\n```","slug":"leetcode/47.全排列2","published":1,"updated":"2022-10-29T17:55:59.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pd001oca4l9h3kgbv8","content":"<p><a href=\"https://leetcode.cn/problems/permutations-ii/\">leetcode</a></p>\n<p>深度优先搜索</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">var</span> ans [][]<span class=\"hljs-type\">int</span><br><br>  <br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">permuteUnique</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br><br>\tsort.Ints(nums)<br>\t<br>\tused := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, <span class=\"hljs-built_in\">len</span>(nums))<br>\t<br>\tarr := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<br>\tans = [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<br>\t  <br>\t<br>\tdfs(nums, used, arr)<br>\t<br>\t<span class=\"hljs-keyword\">return</span> ans<br><br>&#125;<br><br>  <br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, used []<span class=\"hljs-type\">bool</span>, arr []<span class=\"hljs-type\">int</span>)</span></span> &#123;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) == <span class=\"hljs-built_in\">len</span>(nums) &#123;<br>\t<br>\t\tans = <span class=\"hljs-built_in\">append</span>(ans, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, arr...))<br>\t\t<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t<br>\t\t<span class=\"hljs-keyword\">if</span> used[i] &#123;<br>\t\t<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t<br>\t\t&#125;<br>\t\t<br>\t\t  <br>\t\t<br>\t\t<span class=\"hljs-comment\">// 上一个元素如果和当前元素相同且没使用过，则跳过当前元素，防止重复</span><br>\t\t<br>\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"hljs-number\">-1</span>] &amp;&amp; !used[i<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t<br>\t\t&#125;<br>\t\t<br>\t\t  <br>\t\t<br>\t\tarr = <span class=\"hljs-built_in\">append</span>(arr, nums[i])<br>\t\t<br>\t\tused[i] = <span class=\"hljs-literal\">true</span><br>\t\t<br>\t\tdfs(nums, used, arr)<br>\t\t<br>\t\tused[i] = <span class=\"hljs-literal\">false</span><br>\t\t<br>\t\tarr = arr[:<span class=\"hljs-built_in\">len</span>(arr)<span class=\"hljs-number\">-1</span>]<br>\t<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":718,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/permutations-ii/\">leetcode</a></p>\n<p>深度优先搜索</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">var</span> ans [][]<span class=\"hljs-type\">int</span><br><br>  <br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">permuteUnique</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br><br>\tsort.Ints(nums)<br>\t<br>\tused := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, <span class=\"hljs-built_in\">len</span>(nums))<br>\t<br>\tarr := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<br>\tans = [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<br>\t  <br>\t<br>\tdfs(nums, used, arr)<br>\t<br>\t<span class=\"hljs-keyword\">return</span> ans<br><br>&#125;<br><br>  <br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, used []<span class=\"hljs-type\">bool</span>, arr []<span class=\"hljs-type\">int</span>)</span></span> &#123;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) == <span class=\"hljs-built_in\">len</span>(nums) &#123;<br>\t<br>\t\tans = <span class=\"hljs-built_in\">append</span>(ans, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, arr...))<br>\t\t<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t\t<br>\t&#125;<br>\t<br>\t  <br>\t<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t<br>\t\t<span class=\"hljs-keyword\">if</span> used[i] &#123;<br>\t\t<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t<br>\t\t&#125;<br>\t\t<br>\t\t  <br>\t\t<br>\t\t<span class=\"hljs-comment\">// 上一个元素如果和当前元素相同且没使用过，则跳过当前元素，防止重复</span><br>\t\t<br>\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"hljs-number\">-1</span>] &amp;&amp; !used[i<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t<br>\t\t&#125;<br>\t\t<br>\t\t  <br>\t\t<br>\t\tarr = <span class=\"hljs-built_in\">append</span>(arr, nums[i])<br>\t\t<br>\t\tused[i] = <span class=\"hljs-literal\">true</span><br>\t\t<br>\t\tdfs(nums, used, arr)<br>\t\t<br>\t\tused[i] = <span class=\"hljs-literal\">false</span><br>\t\t<br>\t\tarr = arr[:<span class=\"hljs-built_in\">len</span>(arr)<span class=\"hljs-number\">-1</span>]<br>\t<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"450.删除二叉搜索树中的节点","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/delete-node-in-a-bst/)\n\n递归方法\n\n1. 根据二叉搜索树的特性寻找要删除的节点\n2. 如果删除节点就是叶子节点，直接删除\n3. 如果删除节点的左孩子或者有孩子为空，则直接删除当前节点，把非空的孩子节点替换当前节点\n4. 如果删除节点左右孩子都不为空，则寻找大于删除节点的最小节点来替代删除节点，这个节点在删除节点右子树的最左端叶子节点。该节点没有左子树，删除该节点后也比较好处理，且可以保证被删除节点的左子树都小于它，被删除节点的右子树也都大于它。\n5. 特殊情况，若删除节点右子树的最左端叶子节点就是删除节点的右孩子，则只需替换右子树的最左端叶子节点的左孩子为删除节点的左孩子即可。\n\n时间复杂度：O(N)\n空间复杂度：O(N)\n\n```Go\nfunc deleteNode(root *TreeNode, key int) *TreeNode {\n    if root == nil {\n        return nil\n    }\n\n    if root.Val < key {\n        root.Right = deleteNode(root.Right, key)\n    } else if root.Val > key {\n        root.Left = deleteNode(root.Left, key)\n    } else {\n        if root.Left == nil || root.Right == nil {\n            if root.Left == nil {\n                return root.Right\n            } else {\n                return root.Left\n            }\n        } else {\n            tempParent := root\n            temp := root.Right\n\n            // root.Right 就是右子树的最小值\n            if temp.Left == nil {\n                temp.Left = root.Left\n                return temp\n            }\n\n            // 寻找右子树的最小值\n            for temp.Left != nil {\n                tempParent = temp\n                temp = temp.Left\n            }\n\n            temp.Left = root.Left\n            tempParent.Left = temp.Right\n            temp.Right = root.Right\n            return temp\n        }\n    }\n\n    return root\n}\n```","source":"_posts/算法/leetcode/450.删除二叉搜索树中的节点.md","raw":"---\ntitle: 450.删除二叉搜索树中的节点\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/delete-node-in-a-bst/)\n\n递归方法\n\n1. 根据二叉搜索树的特性寻找要删除的节点\n2. 如果删除节点就是叶子节点，直接删除\n3. 如果删除节点的左孩子或者有孩子为空，则直接删除当前节点，把非空的孩子节点替换当前节点\n4. 如果删除节点左右孩子都不为空，则寻找大于删除节点的最小节点来替代删除节点，这个节点在删除节点右子树的最左端叶子节点。该节点没有左子树，删除该节点后也比较好处理，且可以保证被删除节点的左子树都小于它，被删除节点的右子树也都大于它。\n5. 特殊情况，若删除节点右子树的最左端叶子节点就是删除节点的右孩子，则只需替换右子树的最左端叶子节点的左孩子为删除节点的左孩子即可。\n\n时间复杂度：O(N)\n空间复杂度：O(N)\n\n```Go\nfunc deleteNode(root *TreeNode, key int) *TreeNode {\n    if root == nil {\n        return nil\n    }\n\n    if root.Val < key {\n        root.Right = deleteNode(root.Right, key)\n    } else if root.Val > key {\n        root.Left = deleteNode(root.Left, key)\n    } else {\n        if root.Left == nil || root.Right == nil {\n            if root.Left == nil {\n                return root.Right\n            } else {\n                return root.Left\n            }\n        } else {\n            tempParent := root\n            temp := root.Right\n\n            // root.Right 就是右子树的最小值\n            if temp.Left == nil {\n                temp.Left = root.Left\n                return temp\n            }\n\n            // 寻找右子树的最小值\n            for temp.Left != nil {\n                tempParent = temp\n                temp = temp.Left\n            }\n\n            temp.Left = root.Left\n            tempParent.Left = temp.Right\n            temp.Right = root.Right\n            return temp\n        }\n    }\n\n    return root\n}\n```","slug":"leetcode/450.删除二叉搜索树中的节点","published":1,"updated":"2022-10-29T18:01:20.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pd001qca4lbz6q421d","content":"<p><a href=\"https://leetcode.cn/problems/delete-node-in-a-bst/\">leetcode</a></p>\n<p>递归方法</p>\n<ol>\n<li>根据二叉搜索树的特性寻找要删除的节点</li>\n<li>如果删除节点就是叶子节点，直接删除</li>\n<li>如果删除节点的左孩子或者有孩子为空，则直接删除当前节点，把非空的孩子节点替换当前节点</li>\n<li>如果删除节点左右孩子都不为空，则寻找大于删除节点的最小节点来替代删除节点，这个节点在删除节点右子树的最左端叶子节点。该节点没有左子树，删除该节点后也比较好处理，且可以保证被删除节点的左子树都小于它，被删除节点的右子树也都大于它。</li>\n<li>特殊情况，若删除节点右子树的最左端叶子节点就是删除节点的右孩子，则只需替换右子树的最左端叶子节点的左孩子为删除节点的左孩子即可。</li>\n</ol>\n<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteNode</span><span class=\"hljs-params\">(root *TreeNode, key <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>    <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> root.Val &lt; key &#123;<br>        root.Right = deleteNode(root.Right, key)<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.Val &gt; key &#123;<br>        root.Left = deleteNode(root.Left, key)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> || root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> root.Right<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> root.Left<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            tempParent := root<br>            temp := root.Right<br><br>            <span class=\"hljs-comment\">// root.Right 就是右子树的最小值</span><br>            <span class=\"hljs-keyword\">if</span> temp.Left == <span class=\"hljs-literal\">nil</span> &#123;<br>                temp.Left = root.Left<br>                <span class=\"hljs-keyword\">return</span> temp<br>            &#125;<br><br>            <span class=\"hljs-comment\">// 寻找右子树的最小值</span><br>            <span class=\"hljs-keyword\">for</span> temp.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>                tempParent = temp<br>                temp = temp.Left<br>            &#125;<br><br>            temp.Left = root.Left<br>            tempParent.Left = temp.Right<br>            temp.Right = root.Right<br>            <span class=\"hljs-keyword\">return</span> temp<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1000,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/delete-node-in-a-bst/\">leetcode</a></p>\n<p>递归方法</p>\n<ol>\n<li>根据二叉搜索树的特性寻找要删除的节点</li>\n<li>如果删除节点就是叶子节点，直接删除</li>\n<li>如果删除节点的左孩子或者有孩子为空，则直接删除当前节点，把非空的孩子节点替换当前节点</li>\n<li>如果删除节点左右孩子都不为空，则寻找大于删除节点的最小节点来替代删除节点，这个节点在删除节点右子树的最左端叶子节点。该节点没有左子树，删除该节点后也比较好处理，且可以保证被删除节点的左子树都小于它，被删除节点的右子树也都大于它。</li>\n<li>特殊情况，若删除节点右子树的最左端叶子节点就是删除节点的右孩子，则只需替换右子树的最左端叶子节点的左孩子为删除节点的左孩子即可。</li>\n</ol>\n<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteNode</span><span class=\"hljs-params\">(root *TreeNode, key <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>    <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> root.Val &lt; key &#123;<br>        root.Right = deleteNode(root.Right, key)<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.Val &gt; key &#123;<br>        root.Left = deleteNode(root.Left, key)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> || root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> root.Right<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> root.Left<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            tempParent := root<br>            temp := root.Right<br><br>            <span class=\"hljs-comment\">// root.Right 就是右子树的最小值</span><br>            <span class=\"hljs-keyword\">if</span> temp.Left == <span class=\"hljs-literal\">nil</span> &#123;<br>                temp.Left = root.Left<br>                <span class=\"hljs-keyword\">return</span> temp<br>            &#125;<br><br>            <span class=\"hljs-comment\">// 寻找右子树的最小值</span><br>            <span class=\"hljs-keyword\">for</span> temp.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>                tempParent = temp<br>                temp = temp.Left<br>            &#125;<br><br>            temp.Left = root.Left<br>            tempParent.Left = temp.Right<br>            temp.Right = root.Right<br>            <span class=\"hljs-keyword\">return</span> temp<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"50.x的n次幂","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/powx-n/submissions/)\n\n递归\n时间复杂度 O(log n)\n空间复杂度O(log n)\n\n```Go\nfunc myPow(x float64, n int) float64 {\n\n    var helper func(float64, int) float64\n    helper = func(x float64, n int) float64 {\n        if n == 0 {\n            return 1\n        }\n\n        temp := helper(x, n / 2)\n\n        if n % 2 == 0 {\n            temp = temp * temp\n        } else {\n            temp = temp * temp * x\n        }\n\n        return temp\n    }\n\n    if n < 0 {\n        return 1 / helper(x, n)\n    }\n    \n    return helper(x, n)    \n}\n```","source":"_posts/算法/leetcode/50.x的n次幂.md","raw":"---\ntitle: 50.x的n次幂\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/powx-n/submissions/)\n\n递归\n时间复杂度 O(log n)\n空间复杂度O(log n)\n\n```Go\nfunc myPow(x float64, n int) float64 {\n\n    var helper func(float64, int) float64\n    helper = func(x float64, n int) float64 {\n        if n == 0 {\n            return 1\n        }\n\n        temp := helper(x, n / 2)\n\n        if n % 2 == 0 {\n            temp = temp * temp\n        } else {\n            temp = temp * temp * x\n        }\n\n        return temp\n    }\n\n    if n < 0 {\n        return 1 / helper(x, n)\n    }\n    \n    return helper(x, n)    \n}\n```","slug":"leetcode/50.x的n次幂","published":1,"updated":"2022-10-29T17:56:05.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pe001sca4lhg0yhgae","content":"<p><a href=\"https://leetcode.cn/problems/powx-n/submissions/\">leetcode</a></p>\n<p>递归<br>时间复杂度 O(log n)<br>空间复杂度O(log n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myPow</span><span class=\"hljs-params\">(x <span class=\"hljs-type\">float64</span>, n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">float64</span> &#123;<br><br>    <span class=\"hljs-keyword\">var</span> helper <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float64</span>, <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">float64</span><br>    helper = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(x <span class=\"hljs-type\">float64</span>, n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">float64</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>        &#125;<br><br>        temp := helper(x, n / <span class=\"hljs-number\">2</span>)<br><br>        <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;<br>            temp = temp * temp<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            temp = temp * temp * x<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> temp<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / helper(x, n)<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> helper(x, n)    <br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":372,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/powx-n/submissions/\">leetcode</a></p>\n<p>递归<br>时间复杂度 O(log n)<br>空间复杂度O(log n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myPow</span><span class=\"hljs-params\">(x <span class=\"hljs-type\">float64</span>, n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">float64</span> &#123;<br><br>    <span class=\"hljs-keyword\">var</span> helper <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float64</span>, <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">float64</span><br>    helper = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(x <span class=\"hljs-type\">float64</span>, n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">float64</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>        &#125;<br><br>        temp := helper(x, n / <span class=\"hljs-number\">2</span>)<br><br>        <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;<br>            temp = temp * temp<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            temp = temp * temp * x<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> temp<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / helper(x, n)<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> helper(x, n)    <br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"51.N皇后问题","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode-cn.com/problems/n-queens/)\n\n\n回溯法解题。\n\n1. 考虑给每行设置皇后在哪一列，所以维护一个列数组表示哪些列有皇后了，则这些列不能再分配皇后。\n2. 皇后所在的斜线上也不能有皇后，斜线规律为行数和列数之差相等以及行数和列数之和相等，故维护一个行数列数之差的map以及行数列数之和的map。\n3. 递归遍历每行的列，看是否能够在该行该列防止皇后。\n4. 每层递归结束记得还原现场，即修改列数组和斜线map。\n\n```Go\nfunc solveNQueens(n int) [][]string {\n    columns := make([]bool, n)\n    crossL := make(map[int]bool)\n    crossR := make(map[int]bool)\n\n    results := [][]int{}\n\n    var backtrack func([]int, int)\n\n    backtrack = func(queens []int, row int){\n        if (row >= n) {\n\t        // 注意二维数组的slice赋值最好新建对象\n            results = append(results, append([]int{}, queens...))\n            // fmt.Printf(\"results: %v\\n\", results)\n            return\n        }\n        for col := 0; col < n; col++ {\n            // fmt.Printf(\"row: %v col: %v\\n\", row, col)\n            if c, ok := crossL[row - col]; ok && c {\n                continue\n            }\n\n            if c, ok := crossR[row + col]; ok && c {\n                continue\n            }\n\n            if !columns[col]  {\n                columns[col] = true\n                crossL[row - col] = true\n                crossR[row + col] = true\n                queens := append(queens, col)\n                // fmt.Printf(\"queens: %v\\n\", queens)\n                backtrack(queens, row + 1)\n                // 还原现场\n                columns[col] = false\n                crossL[row - col] = false\n                crossR[row + col] = false\n            }\n        }\n    }\n\n    backtrack([]int{}, 0)\n    \n    ans := [][]string{}\n\n    for _, result := range results {\n        a := make([]string, n)\n        for row := 0; row < n; row++ {\n            for col := 0; col < n; col++ {\n                if col == result[row] {\n                    a[row] = a[row] + \"Q\"\n                } else {\n                    a[row] = a[row] + \".\"\n                }\n            }\n        }\n        ans = append(ans, a)\n    }\n\n    return ans\n}\n\n\n```","source":"_posts/算法/leetcode/51.N皇后问题.md","raw":"---\ntitle: 51.N皇后问题\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode-cn.com/problems/n-queens/)\n\n\n回溯法解题。\n\n1. 考虑给每行设置皇后在哪一列，所以维护一个列数组表示哪些列有皇后了，则这些列不能再分配皇后。\n2. 皇后所在的斜线上也不能有皇后，斜线规律为行数和列数之差相等以及行数和列数之和相等，故维护一个行数列数之差的map以及行数列数之和的map。\n3. 递归遍历每行的列，看是否能够在该行该列防止皇后。\n4. 每层递归结束记得还原现场，即修改列数组和斜线map。\n\n```Go\nfunc solveNQueens(n int) [][]string {\n    columns := make([]bool, n)\n    crossL := make(map[int]bool)\n    crossR := make(map[int]bool)\n\n    results := [][]int{}\n\n    var backtrack func([]int, int)\n\n    backtrack = func(queens []int, row int){\n        if (row >= n) {\n\t        // 注意二维数组的slice赋值最好新建对象\n            results = append(results, append([]int{}, queens...))\n            // fmt.Printf(\"results: %v\\n\", results)\n            return\n        }\n        for col := 0; col < n; col++ {\n            // fmt.Printf(\"row: %v col: %v\\n\", row, col)\n            if c, ok := crossL[row - col]; ok && c {\n                continue\n            }\n\n            if c, ok := crossR[row + col]; ok && c {\n                continue\n            }\n\n            if !columns[col]  {\n                columns[col] = true\n                crossL[row - col] = true\n                crossR[row + col] = true\n                queens := append(queens, col)\n                // fmt.Printf(\"queens: %v\\n\", queens)\n                backtrack(queens, row + 1)\n                // 还原现场\n                columns[col] = false\n                crossL[row - col] = false\n                crossR[row + col] = false\n            }\n        }\n    }\n\n    backtrack([]int{}, 0)\n    \n    ans := [][]string{}\n\n    for _, result := range results {\n        a := make([]string, n)\n        for row := 0; row < n; row++ {\n            for col := 0; col < n; col++ {\n                if col == result[row] {\n                    a[row] = a[row] + \"Q\"\n                } else {\n                    a[row] = a[row] + \".\"\n                }\n            }\n        }\n        ans = append(ans, a)\n    }\n\n    return ans\n}\n\n\n```","slug":"leetcode/51.N皇后问题","published":1,"updated":"2022-10-29T17:56:13.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pe001uca4lgmn62gix","content":"<p><a href=\"https://leetcode-cn.com/problems/n-queens/\">leetcode</a></p>\n<p>回溯法解题。</p>\n<ol>\n<li>考虑给每行设置皇后在哪一列，所以维护一个列数组表示哪些列有皇后了，则这些列不能再分配皇后。</li>\n<li>皇后所在的斜线上也不能有皇后，斜线规律为行数和列数之差相等以及行数和列数之和相等，故维护一个行数列数之差的map以及行数列数之和的map。</li>\n<li>递归遍历每行的列，看是否能够在该行该列防止皇后。</li>\n<li>每层递归结束记得还原现场，即修改列数组和斜线map。</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">solveNQueens</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">string</span> &#123;<br>    columns := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, n)<br>    crossL := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>)<br>    crossR := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>)<br><br>    results := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">var</span> backtrack <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span><br><br>    backtrack = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(queens []<span class=\"hljs-type\">int</span>, row <span class=\"hljs-type\">int</span>)</span></span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (row &gt;= n) &#123;<br>\t        <span class=\"hljs-comment\">// 注意二维数组的slice赋值最好新建对象</span><br>            results = <span class=\"hljs-built_in\">append</span>(results, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, queens...))<br>            <span class=\"hljs-comment\">// fmt.Printf(&quot;results: %v\\n&quot;, results)</span><br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> col := <span class=\"hljs-number\">0</span>; col &lt; n; col++ &#123;<br>            <span class=\"hljs-comment\">// fmt.Printf(&quot;row: %v col: %v\\n&quot;, row, col)</span><br>            <span class=\"hljs-keyword\">if</span> c, ok := crossL[row - col]; ok &amp;&amp; c &#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> c, ok := crossR[row + col]; ok &amp;&amp; c &#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> !columns[col]  &#123;<br>                columns[col] = <span class=\"hljs-literal\">true</span><br>                crossL[row - col] = <span class=\"hljs-literal\">true</span><br>                crossR[row + col] = <span class=\"hljs-literal\">true</span><br>                queens := <span class=\"hljs-built_in\">append</span>(queens, col)<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;queens: %v\\n&quot;, queens)</span><br>                backtrack(queens, row + <span class=\"hljs-number\">1</span>)<br>                <span class=\"hljs-comment\">// 还原现场</span><br>                columns[col] = <span class=\"hljs-literal\">false</span><br>                crossL[row - col] = <span class=\"hljs-literal\">false</span><br>                crossR[row + col] = <span class=\"hljs-literal\">false</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    backtrack([]<span class=\"hljs-type\">int</span>&#123;&#125;, <span class=\"hljs-number\">0</span>)<br>    <br>    ans := [][]<span class=\"hljs-type\">string</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">for</span> _, result := <span class=\"hljs-keyword\">range</span> results &#123;<br>        a := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">string</span>, n)<br>        <span class=\"hljs-keyword\">for</span> row := <span class=\"hljs-number\">0</span>; row &lt; n; row++ &#123;<br>            <span class=\"hljs-keyword\">for</span> col := <span class=\"hljs-number\">0</span>; col &lt; n; col++ &#123;<br>                <span class=\"hljs-keyword\">if</span> col == result[row] &#123;<br>                    a[row] = a[row] + <span class=\"hljs-string\">&quot;Q&quot;</span><br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    a[row] = a[row] + <span class=\"hljs-string\">&quot;.&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, a)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br><br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1425,"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/n-queens/\">leetcode</a></p>\n<p>回溯法解题。</p>\n<ol>\n<li>考虑给每行设置皇后在哪一列，所以维护一个列数组表示哪些列有皇后了，则这些列不能再分配皇后。</li>\n<li>皇后所在的斜线上也不能有皇后，斜线规律为行数和列数之差相等以及行数和列数之和相等，故维护一个行数列数之差的map以及行数列数之和的map。</li>\n<li>递归遍历每行的列，看是否能够在该行该列防止皇后。</li>\n<li>每层递归结束记得还原现场，即修改列数组和斜线map。</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">solveNQueens</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">string</span> &#123;<br>    columns := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, n)<br>    crossL := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>)<br>    crossR := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>)<br><br>    results := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">var</span> backtrack <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span><br><br>    backtrack = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(queens []<span class=\"hljs-type\">int</span>, row <span class=\"hljs-type\">int</span>)</span></span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (row &gt;= n) &#123;<br>\t        <span class=\"hljs-comment\">// 注意二维数组的slice赋值最好新建对象</span><br>            results = <span class=\"hljs-built_in\">append</span>(results, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, queens...))<br>            <span class=\"hljs-comment\">// fmt.Printf(&quot;results: %v\\n&quot;, results)</span><br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> col := <span class=\"hljs-number\">0</span>; col &lt; n; col++ &#123;<br>            <span class=\"hljs-comment\">// fmt.Printf(&quot;row: %v col: %v\\n&quot;, row, col)</span><br>            <span class=\"hljs-keyword\">if</span> c, ok := crossL[row - col]; ok &amp;&amp; c &#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> c, ok := crossR[row + col]; ok &amp;&amp; c &#123;<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> !columns[col]  &#123;<br>                columns[col] = <span class=\"hljs-literal\">true</span><br>                crossL[row - col] = <span class=\"hljs-literal\">true</span><br>                crossR[row + col] = <span class=\"hljs-literal\">true</span><br>                queens := <span class=\"hljs-built_in\">append</span>(queens, col)<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;queens: %v\\n&quot;, queens)</span><br>                backtrack(queens, row + <span class=\"hljs-number\">1</span>)<br>                <span class=\"hljs-comment\">// 还原现场</span><br>                columns[col] = <span class=\"hljs-literal\">false</span><br>                crossL[row - col] = <span class=\"hljs-literal\">false</span><br>                crossR[row + col] = <span class=\"hljs-literal\">false</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    backtrack([]<span class=\"hljs-type\">int</span>&#123;&#125;, <span class=\"hljs-number\">0</span>)<br>    <br>    ans := [][]<span class=\"hljs-type\">string</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">for</span> _, result := <span class=\"hljs-keyword\">range</span> results &#123;<br>        a := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">string</span>, n)<br>        <span class=\"hljs-keyword\">for</span> row := <span class=\"hljs-number\">0</span>; row &lt; n; row++ &#123;<br>            <span class=\"hljs-keyword\">for</span> col := <span class=\"hljs-number\">0</span>; col &lt; n; col++ &#123;<br>                <span class=\"hljs-keyword\">if</span> col == result[row] &#123;<br>                    a[row] = a[row] + <span class=\"hljs-string\">&quot;Q&quot;</span><br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    a[row] = a[row] + <span class=\"hljs-string\">&quot;.&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, a)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br><br><br></code></pre></td></tr></table></figure>"},{"title":"516.最大回文子序列","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n`dp[i][j]` 用来记录从i到j位置的字符串的最大回文子序列长度。\n\n`dp[i][i]` 都为1。\n\n状态转移时考虑最左和最右元素是否相等，相等则转移至 `dp[i+1][j-1]` ，否则考虑 `dp[i+1][j]` 和 `dp[i][j-1]` 的较大者 。\n\n注意遍历时，i从右边开始，可以保证每个子问题都计算过了。\n\n时间复杂度：O(N^2)\n空间复杂度：O(N^2)\n\n\n```Go\nfunc longestPalindromeSubseq(s string) int {\n\t// s[i] != s[j]\n\t// dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\t// s[i] == s[j]\n\t// dp[i][j] = dp[i+1][j-1] + 2\n\n\tdp := make([][]int, len(s))\n\tfor i := 0; i < len(s); i++ {\n\t\tdp[i] = make([]int, len(s))\n\t\tdp[i][i] = 1\n\t}\n\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tfor j := i + 1; j < len(s); j++ {\n\t\t\tif s[i] == s[j] {\n\t\t\t\tdp[i][j] = dp[i+1][j-1] + 2\n\t\t\t} else {\n\t\t\t\tdp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\t\t\t}\n\t\t\t// fmt.Printf(\"dp[%v][%v], %v\\n\", i, j, dp[i][j])\n\t\t}\n\t}\n\n\treturn dp[0][len(s)-1]\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n```","source":"_posts/算法/leetcode/516.最大回文子序列.md","raw":"---\ntitle: 516.最大回文子序列\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n`dp[i][j]` 用来记录从i到j位置的字符串的最大回文子序列长度。\n\n`dp[i][i]` 都为1。\n\n状态转移时考虑最左和最右元素是否相等，相等则转移至 `dp[i+1][j-1]` ，否则考虑 `dp[i+1][j]` 和 `dp[i][j-1]` 的较大者 。\n\n注意遍历时，i从右边开始，可以保证每个子问题都计算过了。\n\n时间复杂度：O(N^2)\n空间复杂度：O(N^2)\n\n\n```Go\nfunc longestPalindromeSubseq(s string) int {\n\t// s[i] != s[j]\n\t// dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\t// s[i] == s[j]\n\t// dp[i][j] = dp[i+1][j-1] + 2\n\n\tdp := make([][]int, len(s))\n\tfor i := 0; i < len(s); i++ {\n\t\tdp[i] = make([]int, len(s))\n\t\tdp[i][i] = 1\n\t}\n\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tfor j := i + 1; j < len(s); j++ {\n\t\t\tif s[i] == s[j] {\n\t\t\t\tdp[i][j] = dp[i+1][j-1] + 2\n\t\t\t} else {\n\t\t\t\tdp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\t\t\t}\n\t\t\t// fmt.Printf(\"dp[%v][%v], %v\\n\", i, j, dp[i][j])\n\t\t}\n\t}\n\n\treturn dp[0][len(s)-1]\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n```","slug":"leetcode/516.最大回文子序列","published":1,"updated":"2022-10-29T18:01:28.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pf001wca4l348y50v0","content":"<p>动态规划</p>\n<p><code>dp[i][j]</code> 用来记录从i到j位置的字符串的最大回文子序列长度。</p>\n<p><code>dp[i][i]</code> 都为1。</p>\n<p>状态转移时考虑最左和最右元素是否相等，相等则转移至 <code>dp[i+1][j-1]</code> ，否则考虑 <code>dp[i+1][j]</code> 和 <code>dp[i][j-1]</code> 的较大者 。</p>\n<p>注意遍历时，i从右边开始，可以保证每个子问题都计算过了。</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(N^2)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">longestPalindromeSubseq</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// s[i] != s[j]</span><br>\t<span class=\"hljs-comment\">// dp[i][j] = max(dp[i][j-1], dp[i+1][j])</span><br>\t<span class=\"hljs-comment\">// s[i] == s[j]</span><br>\t<span class=\"hljs-comment\">// dp[i][j] = dp[i+1][j-1] + 2</span><br><br>\tdp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(s))<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\tdp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(s))<br>\t\tdp[i][i] = <span class=\"hljs-number\">1</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-built_in\">len</span>(s) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(s); j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> s[i] == s[j] &#123;<br>\t\t\t\tdp[i][j] = dp[i+<span class=\"hljs-number\">1</span>][j<span class=\"hljs-number\">-1</span>] + <span class=\"hljs-number\">2</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tdp[i][j] = max(dp[i+<span class=\"hljs-number\">1</span>][j], dp[i][j<span class=\"hljs-number\">-1</span>])<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// fmt.Printf(&quot;dp[%v][%v], %v\\n&quot;, i, j, dp[i][j])</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-built_in\">len</span>(s)<span class=\"hljs-number\">-1</span>]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":766,"excerpt":"","more":"<p>动态规划</p>\n<p><code>dp[i][j]</code> 用来记录从i到j位置的字符串的最大回文子序列长度。</p>\n<p><code>dp[i][i]</code> 都为1。</p>\n<p>状态转移时考虑最左和最右元素是否相等，相等则转移至 <code>dp[i+1][j-1]</code> ，否则考虑 <code>dp[i+1][j]</code> 和 <code>dp[i][j-1]</code> 的较大者 。</p>\n<p>注意遍历时，i从右边开始，可以保证每个子问题都计算过了。</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(N^2)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">longestPalindromeSubseq</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// s[i] != s[j]</span><br>\t<span class=\"hljs-comment\">// dp[i][j] = max(dp[i][j-1], dp[i+1][j])</span><br>\t<span class=\"hljs-comment\">// s[i] == s[j]</span><br>\t<span class=\"hljs-comment\">// dp[i][j] = dp[i+1][j-1] + 2</span><br><br>\tdp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(s))<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\tdp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(s))<br>\t\tdp[i][i] = <span class=\"hljs-number\">1</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-built_in\">len</span>(s) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(s); j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> s[i] == s[j] &#123;<br>\t\t\t\tdp[i][j] = dp[i+<span class=\"hljs-number\">1</span>][j<span class=\"hljs-number\">-1</span>] + <span class=\"hljs-number\">2</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tdp[i][j] = max(dp[i+<span class=\"hljs-number\">1</span>][j], dp[i][j<span class=\"hljs-number\">-1</span>])<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// fmt.Printf(&quot;dp[%v][%v], %v\\n&quot;, i, j, dp[i][j])</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-built_in\">len</span>(s)<span class=\"hljs-number\">-1</span>]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"53.最大子序和","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/maximum-subarray/)\n\n思路：动态规划，前缀和。\n\n```go\nfunc maxSubArray(nums []int) int {\n\n\tans := nums[0]\n\t\n\tfor i := 1; i < len(nums); i++ {\n\t\t// 当前缀和为正数则累加，否则抛弃\n\t\tif nums[i-1] + nums[i] > nums[i] {\n\t\t\tnums[i] = nums[i-1] + nums[i]\n\t\t}\n\t\n\t\tif nums[i] > ans {\n\t\t\tans = nums[i]\n\t\t}\n\t}\n\t\n\treturn ans\n}\n```\n\n","source":"_posts/算法/leetcode/53.最大子序和.md","raw":"---\ntitle: 53.最大子序和\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/maximum-subarray/)\n\n思路：动态规划，前缀和。\n\n```go\nfunc maxSubArray(nums []int) int {\n\n\tans := nums[0]\n\t\n\tfor i := 1; i < len(nums); i++ {\n\t\t// 当前缀和为正数则累加，否则抛弃\n\t\tif nums[i-1] + nums[i] > nums[i] {\n\t\t\tnums[i] = nums[i-1] + nums[i]\n\t\t}\n\t\n\t\tif nums[i] > ans {\n\t\t\tans = nums[i]\n\t\t}\n\t}\n\t\n\treturn ans\n}\n```\n\n","slug":"leetcode/53.最大子序和","published":1,"updated":"2022-10-29T17:56:21.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pg001yca4ldt0410h6","content":"<p><a href=\"https://leetcode.cn/problems/maximum-subarray/\">leetcode</a></p>\n<p>思路：动态规划，前缀和。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxSubArray</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br><br>\tans := nums[<span class=\"hljs-number\">0</span>]<br>\t<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\t<span class=\"hljs-comment\">// 当前缀和为正数则累加，否则抛弃</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[i<span class=\"hljs-number\">-1</span>] + nums[i] &gt; nums[i] &#123;<br>\t\t\tnums[i] = nums[i<span class=\"hljs-number\">-1</span>] + nums[i]<br>\t\t&#125;<br>\t<br>\t\t<span class=\"hljs-keyword\">if</span> nums[i] &gt; ans &#123;<br>\t\t\tans = nums[i]<br>\t\t&#125;<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":268,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/maximum-subarray/\">leetcode</a></p>\n<p>思路：动态规划，前缀和。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxSubArray</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br><br>\tans := nums[<span class=\"hljs-number\">0</span>]<br>\t<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\t<span class=\"hljs-comment\">// 当前缀和为正数则累加，否则抛弃</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[i<span class=\"hljs-number\">-1</span>] + nums[i] &gt; nums[i] &#123;<br>\t\t\tnums[i] = nums[i<span class=\"hljs-number\">-1</span>] + nums[i]<br>\t\t&#125;<br>\t<br>\t\t<span class=\"hljs-keyword\">if</span> nums[i] &gt; ans &#123;<br>\t\t\tans = nums[i]<br>\t\t&#125;<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"518.零钱兑换 II","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n完全背包\n\n时间复杂度：O(amount x amount x N)\n空间复杂度：O(amount x N)\n\n```Go\nfunc change(amount int, coins []int) int {\n    dp := make([][]int, len(coins)+1)\n    dp[0] = make([]int, amount+1)\n    dp[0][0] = 1\n\n    for i := 1; i <= len(coins); i++ {\n        dp[i] = make([]int, amount+1)\n        coin := coins[i-1]\n        for j := 0; j <= amount; j++ {\n\t        for k := 0; k*coin <= j; k++ {\n\t\t\t    dp[i][j] += dp[i-1][j-k*coin]     \n\t        }\n        }\n    }\n\n    return dp[len(coins)][amount]\n}\n```\n\n\n\n完全背包一维优化，即动态规划\n\n时间复杂度：O(amount x N)\n空间复杂度：O(amount)\n\n```Go\nfunc change(amount int, coins []int) int {\n    dp := make([]int, amount+1)\n    dp[0] = 1\n\n    for i := 0; i < len(coins); i++ {\n        coin := coins[i]\n        for j := coin; j <= amount; j++ {\n            dp[j] += dp[j-coin]\n        }\n    }\n\n    return dp[amount]\n}\n```","source":"_posts/算法/leetcode/518.零钱兑换 II.md","raw":"---\ntitle: 518.零钱兑换 II\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n完全背包\n\n时间复杂度：O(amount x amount x N)\n空间复杂度：O(amount x N)\n\n```Go\nfunc change(amount int, coins []int) int {\n    dp := make([][]int, len(coins)+1)\n    dp[0] = make([]int, amount+1)\n    dp[0][0] = 1\n\n    for i := 1; i <= len(coins); i++ {\n        dp[i] = make([]int, amount+1)\n        coin := coins[i-1]\n        for j := 0; j <= amount; j++ {\n\t        for k := 0; k*coin <= j; k++ {\n\t\t\t    dp[i][j] += dp[i-1][j-k*coin]     \n\t        }\n        }\n    }\n\n    return dp[len(coins)][amount]\n}\n```\n\n\n\n完全背包一维优化，即动态规划\n\n时间复杂度：O(amount x N)\n空间复杂度：O(amount)\n\n```Go\nfunc change(amount int, coins []int) int {\n    dp := make([]int, amount+1)\n    dp[0] = 1\n\n    for i := 0; i < len(coins); i++ {\n        coin := coins[i]\n        for j := coin; j <= amount; j++ {\n            dp[j] += dp[j-coin]\n        }\n    }\n\n    return dp[amount]\n}\n```","slug":"leetcode/518.零钱兑换 II","published":1,"updated":"2022-10-29T18:01:36.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pg0020ca4lgdva2i43","content":"<p>完全背包</p>\n<p>时间复杂度：O(amount x amount x N)<br>空间复杂度：O(amount x N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(amount <span class=\"hljs-type\">int</span>, coins []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    dp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(coins)+<span class=\"hljs-number\">1</span>)<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, amount+<span class=\"hljs-number\">1</span>)<br>    dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">len</span>(coins); i++ &#123;<br>        dp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, amount+<span class=\"hljs-number\">1</span>)<br>        coin := coins[i<span class=\"hljs-number\">-1</span>]<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt;= amount; j++ &#123;<br>\t        <span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k*coin &lt;= j; k++ &#123;<br>\t\t\t    dp[i][j] += dp[i<span class=\"hljs-number\">-1</span>][j-k*coin]     <br>\t        &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-built_in\">len</span>(coins)][amount]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>完全背包一维优化，即动态规划</p>\n<p>时间复杂度：O(amount x N)<br>空间复杂度：O(amount)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(amount <span class=\"hljs-type\">int</span>, coins []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, amount+<span class=\"hljs-number\">1</span>)<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(coins); i++ &#123;<br>        coin := coins[i]<br>        <span class=\"hljs-keyword\">for</span> j := coin; j &lt;= amount; j++ &#123;<br>            dp[j] += dp[j-coin]<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> dp[amount]<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":658,"excerpt":"","more":"<p>完全背包</p>\n<p>时间复杂度：O(amount x amount x N)<br>空间复杂度：O(amount x N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(amount <span class=\"hljs-type\">int</span>, coins []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    dp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(coins)+<span class=\"hljs-number\">1</span>)<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, amount+<span class=\"hljs-number\">1</span>)<br>    dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">len</span>(coins); i++ &#123;<br>        dp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, amount+<span class=\"hljs-number\">1</span>)<br>        coin := coins[i<span class=\"hljs-number\">-1</span>]<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt;= amount; j++ &#123;<br>\t        <span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k*coin &lt;= j; k++ &#123;<br>\t\t\t    dp[i][j] += dp[i<span class=\"hljs-number\">-1</span>][j-k*coin]     <br>\t        &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-built_in\">len</span>(coins)][amount]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>完全背包一维优化，即动态规划</p>\n<p>时间复杂度：O(amount x N)<br>空间复杂度：O(amount)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(amount <span class=\"hljs-type\">int</span>, coins []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    dp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, amount+<span class=\"hljs-number\">1</span>)<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(coins); i++ &#123;<br>        coin := coins[i]<br>        <span class=\"hljs-keyword\">for</span> j := coin; j &lt;= amount; j++ &#123;<br>            dp[j] += dp[j-coin]<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> dp[amount]<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"547.省份数量","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n深度优先遍历\n\n找到未访问过的城市，深度优先遍历其所有能联通的城市，并标记为已访问。\n\n最后统计有几个联通量。\n\n时间复杂度：O(N^2)\n空间复杂度：O(N)\n\n```Go\nfunc findCircleNum(isConnected [][]int) int {\n    ans := 0\n    visited := make([]bool, len(isConnected))\n    var dfs func(int)\n\n    dfs = func(i int) {\n        if visited[i] {\n            return\n        }\n        visited[i] = true\n        for j, connected := range isConnected[i] {\n            if connected == 1 {\n                dfs(j)\n            }\n        }\n    }\n\n    for i := 0; i < len(isConnected); i++ {\n        if !visited[i] {\n            dfs(i)\n            ans++\n        }\n    }\n\n    return ans\n}\n```","source":"_posts/算法/leetcode/547.省份数量.md","raw":"---\ntitle: 547.省份数量\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n深度优先遍历\n\n找到未访问过的城市，深度优先遍历其所有能联通的城市，并标记为已访问。\n\n最后统计有几个联通量。\n\n时间复杂度：O(N^2)\n空间复杂度：O(N)\n\n```Go\nfunc findCircleNum(isConnected [][]int) int {\n    ans := 0\n    visited := make([]bool, len(isConnected))\n    var dfs func(int)\n\n    dfs = func(i int) {\n        if visited[i] {\n            return\n        }\n        visited[i] = true\n        for j, connected := range isConnected[i] {\n            if connected == 1 {\n                dfs(j)\n            }\n        }\n    }\n\n    for i := 0; i < len(isConnected); i++ {\n        if !visited[i] {\n            dfs(i)\n            ans++\n        }\n    }\n\n    return ans\n}\n```","slug":"leetcode/547.省份数量","published":1,"updated":"2022-10-29T18:01:42.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6ph0022ca4l2ik19nlo","content":"<p>深度优先遍历</p>\n<p>找到未访问过的城市，深度优先遍历其所有能联通的城市，并标记为已访问。</p>\n<p>最后统计有几个联通量。</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findCircleNum</span><span class=\"hljs-params\">(isConnected [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    ans := <span class=\"hljs-number\">0</span><br>    visited := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, <span class=\"hljs-built_in\">len</span>(isConnected))<br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>        <span class=\"hljs-keyword\">if</span> visited[i] &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br>        visited[i] = <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-keyword\">for</span> j, connected := <span class=\"hljs-keyword\">range</span> isConnected[i] &#123;<br>            <span class=\"hljs-keyword\">if</span> connected == <span class=\"hljs-number\">1</span> &#123;<br>                dfs(j)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(isConnected); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> !visited[i] &#123;<br>            dfs(i)<br>            ans++<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":467,"excerpt":"","more":"<p>深度优先遍历</p>\n<p>找到未访问过的城市，深度优先遍历其所有能联通的城市，并标记为已访问。</p>\n<p>最后统计有几个联通量。</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findCircleNum</span><span class=\"hljs-params\">(isConnected [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    ans := <span class=\"hljs-number\">0</span><br>    visited := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, <span class=\"hljs-built_in\">len</span>(isConnected))<br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>        <span class=\"hljs-keyword\">if</span> visited[i] &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br>        visited[i] = <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-keyword\">for</span> j, connected := <span class=\"hljs-keyword\">range</span> isConnected[i] &#123;<br>            <span class=\"hljs-keyword\">if</span> connected == <span class=\"hljs-number\">1</span> &#123;<br>                dfs(j)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(isConnected); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> !visited[i] &#123;<br>            dfs(i)<br>            ans++<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"56.合并区间","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n排序，然后逐一合并\n\n时间复杂度： O(NlogN)\n空间复杂的： O(logN)\n\n```Go\nfunc merge(intervals [][]int) [][]int {\n    sort.Slice(intervals, func(i, j int) bool {\n        if intervals[i][0] == intervals[j][0] {\n            return intervals[i][1] < intervals[j][1]\n        } else {\n            return intervals[i][0] < intervals[j][0]\n        }\n    })\n\n    ans := [][]int{}\n    \n    l, r := intervals[0][0], intervals[0][1]\n\n    for i := 1; i < len(intervals); i++ {\n        if intervals[i][0] <= r {\n            if (intervals[i][1] > r) {\n                r = intervals[i][1]\n            }\n            continue\n        }\n\n        ans = append(ans, []int{l, r})\n        l = intervals[i][0]\n        r = intervals[i][1]\n    }\n\n    ans = append(ans, []int{l, r})\n    \n    return ans\n}\n```","source":"_posts/算法/leetcode/56.合并区间.md","raw":"---\ntitle: 56.合并区间\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n排序，然后逐一合并\n\n时间复杂度： O(NlogN)\n空间复杂的： O(logN)\n\n```Go\nfunc merge(intervals [][]int) [][]int {\n    sort.Slice(intervals, func(i, j int) bool {\n        if intervals[i][0] == intervals[j][0] {\n            return intervals[i][1] < intervals[j][1]\n        } else {\n            return intervals[i][0] < intervals[j][0]\n        }\n    })\n\n    ans := [][]int{}\n    \n    l, r := intervals[0][0], intervals[0][1]\n\n    for i := 1; i < len(intervals); i++ {\n        if intervals[i][0] <= r {\n            if (intervals[i][1] > r) {\n                r = intervals[i][1]\n            }\n            continue\n        }\n\n        ans = append(ans, []int{l, r})\n        l = intervals[i][0]\n        r = intervals[i][1]\n    }\n\n    ans = append(ans, []int{l, r})\n    \n    return ans\n}\n```","slug":"leetcode/56.合并区间","published":1,"updated":"2022-10-29T17:56:28.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6ph0024ca4l7zb8c3t6","content":"<p>排序，然后逐一合并</p>\n<p>时间复杂度： O(NlogN)<br>空间复杂的： O(logN)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(intervals [][]<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>    sort.Slice(intervals, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> intervals[i][<span class=\"hljs-number\">0</span>] == intervals[j][<span class=\"hljs-number\">0</span>] &#123;<br>            <span class=\"hljs-keyword\">return</span> intervals[i][<span class=\"hljs-number\">1</span>] &lt; intervals[j][<span class=\"hljs-number\">1</span>]<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> intervals[i][<span class=\"hljs-number\">0</span>] &lt; intervals[j][<span class=\"hljs-number\">0</span>]<br>        &#125;<br>    &#125;)<br><br>    ans := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <br>    l, r := intervals[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>], intervals[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(intervals); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> intervals[i][<span class=\"hljs-number\">0</span>] &lt;= r &#123;<br>            <span class=\"hljs-keyword\">if</span> (intervals[i][<span class=\"hljs-number\">1</span>] &gt; r) &#123;<br>                r = intervals[i][<span class=\"hljs-number\">1</span>]<br>            &#125;<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        ans = <span class=\"hljs-built_in\">append</span>(ans, []<span class=\"hljs-type\">int</span>&#123;l, r&#125;)<br>        l = intervals[i][<span class=\"hljs-number\">0</span>]<br>        r = intervals[i][<span class=\"hljs-number\">1</span>]<br>    &#125;<br><br>    ans = <span class=\"hljs-built_in\">append</span>(ans, []<span class=\"hljs-type\">int</span>&#123;l, r&#125;)<br>    <br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":639,"excerpt":"","more":"<p>排序，然后逐一合并</p>\n<p>时间复杂度： O(NlogN)<br>空间复杂的： O(logN)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(intervals [][]<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>    sort.Slice(intervals, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> intervals[i][<span class=\"hljs-number\">0</span>] == intervals[j][<span class=\"hljs-number\">0</span>] &#123;<br>            <span class=\"hljs-keyword\">return</span> intervals[i][<span class=\"hljs-number\">1</span>] &lt; intervals[j][<span class=\"hljs-number\">1</span>]<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> intervals[i][<span class=\"hljs-number\">0</span>] &lt; intervals[j][<span class=\"hljs-number\">0</span>]<br>        &#125;<br>    &#125;)<br><br>    ans := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <br>    l, r := intervals[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>], intervals[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(intervals); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> intervals[i][<span class=\"hljs-number\">0</span>] &lt;= r &#123;<br>            <span class=\"hljs-keyword\">if</span> (intervals[i][<span class=\"hljs-number\">1</span>] &gt; r) &#123;<br>                r = intervals[i][<span class=\"hljs-number\">1</span>]<br>            &#125;<br>            <span class=\"hljs-keyword\">continue</span><br>        &#125;<br><br>        ans = <span class=\"hljs-built_in\">append</span>(ans, []<span class=\"hljs-type\">int</span>&#123;l, r&#125;)<br>        l = intervals[i][<span class=\"hljs-number\">0</span>]<br>        r = intervals[i][<span class=\"hljs-number\">1</span>]<br>    &#125;<br><br>    ans = <span class=\"hljs-built_in\">append</span>(ans, []<span class=\"hljs-type\">int</span>&#123;l, r&#125;)<br>    <br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"560. 和为 K 的子数组","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n前缀和+哈希\n\n滚动计算前缀和，同时查找哈希值中有符合前缀和之差等于k的前缀和的出现次数。\n\n最后累加哈希中前缀和的出现次数。\n\n时间复杂度：O(N)\n空间复杂度：O(N)\n\n```Go\nfunc subarraySum(nums []int, k int) int {\n    pre, ans := 0, 0\n    m := map[int]int{}\n    m[0] = 1\n\n    for i := 0; i < len(nums); i++ {\n        pre += nums[i]\n\n        if _, ok := m[pre-k]; ok {\n            ans += m[pre-k]\n        }\n        m[pre] += 1\n    }\n\n    return ans\n}\n```","source":"_posts/算法/leetcode/560. 和为 K 的子数组.md","raw":"---\ntitle: 560. 和为 K 的子数组\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n前缀和+哈希\n\n滚动计算前缀和，同时查找哈希值中有符合前缀和之差等于k的前缀和的出现次数。\n\n最后累加哈希中前缀和的出现次数。\n\n时间复杂度：O(N)\n空间复杂度：O(N)\n\n```Go\nfunc subarraySum(nums []int, k int) int {\n    pre, ans := 0, 0\n    m := map[int]int{}\n    m[0] = 1\n\n    for i := 0; i < len(nums); i++ {\n        pre += nums[i]\n\n        if _, ok := m[pre-k]; ok {\n            ans += m[pre-k]\n        }\n        m[pre] += 1\n    }\n\n    return ans\n}\n```","slug":"leetcode/560. 和为 K 的子数组","published":1,"updated":"2022-10-29T18:01:48.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6ph0026ca4lewild5ta","content":"<p>前缀和+哈希</p>\n<p>滚动计算前缀和，同时查找哈希值中有符合前缀和之差等于k的前缀和的出现次数。</p>\n<p>最后累加哈希中前缀和的出现次数。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">subarraySum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    pre, ans := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>    m := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    m[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>        pre += nums[i]<br><br>        <span class=\"hljs-keyword\">if</span> _, ok := m[pre-k]; ok &#123;<br>            ans += m[pre-k]<br>        &#125;<br>        m[pre] += <span class=\"hljs-number\">1</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":304,"excerpt":"","more":"<p>前缀和+哈希</p>\n<p>滚动计算前缀和，同时查找哈希值中有符合前缀和之差等于k的前缀和的出现次数。</p>\n<p>最后累加哈希中前缀和的出现次数。</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">subarraySum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    pre, ans := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>    m := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    m[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>        pre += nums[i]<br><br>        <span class=\"hljs-keyword\">if</span> _, ok := m[pre-k]; ok &#123;<br>            ans += m[pre-k]<br>        &#125;<br>        m[pre] += <span class=\"hljs-number\">1</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"673.最长递增子序列的个数","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n要注意统计个数的时候，dp相等时要把之前的数量累加上，dp大的时候则是直接继承之前的数量。\n\n时间复杂度： O(N^2)\n空间复杂度：O(N)\n\n```Go\nfunc findNumberOfLIS(nums []int) int {\n    n := len(nums)\n    dp := make([]int, n)\n    count := make([]int, n)\n    maxLength := 0\n    ans := 0\n\n    for i := 0; i < n; i++ {\n        dp[i] = 1\n        count[i] = 1\n\n        for j := 0; j < i; j++ {\n            if nums[i] > nums[j] {\n                if dp[j] + 1 == dp[i] {\n\t\t            // j位置的所有个数都要加上\n                    count[i] += count[j]\n                }\n                if dp[j] + 1 > dp[i] {\n                    dp[i] = dp[j] + 1\n                    // 针对j位置的每一种最长子序列都有一个对应的新序列\n                    count[i] = count[j]\n                }\n            }\n            \n        }\n\n\t\t// 所有最长的子序和都要考虑\n        if dp[i] == maxLength {\n            ans += count[i]\n        }\n        if dp[i] > maxLength {\n            maxLength = dp[i]\n            ans = count[i]\n        }\n    }\n\n    return ans\n}```","source":"_posts/算法/leetcode/673.最长递增子序列的个数.md","raw":"---\ntitle: 673.最长递增子序列的个数\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n要注意统计个数的时候，dp相等时要把之前的数量累加上，dp大的时候则是直接继承之前的数量。\n\n时间复杂度： O(N^2)\n空间复杂度：O(N)\n\n```Go\nfunc findNumberOfLIS(nums []int) int {\n    n := len(nums)\n    dp := make([]int, n)\n    count := make([]int, n)\n    maxLength := 0\n    ans := 0\n\n    for i := 0; i < n; i++ {\n        dp[i] = 1\n        count[i] = 1\n\n        for j := 0; j < i; j++ {\n            if nums[i] > nums[j] {\n                if dp[j] + 1 == dp[i] {\n\t\t            // j位置的所有个数都要加上\n                    count[i] += count[j]\n                }\n                if dp[j] + 1 > dp[i] {\n                    dp[i] = dp[j] + 1\n                    // 针对j位置的每一种最长子序列都有一个对应的新序列\n                    count[i] = count[j]\n                }\n            }\n            \n        }\n\n\t\t// 所有最长的子序和都要考虑\n        if dp[i] == maxLength {\n            ans += count[i]\n        }\n        if dp[i] > maxLength {\n            maxLength = dp[i]\n            ans = count[i]\n        }\n    }\n\n    return ans\n}```","slug":"leetcode/673.最长递增子序列的个数","published":1,"updated":"2022-10-29T18:01:53.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pi0028ca4ldg442x12","content":"<p>动态规划</p>\n<p>要注意统计个数的时候，dp相等时要把之前的数量累加上，dp大的时候则是直接继承之前的数量。</p>\n<p>时间复杂度： O(N^2)<br>空间复杂度：O(N)</p>\n<p>&#96;&#96;&#96;Go<br>func findNumberOfLIS(nums []int) int {<br>    n :&#x3D; len(nums)<br>    dp :&#x3D; make([]int, n)<br>    count :&#x3D; make([]int, n)<br>    maxLength :&#x3D; 0<br>    ans :&#x3D; 0</p>\n<pre><code class=\"hljs\">for i := 0; i &lt; n; i++ &#123;\n    dp[i] = 1\n    count[i] = 1\n\n    for j := 0; j &lt; i; j++ &#123;\n        if nums[i] &gt; nums[j] &#123;\n            if dp[j] + 1 == dp[i] &#123;\n                // j位置的所有个数都要加上\n                count[i] += count[j]\n            &#125;\n            if dp[j] + 1 &gt; dp[i] &#123;\n                dp[i] = dp[j] + 1\n                // 针对j位置的每一种最长子序列都有一个对应的新序列\n                count[i] = count[j]\n            &#125;\n        &#125;\n        \n    &#125;\n\n    // 所有最长的子序和都要考虑\n    if dp[i] == maxLength &#123;\n        ans += count[i]\n    &#125;\n    if dp[i] &gt; maxLength &#123;\n        maxLength = dp[i]\n        ans = count[i]\n    &#125;\n&#125;\n\nreturn ans\n</code></pre>\n<p>}&#96;&#96;&#96;</p>\n","site":{"data":{}},"wordcount":610,"excerpt":"","more":"<p>动态规划</p>\n<p>要注意统计个数的时候，dp相等时要把之前的数量累加上，dp大的时候则是直接继承之前的数量。</p>\n<p>时间复杂度： O(N^2)<br>空间复杂度：O(N)</p>\n<p>&#96;&#96;&#96;Go<br>func findNumberOfLIS(nums []int) int {<br>    n :&#x3D; len(nums)<br>    dp :&#x3D; make([]int, n)<br>    count :&#x3D; make([]int, n)<br>    maxLength :&#x3D; 0<br>    ans :&#x3D; 0</p>\n<pre><code>for i := 0; i &lt; n; i++ &#123;\n    dp[i] = 1\n    count[i] = 1\n\n    for j := 0; j &lt; i; j++ &#123;\n        if nums[i] &gt; nums[j] &#123;\n            if dp[j] + 1 == dp[i] &#123;\n                // j位置的所有个数都要加上\n                count[i] += count[j]\n            &#125;\n            if dp[j] + 1 &gt; dp[i] &#123;\n                dp[i] = dp[j] + 1\n                // 针对j位置的每一种最长子序列都有一个对应的新序列\n                count[i] = count[j]\n            &#125;\n        &#125;\n        \n    &#125;\n\n    // 所有最长的子序和都要考虑\n    if dp[i] == maxLength &#123;\n        ans += count[i]\n    &#125;\n    if dp[i] &gt; maxLength &#123;\n        maxLength = dp[i]\n        ans = count[i]\n    &#125;\n&#125;\n\nreturn ans\n</code></pre>\n<p>}&#96;&#96;&#96;</p>\n"},{"title":"684.冗余链接","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/redundant-connection/)\n\n使用并查集方法，维护联通分量数组，检验每条边的两个节点，如果已经联通了，则当前边导致成环，为冗余链接。\n\n时间复杂度：\n空间复杂度：O(n)\n\n```Go\nfunc findRedundantConnection(edges [][]int) []int {\n    group := make([]int, len(edges) + 1)\n    for i := 0; i < len(edges) + 1; i++ {\n       group[i] = i\n    }\n\n    var find func(i int) int\n\n    // 查找真正的联通分量\n    find = func(i int) int {\n        if group[i] == i {\n            return i\n        }\n\n        return find(group[i])\n    }\n\n    // 合并两个联通分量，返回这个两个联通分量是否本来就联通了\n    union := func(from int, to int) bool {\n        from = find(from)\n        to = find(to)\n\n        if from == to {\n            return true\n        }\n\n        group[to] = from\n        return false\n    }\n\n    for _, edge := range edges {\n        // 联通分量事先已经联通则表示有环\n        if union(edge[0], edge[1]) {\n            return edge\n        }\n    }\n\n    return []int{}\n}\n```","source":"_posts/算法/leetcode/684.冗余链接.md","raw":"---\ntitle: 684.冗余链接\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/redundant-connection/)\n\n使用并查集方法，维护联通分量数组，检验每条边的两个节点，如果已经联通了，则当前边导致成环，为冗余链接。\n\n时间复杂度：\n空间复杂度：O(n)\n\n```Go\nfunc findRedundantConnection(edges [][]int) []int {\n    group := make([]int, len(edges) + 1)\n    for i := 0; i < len(edges) + 1; i++ {\n       group[i] = i\n    }\n\n    var find func(i int) int\n\n    // 查找真正的联通分量\n    find = func(i int) int {\n        if group[i] == i {\n            return i\n        }\n\n        return find(group[i])\n    }\n\n    // 合并两个联通分量，返回这个两个联通分量是否本来就联通了\n    union := func(from int, to int) bool {\n        from = find(from)\n        to = find(to)\n\n        if from == to {\n            return true\n        }\n\n        group[to] = from\n        return false\n    }\n\n    for _, edge := range edges {\n        // 联通分量事先已经联通则表示有环\n        if union(edge[0], edge[1]) {\n            return edge\n        }\n    }\n\n    return []int{}\n}\n```","slug":"leetcode/684.冗余链接","published":1,"updated":"2022-10-29T18:01:58.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pj002aca4l5rw5c926","content":"<p><a href=\"https://leetcode.cn/problems/redundant-connection/\">leetcode</a></p>\n<p>使用并查集方法，维护联通分量数组，检验每条边的两个节点，如果已经联通了，则当前边导致成环，为冗余链接。</p>\n<p>时间复杂度：<br>空间复杂度：O(n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findRedundantConnection</span><span class=\"hljs-params\">(edges [][]<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    group := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(edges) + <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(edges) + <span class=\"hljs-number\">1</span>; i++ &#123;<br>       group[i] = i<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> find <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span><br><br>    <span class=\"hljs-comment\">// 查找真正的联通分量</span><br>    find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> group[i] == i &#123;<br>            <span class=\"hljs-keyword\">return</span> i<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> find(group[i])<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 合并两个联通分量，返回这个两个联通分量是否本来就联通了</span><br>    union := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(from <span class=\"hljs-type\">int</span>, to <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>        from = find(from)<br>        to = find(to)<br><br>        <span class=\"hljs-keyword\">if</span> from == to &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>        &#125;<br><br>        group[to] = from<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> _, edge := <span class=\"hljs-keyword\">range</span> edges &#123;<br>        <span class=\"hljs-comment\">// 联通分量事先已经联通则表示有环</span><br>        <span class=\"hljs-keyword\">if</span> union(edge[<span class=\"hljs-number\">0</span>], edge[<span class=\"hljs-number\">1</span>]) &#123;<br>            <span class=\"hljs-keyword\">return</span> edge<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":670,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/redundant-connection/\">leetcode</a></p>\n<p>使用并查集方法，维护联通分量数组，检验每条边的两个节点，如果已经联通了，则当前边导致成环，为冗余链接。</p>\n<p>时间复杂度：<br>空间复杂度：O(n)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findRedundantConnection</span><span class=\"hljs-params\">(edges [][]<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    group := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(edges) + <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(edges) + <span class=\"hljs-number\">1</span>; i++ &#123;<br>       group[i] = i<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> find <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span><br><br>    <span class=\"hljs-comment\">// 查找真正的联通分量</span><br>    find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> group[i] == i &#123;<br>            <span class=\"hljs-keyword\">return</span> i<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> find(group[i])<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 合并两个联通分量，返回这个两个联通分量是否本来就联通了</span><br>    union := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(from <span class=\"hljs-type\">int</span>, to <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>        from = find(from)<br>        to = find(to)<br><br>        <span class=\"hljs-keyword\">if</span> from == to &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>        &#125;<br><br>        group[to] = from<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> _, edge := <span class=\"hljs-keyword\">range</span> edges &#123;<br>        <span class=\"hljs-comment\">// 联通分量事先已经联通则表示有环</span><br>        <span class=\"hljs-keyword\">if</span> union(edge[<span class=\"hljs-number\">0</span>], edge[<span class=\"hljs-number\">1</span>]) &#123;<br>            <span class=\"hljs-keyword\">return</span> edge<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"685.冗余链接2","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/redundant-connection-ii/)\n\n建立出边邻接表，节点入度数组。\n\n因为需要返回最后的一个可以去除的边，故倒序删除边，删除后满足树的条件则表明该边为要找的冗余边。\n\n为树的条件：\n\n1. 有且只有一个入度大于0的点（防止成环）\n2. 且最长路径的步数和节点数相等（防止有独立的多块不联通的图）\n\n```Go\nfunc findRedundantDirectedConnection(edges [][]int) []int {\n\tto := make(map[int][]int)\n\tdegrees := make([]int, len(edges)+1)\n\n\tfor _, edge := range edges {\n\t\tto[edge[0]] = append(to[edge[0]], edge[1])\n\t\tdegrees[edge[1]]++\n\t}\n\n\t// fmt.Printf(\"to: %v\\n\", to)\n\t// fmt.Printf(\"degress: %v\\n\", degrees)\n\n\tvalid := func() bool {\n\t\tvar root int\n\t\tfor i := 1; i < len(degrees); i++ {\n\t\t\tif degrees[i] == 0 {\n\t\t\t\troot = i\n\t\t\t}\n\n\t\t\t// 有入度大于0的点，表示有环\n\t\t\tif degrees[i] > 1 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\t// 没有入度为0的点，表示有环\n\t\tif root == 0 {\n\t\t\treturn false\n\t\t}\n\n\t\tseen := []int{}\n\n\t\tvar bfs func(int)\n\n\t\tbfs = func(root int) {\n\t\t\tseen = append(seen, root)\n\t\t\tfor _, c := range to[root] {\n\t\t\t\tbfs(c)\n\t\t\t}\n\t\t}\n\n\t\tbfs(root)\n\n\t\treturn len(seen) == len(edges)\n\t}\n\n\t// 倒序删除边\n\tfor i := len(edges) - 1; i >= 0; i-- {\n\t\tedge := edges[i]\n\t\tfor j, t := range to[edge[0]] {\n\t\t\tif t == edge[1] {\n\t\t\t\tto[edge[0]] = append(to[edge[0]][:j], to[edge[0]][j+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tdegrees[edge[1]]--\n\t\tif valid() {\n\t\t\treturn edges[i]\n\t\t}\n\n\t\t// 还原\n\t\tto[edge[0]] = append(to[edge[0]], edge[1])\n\t\tdegrees[edge[1]]++\n\t}\n\n\treturn []int{}\n}\n```","source":"_posts/算法/leetcode/685.冗余链接2.md","raw":"---\ntitle: 685.冗余链接2\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/redundant-connection-ii/)\n\n建立出边邻接表，节点入度数组。\n\n因为需要返回最后的一个可以去除的边，故倒序删除边，删除后满足树的条件则表明该边为要找的冗余边。\n\n为树的条件：\n\n1. 有且只有一个入度大于0的点（防止成环）\n2. 且最长路径的步数和节点数相等（防止有独立的多块不联通的图）\n\n```Go\nfunc findRedundantDirectedConnection(edges [][]int) []int {\n\tto := make(map[int][]int)\n\tdegrees := make([]int, len(edges)+1)\n\n\tfor _, edge := range edges {\n\t\tto[edge[0]] = append(to[edge[0]], edge[1])\n\t\tdegrees[edge[1]]++\n\t}\n\n\t// fmt.Printf(\"to: %v\\n\", to)\n\t// fmt.Printf(\"degress: %v\\n\", degrees)\n\n\tvalid := func() bool {\n\t\tvar root int\n\t\tfor i := 1; i < len(degrees); i++ {\n\t\t\tif degrees[i] == 0 {\n\t\t\t\troot = i\n\t\t\t}\n\n\t\t\t// 有入度大于0的点，表示有环\n\t\t\tif degrees[i] > 1 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\t// 没有入度为0的点，表示有环\n\t\tif root == 0 {\n\t\t\treturn false\n\t\t}\n\n\t\tseen := []int{}\n\n\t\tvar bfs func(int)\n\n\t\tbfs = func(root int) {\n\t\t\tseen = append(seen, root)\n\t\t\tfor _, c := range to[root] {\n\t\t\t\tbfs(c)\n\t\t\t}\n\t\t}\n\n\t\tbfs(root)\n\n\t\treturn len(seen) == len(edges)\n\t}\n\n\t// 倒序删除边\n\tfor i := len(edges) - 1; i >= 0; i-- {\n\t\tedge := edges[i]\n\t\tfor j, t := range to[edge[0]] {\n\t\t\tif t == edge[1] {\n\t\t\t\tto[edge[0]] = append(to[edge[0]][:j], to[edge[0]][j+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tdegrees[edge[1]]--\n\t\tif valid() {\n\t\t\treturn edges[i]\n\t\t}\n\n\t\t// 还原\n\t\tto[edge[0]] = append(to[edge[0]], edge[1])\n\t\tdegrees[edge[1]]++\n\t}\n\n\treturn []int{}\n}\n```","slug":"leetcode/685.冗余链接2","published":1,"updated":"2022-10-29T18:02:05.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pl002cca4l8hndhogx","content":"<p><a href=\"https://leetcode.cn/problems/redundant-connection-ii/\">leetcode</a></p>\n<p>建立出边邻接表，节点入度数组。</p>\n<p>因为需要返回最后的一个可以去除的边，故倒序删除边，删除后满足树的条件则表明该边为要找的冗余边。</p>\n<p>为树的条件：</p>\n<ol>\n<li>有且只有一个入度大于0的点（防止成环）</li>\n<li>且最长路径的步数和节点数相等（防止有独立的多块不联通的图）</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findRedundantDirectedConnection</span><span class=\"hljs-params\">(edges [][]<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tto := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>)<br>\tdegrees := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(edges)+<span class=\"hljs-number\">1</span>)<br><br>\t<span class=\"hljs-keyword\">for</span> _, edge := <span class=\"hljs-keyword\">range</span> edges &#123;<br>\t\tto[edge[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(to[edge[<span class=\"hljs-number\">0</span>]], edge[<span class=\"hljs-number\">1</span>])<br>\t\tdegrees[edge[<span class=\"hljs-number\">1</span>]]++<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// fmt.Printf(&quot;to: %v\\n&quot;, to)</span><br>\t<span class=\"hljs-comment\">// fmt.Printf(&quot;degress: %v\\n&quot;, degrees)</span><br><br>\tvalid := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t\t<span class=\"hljs-keyword\">var</span> root <span class=\"hljs-type\">int</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(degrees); i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> degrees[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\troot = i<br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-comment\">// 有入度大于0的点，表示有环</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> degrees[i] &gt; <span class=\"hljs-number\">1</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-comment\">// 没有入度为0的点，表示有环</span><br>\t\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br><br>\t\tseen := []<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>\t\t<span class=\"hljs-keyword\">var</span> bfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br><br>\t\tbfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(root <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t\tseen = <span class=\"hljs-built_in\">append</span>(seen, root)<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> to[root] &#123;<br>\t\t\t\tbfs(c)<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\tbfs(root)<br><br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(seen) == <span class=\"hljs-built_in\">len</span>(edges)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 倒序删除边</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-built_in\">len</span>(edges) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;<br>\t\tedge := edges[i]<br>\t\t<span class=\"hljs-keyword\">for</span> j, t := <span class=\"hljs-keyword\">range</span> to[edge[<span class=\"hljs-number\">0</span>]] &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> t == edge[<span class=\"hljs-number\">1</span>] &#123;<br>\t\t\t\tto[edge[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(to[edge[<span class=\"hljs-number\">0</span>]][:j], to[edge[<span class=\"hljs-number\">0</span>]][j+<span class=\"hljs-number\">1</span>:]...)<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tdegrees[edge[<span class=\"hljs-number\">1</span>]]--<br>\t\t<span class=\"hljs-keyword\">if</span> valid() &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> edges[i]<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-comment\">// 还原</span><br>\t\tto[edge[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(to[edge[<span class=\"hljs-number\">0</span>]], edge[<span class=\"hljs-number\">1</span>])<br>\t\tdegrees[edge[<span class=\"hljs-number\">1</span>]]++<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1243,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/redundant-connection-ii/\">leetcode</a></p>\n<p>建立出边邻接表，节点入度数组。</p>\n<p>因为需要返回最后的一个可以去除的边，故倒序删除边，删除后满足树的条件则表明该边为要找的冗余边。</p>\n<p>为树的条件：</p>\n<ol>\n<li>有且只有一个入度大于0的点（防止成环）</li>\n<li>且最长路径的步数和节点数相等（防止有独立的多块不联通的图）</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findRedundantDirectedConnection</span><span class=\"hljs-params\">(edges [][]<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tto := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>)<br>\tdegrees := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(edges)+<span class=\"hljs-number\">1</span>)<br><br>\t<span class=\"hljs-keyword\">for</span> _, edge := <span class=\"hljs-keyword\">range</span> edges &#123;<br>\t\tto[edge[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(to[edge[<span class=\"hljs-number\">0</span>]], edge[<span class=\"hljs-number\">1</span>])<br>\t\tdegrees[edge[<span class=\"hljs-number\">1</span>]]++<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// fmt.Printf(&quot;to: %v\\n&quot;, to)</span><br>\t<span class=\"hljs-comment\">// fmt.Printf(&quot;degress: %v\\n&quot;, degrees)</span><br><br>\tvalid := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t\t<span class=\"hljs-keyword\">var</span> root <span class=\"hljs-type\">int</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(degrees); i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> degrees[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\troot = i<br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-comment\">// 有入度大于0的点，表示有环</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> degrees[i] &gt; <span class=\"hljs-number\">1</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-comment\">// 没有入度为0的点，表示有环</span><br>\t\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br><br>\t\tseen := []<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>\t\t<span class=\"hljs-keyword\">var</span> bfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br><br>\t\tbfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(root <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t\tseen = <span class=\"hljs-built_in\">append</span>(seen, root)<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> to[root] &#123;<br>\t\t\t\tbfs(c)<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\tbfs(root)<br><br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(seen) == <span class=\"hljs-built_in\">len</span>(edges)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 倒序删除边</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-built_in\">len</span>(edges) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;<br>\t\tedge := edges[i]<br>\t\t<span class=\"hljs-keyword\">for</span> j, t := <span class=\"hljs-keyword\">range</span> to[edge[<span class=\"hljs-number\">0</span>]] &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> t == edge[<span class=\"hljs-number\">1</span>] &#123;<br>\t\t\t\tto[edge[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(to[edge[<span class=\"hljs-number\">0</span>]][:j], to[edge[<span class=\"hljs-number\">0</span>]][j+<span class=\"hljs-number\">1</span>:]...)<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tdegrees[edge[<span class=\"hljs-number\">1</span>]]--<br>\t\t<span class=\"hljs-keyword\">if</span> valid() &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> edges[i]<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-comment\">// 还原</span><br>\t\tto[edge[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(to[edge[<span class=\"hljs-number\">0</span>]], edge[<span class=\"hljs-number\">1</span>])<br>\t\tdegrees[edge[<span class=\"hljs-number\">1</span>]]++<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"704.二分查找","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n二分查找标准模板\n\n时间复杂度：O(logn)\n空间复杂度：O(1)\n\n```Go\nfunc search(nums []int, target int) int {\n    left, right := 0, len(nums) -1\n\n    for left < right {\n        mid := (left + right) / 2\n\t\t// 找到第一个大于等于target的数\n        if nums[mid] >= target {\n\t        right = mid\n        }else{\n            left = mid + 1\n        }\n    }\n\n\t// 这个数等于target则返回下标\n    if nums[right] == target {\n        return right\n    }\n    \n    return -1\n}\n```","source":"_posts/算法/leetcode/704.二分查找.md","raw":"---\ntitle: 704.二分查找\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n二分查找标准模板\n\n时间复杂度：O(logn)\n空间复杂度：O(1)\n\n```Go\nfunc search(nums []int, target int) int {\n    left, right := 0, len(nums) -1\n\n    for left < right {\n        mid := (left + right) / 2\n\t\t// 找到第一个大于等于target的数\n        if nums[mid] >= target {\n\t        right = mid\n        }else{\n            left = mid + 1\n        }\n    }\n\n\t// 这个数等于target则返回下标\n    if nums[right] == target {\n        return right\n    }\n    \n    return -1\n}\n```","slug":"leetcode/704.二分查找","published":1,"updated":"2022-10-29T18:02:15.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pm002eca4lfvcxhl61","content":"<p>二分查找标准模板</p>\n<p>时间复杂度：O(logn)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    left, right := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) <span class=\"hljs-number\">-1</span><br><br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        mid := (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-comment\">// 找到第一个大于等于target的数</span><br>        <span class=\"hljs-keyword\">if</span> nums[mid] &gt;= target &#123;<br>\t        right = mid<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 这个数等于target则返回下标</span><br>    <span class=\"hljs-keyword\">if</span> nums[right] == target &#123;<br>        <span class=\"hljs-keyword\">return</span> right<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":338,"excerpt":"","more":"<p>二分查找标准模板</p>\n<p>时间复杂度：O(logn)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    left, right := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) <span class=\"hljs-number\">-1</span><br><br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        mid := (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-comment\">// 找到第一个大于等于target的数</span><br>        <span class=\"hljs-keyword\">if</span> nums[mid] &gt;= target &#123;<br>\t        right = mid<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 这个数等于target则返回下标</span><br>    <span class=\"hljs-keyword\">if</span> nums[right] == target &#123;<br>        <span class=\"hljs-keyword\">return</span> right<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"699. 掉落的方块","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n```Go\ntype Box struct {\n    Left int\n    Right int\n    Height int\n}\n\nfunc fallingSquares(positions [][]int) []int {\n    boxes := []Box{}\n    ans := []int{}\n    max := 0\n\n    for _, p := range positions {\n        left := p[0]\n        right := p[0] + p[1]\n        height := p[1]\n        bottom := 0\n\n        for _, b := range boxes {\n            if !(left >= b.Right || right <= b.Left) && bottom < b.Height {\n                bottom = b.Height\n            }\n        }\n\n        height += bottom\n        if height > max {\n            ans = append(ans, height)\n            max = height\n        } else {\n            ans = append(ans, max)\n        }\n\n        boxes = append(boxes, Box{Left: left, Right: right, Height: height})\n    }\n\n\n    return ans\n}\n```","source":"_posts/算法/leetcode/699. 掉落的方块.md","raw":"---\ntitle: 699. 掉落的方块\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n```Go\ntype Box struct {\n    Left int\n    Right int\n    Height int\n}\n\nfunc fallingSquares(positions [][]int) []int {\n    boxes := []Box{}\n    ans := []int{}\n    max := 0\n\n    for _, p := range positions {\n        left := p[0]\n        right := p[0] + p[1]\n        height := p[1]\n        bottom := 0\n\n        for _, b := range boxes {\n            if !(left >= b.Right || right <= b.Left) && bottom < b.Height {\n                bottom = b.Height\n            }\n        }\n\n        height += bottom\n        if height > max {\n            ans = append(ans, height)\n            max = height\n        } else {\n            ans = append(ans, max)\n        }\n\n        boxes = append(boxes, Box{Left: left, Right: right, Height: height})\n    }\n\n\n    return ans\n}\n```","slug":"leetcode/699. 掉落的方块","published":1,"updated":"2022-10-29T18:02:09.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pm002gca4lfigu6bec","content":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">type</span> Box <span class=\"hljs-keyword\">struct</span> &#123;<br>    Left <span class=\"hljs-type\">int</span><br>    Right <span class=\"hljs-type\">int</span><br>    Height <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fallingSquares</span><span class=\"hljs-params\">(positions [][]<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    boxes := []Box&#123;&#125;<br>    ans := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    max := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">for</span> _, p := <span class=\"hljs-keyword\">range</span> positions &#123;<br>        left := p[<span class=\"hljs-number\">0</span>]<br>        right := p[<span class=\"hljs-number\">0</span>] + p[<span class=\"hljs-number\">1</span>]<br>        height := p[<span class=\"hljs-number\">1</span>]<br>        bottom := <span class=\"hljs-number\">0</span><br><br>        <span class=\"hljs-keyword\">for</span> _, b := <span class=\"hljs-keyword\">range</span> boxes &#123;<br>            <span class=\"hljs-keyword\">if</span> !(left &gt;= b.Right || right &lt;= b.Left) &amp;&amp; bottom &lt; b.Height &#123;<br>                bottom = b.Height<br>            &#125;<br>        &#125;<br><br>        height += bottom<br>        <span class=\"hljs-keyword\">if</span> height &gt; max &#123;<br>            ans = <span class=\"hljs-built_in\">append</span>(ans, height)<br>            max = height<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ans = <span class=\"hljs-built_in\">append</span>(ans, max)<br>        &#125;<br><br>        boxes = <span class=\"hljs-built_in\">append</span>(boxes, Box&#123;Left: left, Right: right, Height: height&#125;)<br>    &#125;<br><br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":611,"excerpt":"","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-keyword\">type</span> Box <span class=\"hljs-keyword\">struct</span> &#123;<br>    Left <span class=\"hljs-type\">int</span><br>    Right <span class=\"hljs-type\">int</span><br>    Height <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fallingSquares</span><span class=\"hljs-params\">(positions [][]<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    boxes := []Box&#123;&#125;<br>    ans := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    max := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">for</span> _, p := <span class=\"hljs-keyword\">range</span> positions &#123;<br>        left := p[<span class=\"hljs-number\">0</span>]<br>        right := p[<span class=\"hljs-number\">0</span>] + p[<span class=\"hljs-number\">1</span>]<br>        height := p[<span class=\"hljs-number\">1</span>]<br>        bottom := <span class=\"hljs-number\">0</span><br><br>        <span class=\"hljs-keyword\">for</span> _, b := <span class=\"hljs-keyword\">range</span> boxes &#123;<br>            <span class=\"hljs-keyword\">if</span> !(left &gt;= b.Right || right &lt;= b.Left) &amp;&amp; bottom &lt; b.Height &#123;<br>                bottom = b.Height<br>            &#125;<br>        &#125;<br><br>        height += bottom<br>        <span class=\"hljs-keyword\">if</span> height &gt; max &#123;<br>            ans = <span class=\"hljs-built_in\">append</span>(ans, height)<br>            max = height<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ans = <span class=\"hljs-built_in\">append</span>(ans, max)<br>        &#125;<br><br>        boxes = <span class=\"hljs-built_in\">append</span>(boxes, Box&#123;Left: left, Right: right, Height: height&#125;)<br>    &#125;<br><br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"72.编辑距离","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n动态规划\n\n`f[i][j]` 记录 `word1[1..i]` 到 `word2[1..j]` 的最短编辑距离。则考虑三种情况：\n\n1. word1插入一个字符和word2相等：`f[i][j-1] + 1`\n2. word1删除一个字符和word2相等： `f[i-1][j] + 1`\n3. word1替换一个字符和word2相等：`f[i-1]f[j-1] + eq` 。其中eq考虑两种状态，如果word1要替换的这个字符和word2的最后一个字符相等，则表示不需要替换已经相等，eq等0，否则eq等于1\n\n时间复杂度： O(MN)\n空间复杂度： O(MN)\n\n```Go\nfunc minDistance(word1 string, word2 string) int {\n    // f[i][j] = min(f[i][j-1]+1, f[i-1][j]+1, f[i-1][j-1] + eq)\n\n    m := len(word1)\n    n := len(word2)\n    f := make([][]int, m+1)\n\n    for i := 0; i <= m; i++ {\n        f[i] = make([]int, n+1)\n        for j := 0; j <= n; j ++ {\n            if i == 0 {\n                f[i][j] = j\n                continue\n            }\n\n            if j == 0 {\n                f[i][j] = i\n                continue\n            }\n\n            temp := min(f[i][j-1] + 1, f[i-1][j] + 1)\n\n            eq := 1\n            if word1[i-1] == word2[j-1] {\n                eq = 0\n            }\n            temp = min(temp, f[i-1][j-1]+eq)\n\n            // fmt.Printf(\"f[%v][%v]: %v\\n\", i, j, temp)\n\n            f[i][j] = temp\n        }\n    }\n\n    return f[m][n]\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```","source":"_posts/算法/leetcode/72.编辑距离.md","raw":"---\ntitle: 72.编辑距离\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n动态规划\n\n`f[i][j]` 记录 `word1[1..i]` 到 `word2[1..j]` 的最短编辑距离。则考虑三种情况：\n\n1. word1插入一个字符和word2相等：`f[i][j-1] + 1`\n2. word1删除一个字符和word2相等： `f[i-1][j] + 1`\n3. word1替换一个字符和word2相等：`f[i-1]f[j-1] + eq` 。其中eq考虑两种状态，如果word1要替换的这个字符和word2的最后一个字符相等，则表示不需要替换已经相等，eq等0，否则eq等于1\n\n时间复杂度： O(MN)\n空间复杂度： O(MN)\n\n```Go\nfunc minDistance(word1 string, word2 string) int {\n    // f[i][j] = min(f[i][j-1]+1, f[i-1][j]+1, f[i-1][j-1] + eq)\n\n    m := len(word1)\n    n := len(word2)\n    f := make([][]int, m+1)\n\n    for i := 0; i <= m; i++ {\n        f[i] = make([]int, n+1)\n        for j := 0; j <= n; j ++ {\n            if i == 0 {\n                f[i][j] = j\n                continue\n            }\n\n            if j == 0 {\n                f[i][j] = i\n                continue\n            }\n\n            temp := min(f[i][j-1] + 1, f[i-1][j] + 1)\n\n            eq := 1\n            if word1[i-1] == word2[j-1] {\n                eq = 0\n            }\n            temp = min(temp, f[i-1][j-1]+eq)\n\n            // fmt.Printf(\"f[%v][%v]: %v\\n\", i, j, temp)\n\n            f[i][j] = temp\n        }\n    }\n\n    return f[m][n]\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```","slug":"leetcode/72.编辑距离","published":1,"updated":"2022-10-29T17:58:45.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pn002ica4l5889cnbr","content":"<p>动态规划</p>\n<p><code>f[i][j]</code> 记录 <code>word1[1..i]</code> 到 <code>word2[1..j]</code> 的最短编辑距离。则考虑三种情况：</p>\n<ol>\n<li>word1插入一个字符和word2相等：<code>f[i][j-1] + 1</code></li>\n<li>word1删除一个字符和word2相等： <code>f[i-1][j] + 1</code></li>\n<li>word1替换一个字符和word2相等：<code>f[i-1]f[j-1] + eq</code> 。其中eq考虑两种状态，如果word1要替换的这个字符和word2的最后一个字符相等，则表示不需要替换已经相等，eq等0，否则eq等于1</li>\n</ol>\n<p>时间复杂度： O(MN)<br>空间复杂度： O(MN)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDistance</span><span class=\"hljs-params\">(word1 <span class=\"hljs-type\">string</span>, word2 <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// f[i][j] = min(f[i][j-1]+1, f[i-1][j]+1, f[i-1][j-1] + eq)</span><br><br>    m := <span class=\"hljs-built_in\">len</span>(word1)<br>    n := <span class=\"hljs-built_in\">len</span>(word2)<br>    f := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, m+<span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= m; i++ &#123;<br>        f[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n+<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt;= n; j ++ &#123;<br>            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> &#123;<br>                f[i][j] = j<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-number\">0</span> &#123;<br>                f[i][j] = i<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            temp := min(f[i][j<span class=\"hljs-number\">-1</span>] + <span class=\"hljs-number\">1</span>, f[i<span class=\"hljs-number\">-1</span>][j] + <span class=\"hljs-number\">1</span>)<br><br>            eq := <span class=\"hljs-number\">1</span><br>            <span class=\"hljs-keyword\">if</span> word1[i<span class=\"hljs-number\">-1</span>] == word2[j<span class=\"hljs-number\">-1</span>] &#123;<br>                eq = <span class=\"hljs-number\">0</span><br>            &#125;<br>            temp = min(temp, f[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]+eq)<br><br>            <span class=\"hljs-comment\">// fmt.Printf(&quot;f[%v][%v]: %v\\n&quot;, i, j, temp)</span><br><br>            f[i][j] = temp<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> f[m][n]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":868,"excerpt":"","more":"<p>动态规划</p>\n<p><code>f[i][j]</code> 记录 <code>word1[1..i]</code> 到 <code>word2[1..j]</code> 的最短编辑距离。则考虑三种情况：</p>\n<ol>\n<li>word1插入一个字符和word2相等：<code>f[i][j-1] + 1</code></li>\n<li>word1删除一个字符和word2相等： <code>f[i-1][j] + 1</code></li>\n<li>word1替换一个字符和word2相等：<code>f[i-1]f[j-1] + eq</code> 。其中eq考虑两种状态，如果word1要替换的这个字符和word2的最后一个字符相等，则表示不需要替换已经相等，eq等0，否则eq等于1</li>\n</ol>\n<p>时间复杂度： O(MN)<br>空间复杂度： O(MN)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDistance</span><span class=\"hljs-params\">(word1 <span class=\"hljs-type\">string</span>, word2 <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// f[i][j] = min(f[i][j-1]+1, f[i-1][j]+1, f[i-1][j-1] + eq)</span><br><br>    m := <span class=\"hljs-built_in\">len</span>(word1)<br>    n := <span class=\"hljs-built_in\">len</span>(word2)<br>    f := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, m+<span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= m; i++ &#123;<br>        f[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n+<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt;= n; j ++ &#123;<br>            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> &#123;<br>                f[i][j] = j<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-number\">0</span> &#123;<br>                f[i][j] = i<br>                <span class=\"hljs-keyword\">continue</span><br>            &#125;<br><br>            temp := min(f[i][j<span class=\"hljs-number\">-1</span>] + <span class=\"hljs-number\">1</span>, f[i<span class=\"hljs-number\">-1</span>][j] + <span class=\"hljs-number\">1</span>)<br><br>            eq := <span class=\"hljs-number\">1</span><br>            <span class=\"hljs-keyword\">if</span> word1[i<span class=\"hljs-number\">-1</span>] == word2[j<span class=\"hljs-number\">-1</span>] &#123;<br>                eq = <span class=\"hljs-number\">0</span><br>            &#125;<br>            temp = min(temp, f[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]+eq)<br><br>            <span class=\"hljs-comment\">// fmt.Printf(&quot;f[%v][%v]: %v\\n&quot;, i, j, temp)</span><br><br>            f[i][j] = temp<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> f[m][n]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"721.账户合并","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n并查集\n\n注意使用Hashmap来存储邮箱和父节点邮箱。\n\n时间复杂度： O(NlogN)\n空间复杂度： O(N)\n\n```Go\nfunc accountsMerge(accounts [][]string) [][]string {\n\n    ans := [][]string{}\n    email_to_name := make(map[string]string)\n    emails_list := make(map[string]string)\n\n\t// 查找\n    var find func(string) string\n    find = func(email string) string{\n        if emails_list[email] == email {\n            return email\n        }\n\n        emails_list[email] = find(emails_list[email])\n        return emails_list[email]\n    }\n\n\t// 合并\n    union := func(email1 string,  email2 string) {\n        e1 := find(email1)\n        e2 := find(email2)\n\n        // fmt.Printf(\"union: %v, %v\\n\", email1, email2)\n        emails_list[e1] = e2\n    }\n    \n    for _, account := range accounts {\n        name := account[0]\n        emails := account[1:]\n\n        for i, email := range emails {\n            if i == 0 {\n                email_to_name[email] = name\n            }\n            // 没出现过的邮箱关联父节点到当前账号的首个邮箱\n            if _, ok := emails_list[email]; !ok {\n                emails_list[email] = emails[0]\n            } else {\n            // 出现过的邮箱则把当前账号和出现过的账号合并\n                union(emails[0], email)\n            }\n        }\n    }\n\n    group := make(map[string][]string)\n    for email, fa := range emails_list {\n\t    // 获取邮箱的真实父节点邮箱\n        fa = find(fa)\n        if _, ok := group[fa]; ok {\n            group[fa] = append(group[fa], email)\n        } else {\n            group[fa] = []string{email}\n        }\n    }\n\n    for fa, emails := range group {\n        sort.Strings(emails)\n        ans = append(ans, append([]string{email_to_name[fa]}, emails...))\n    }\n\n    // fmt.Printf(\"group: %v\", group)\n    \n\n    return ans\n}\n```","source":"_posts/算法/leetcode/721.账户合并.md","raw":"---\ntitle: 721.账户合并\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n并查集\n\n注意使用Hashmap来存储邮箱和父节点邮箱。\n\n时间复杂度： O(NlogN)\n空间复杂度： O(N)\n\n```Go\nfunc accountsMerge(accounts [][]string) [][]string {\n\n    ans := [][]string{}\n    email_to_name := make(map[string]string)\n    emails_list := make(map[string]string)\n\n\t// 查找\n    var find func(string) string\n    find = func(email string) string{\n        if emails_list[email] == email {\n            return email\n        }\n\n        emails_list[email] = find(emails_list[email])\n        return emails_list[email]\n    }\n\n\t// 合并\n    union := func(email1 string,  email2 string) {\n        e1 := find(email1)\n        e2 := find(email2)\n\n        // fmt.Printf(\"union: %v, %v\\n\", email1, email2)\n        emails_list[e1] = e2\n    }\n    \n    for _, account := range accounts {\n        name := account[0]\n        emails := account[1:]\n\n        for i, email := range emails {\n            if i == 0 {\n                email_to_name[email] = name\n            }\n            // 没出现过的邮箱关联父节点到当前账号的首个邮箱\n            if _, ok := emails_list[email]; !ok {\n                emails_list[email] = emails[0]\n            } else {\n            // 出现过的邮箱则把当前账号和出现过的账号合并\n                union(emails[0], email)\n            }\n        }\n    }\n\n    group := make(map[string][]string)\n    for email, fa := range emails_list {\n\t    // 获取邮箱的真实父节点邮箱\n        fa = find(fa)\n        if _, ok := group[fa]; ok {\n            group[fa] = append(group[fa], email)\n        } else {\n            group[fa] = []string{email}\n        }\n    }\n\n    for fa, emails := range group {\n        sort.Strings(emails)\n        ans = append(ans, append([]string{email_to_name[fa]}, emails...))\n    }\n\n    // fmt.Printf(\"group: %v\", group)\n    \n\n    return ans\n}\n```","slug":"leetcode/721.账户合并","published":1,"updated":"2022-10-29T18:02:26.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pn002kca4l9rocaxf4","content":"<p>并查集</p>\n<p>注意使用Hashmap来存储邮箱和父节点邮箱。</p>\n<p>时间复杂度： O(NlogN)<br>空间复杂度： O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">accountsMerge</span><span class=\"hljs-params\">(accounts [][]<span class=\"hljs-type\">string</span>)</span></span> [][]<span class=\"hljs-type\">string</span> &#123;<br><br>    ans := [][]<span class=\"hljs-type\">string</span>&#123;&#125;<br>    email_to_name := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br>    emails_list := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br><br>\t<span class=\"hljs-comment\">// 查找</span><br>    <span class=\"hljs-keyword\">var</span> find <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span><br>    find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(email <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span>&#123;<br>        <span class=\"hljs-keyword\">if</span> emails_list[email] == email &#123;<br>            <span class=\"hljs-keyword\">return</span> email<br>        &#125;<br><br>        emails_list[email] = find(emails_list[email])<br>        <span class=\"hljs-keyword\">return</span> emails_list[email]<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 合并</span><br>    union := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(email1 <span class=\"hljs-type\">string</span>,  email2 <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>        e1 := find(email1)<br>        e2 := find(email2)<br><br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;union: %v, %v\\n&quot;, email1, email2)</span><br>        emails_list[e1] = e2<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">for</span> _, account := <span class=\"hljs-keyword\">range</span> accounts &#123;<br>        name := account[<span class=\"hljs-number\">0</span>]<br>        emails := account[<span class=\"hljs-number\">1</span>:]<br><br>        <span class=\"hljs-keyword\">for</span> i, email := <span class=\"hljs-keyword\">range</span> emails &#123;<br>            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> &#123;<br>                email_to_name[email] = name<br>            &#125;<br>            <span class=\"hljs-comment\">// 没出现过的邮箱关联父节点到当前账号的首个邮箱</span><br>            <span class=\"hljs-keyword\">if</span> _, ok := emails_list[email]; !ok &#123;<br>                emails_list[email] = emails[<span class=\"hljs-number\">0</span>]<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 出现过的邮箱则把当前账号和出现过的账号合并</span><br>                union(emails[<span class=\"hljs-number\">0</span>], email)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    group := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span>)<br>    <span class=\"hljs-keyword\">for</span> email, fa := <span class=\"hljs-keyword\">range</span> emails_list &#123;<br>\t    <span class=\"hljs-comment\">// 获取邮箱的真实父节点邮箱</span><br>        fa = find(fa)<br>        <span class=\"hljs-keyword\">if</span> _, ok := group[fa]; ok &#123;<br>            group[fa] = <span class=\"hljs-built_in\">append</span>(group[fa], email)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            group[fa] = []<span class=\"hljs-type\">string</span>&#123;email&#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> fa, emails := <span class=\"hljs-keyword\">range</span> group &#123;<br>        sort.Strings(emails)<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">string</span>&#123;email_to_name[fa]&#125;, emails...))<br>    &#125;<br><br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;group: %v&quot;, group)</span><br>    <br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1371,"excerpt":"","more":"<p>并查集</p>\n<p>注意使用Hashmap来存储邮箱和父节点邮箱。</p>\n<p>时间复杂度： O(NlogN)<br>空间复杂度： O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">accountsMerge</span><span class=\"hljs-params\">(accounts [][]<span class=\"hljs-type\">string</span>)</span></span> [][]<span class=\"hljs-type\">string</span> &#123;<br><br>    ans := [][]<span class=\"hljs-type\">string</span>&#123;&#125;<br>    email_to_name := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br>    emails_list := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br><br>\t<span class=\"hljs-comment\">// 查找</span><br>    <span class=\"hljs-keyword\">var</span> find <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span><br>    find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(email <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span>&#123;<br>        <span class=\"hljs-keyword\">if</span> emails_list[email] == email &#123;<br>            <span class=\"hljs-keyword\">return</span> email<br>        &#125;<br><br>        emails_list[email] = find(emails_list[email])<br>        <span class=\"hljs-keyword\">return</span> emails_list[email]<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 合并</span><br>    union := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(email1 <span class=\"hljs-type\">string</span>,  email2 <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>        e1 := find(email1)<br>        e2 := find(email2)<br><br>        <span class=\"hljs-comment\">// fmt.Printf(&quot;union: %v, %v\\n&quot;, email1, email2)</span><br>        emails_list[e1] = e2<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">for</span> _, account := <span class=\"hljs-keyword\">range</span> accounts &#123;<br>        name := account[<span class=\"hljs-number\">0</span>]<br>        emails := account[<span class=\"hljs-number\">1</span>:]<br><br>        <span class=\"hljs-keyword\">for</span> i, email := <span class=\"hljs-keyword\">range</span> emails &#123;<br>            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> &#123;<br>                email_to_name[email] = name<br>            &#125;<br>            <span class=\"hljs-comment\">// 没出现过的邮箱关联父节点到当前账号的首个邮箱</span><br>            <span class=\"hljs-keyword\">if</span> _, ok := emails_list[email]; !ok &#123;<br>                emails_list[email] = emails[<span class=\"hljs-number\">0</span>]<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 出现过的邮箱则把当前账号和出现过的账号合并</span><br>                union(emails[<span class=\"hljs-number\">0</span>], email)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    group := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span>)<br>    <span class=\"hljs-keyword\">for</span> email, fa := <span class=\"hljs-keyword\">range</span> emails_list &#123;<br>\t    <span class=\"hljs-comment\">// 获取邮箱的真实父节点邮箱</span><br>        fa = find(fa)<br>        <span class=\"hljs-keyword\">if</span> _, ok := group[fa]; ok &#123;<br>            group[fa] = <span class=\"hljs-built_in\">append</span>(group[fa], email)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            group[fa] = []<span class=\"hljs-type\">string</span>&#123;email&#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> fa, emails := <span class=\"hljs-keyword\">range</span> group &#123;<br>        sort.Strings(emails)<br>        ans = <span class=\"hljs-built_in\">append</span>(ans, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">string</span>&#123;email_to_name[fa]&#125;, emails...))<br>    &#125;<br><br>    <span class=\"hljs-comment\">// fmt.Printf(&quot;group: %v&quot;, group)</span><br>    <br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"743. 网络延迟","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\nBellman-Ford算法\n\n最多遍历N-1轮所有边，得到最短或者最长路径。\n\n时间复杂度：O(N^2)\n空间复杂度：O(N)\n\n```Go\nfunc networkDelayTime(times [][]int, n int, k int) int {\n    dist := make([]int, n+1)\n    const inf = math.MaxInt / 2\n\n    for i, _ := range dist {\n        if i == k {\n            dist[i] = 0\n        } else {\n            dist[i] = inf\n        }\n    }\n\n    fmt.Println(dist)\n    for j := 1; j < n; j++ {\n        flag := false\n        for i := 0; i < len(times); i++ {\n            x := times[i][0]\n            y := times[i][1]\n            z := times[i][2]\n\n            if dist[y] > dist[x] + z {\n                // fmt.Printf(\"x: %v, y: %v, z: %v\\n\", x, y, z)\n                dist[y] = dist[x] + z\n                // fmt.Printf(\"dist[x]: %v, dist[y]: %v\\n\",dist[x], dist[y])\n                flag = true\n            }\n        }\n        if !flag {\n            break\n        }\n    }\n\n    ans := 0\n\n    for i := 1; i < len(dist); i++ {\n        if dist[i] == inf {\n            return -1\n        }\n\n        if ans < dist[i] {\n            ans = dist[i]\n        }\n    }\n\n    return ans\n}\n```","source":"_posts/算法/leetcode/743. 网络延迟.md","raw":"---\ntitle: 743. 网络延迟\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\nBellman-Ford算法\n\n最多遍历N-1轮所有边，得到最短或者最长路径。\n\n时间复杂度：O(N^2)\n空间复杂度：O(N)\n\n```Go\nfunc networkDelayTime(times [][]int, n int, k int) int {\n    dist := make([]int, n+1)\n    const inf = math.MaxInt / 2\n\n    for i, _ := range dist {\n        if i == k {\n            dist[i] = 0\n        } else {\n            dist[i] = inf\n        }\n    }\n\n    fmt.Println(dist)\n    for j := 1; j < n; j++ {\n        flag := false\n        for i := 0; i < len(times); i++ {\n            x := times[i][0]\n            y := times[i][1]\n            z := times[i][2]\n\n            if dist[y] > dist[x] + z {\n                // fmt.Printf(\"x: %v, y: %v, z: %v\\n\", x, y, z)\n                dist[y] = dist[x] + z\n                // fmt.Printf(\"dist[x]: %v, dist[y]: %v\\n\",dist[x], dist[y])\n                flag = true\n            }\n        }\n        if !flag {\n            break\n        }\n    }\n\n    ans := 0\n\n    for i := 1; i < len(dist); i++ {\n        if dist[i] == inf {\n            return -1\n        }\n\n        if ans < dist[i] {\n            ans = dist[i]\n        }\n    }\n\n    return ans\n}\n```","slug":"leetcode/743. 网络延迟","published":1,"updated":"2022-10-29T18:02:32.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6po002mca4l7mep135k","content":"<p>Bellman-Ford算法</p>\n<p>最多遍历N-1轮所有边，得到最短或者最长路径。</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">networkDelayTime</span><span class=\"hljs-params\">(times [][]<span class=\"hljs-type\">int</span>, n <span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    dist := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n+<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">const</span> inf = math.MaxInt / <span class=\"hljs-number\">2</span><br><br>    <span class=\"hljs-keyword\">for</span> i, _ := <span class=\"hljs-keyword\">range</span> dist &#123;<br>        <span class=\"hljs-keyword\">if</span> i == k &#123;<br>            dist[i] = <span class=\"hljs-number\">0</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            dist[i] = inf<br>        &#125;<br>    &#125;<br><br>    fmt.Println(dist)<br>    <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; n; j++ &#123;<br>        flag := <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(times); i++ &#123;<br>            x := times[i][<span class=\"hljs-number\">0</span>]<br>            y := times[i][<span class=\"hljs-number\">1</span>]<br>            z := times[i][<span class=\"hljs-number\">2</span>]<br><br>            <span class=\"hljs-keyword\">if</span> dist[y] &gt; dist[x] + z &#123;<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;x: %v, y: %v, z: %v\\n&quot;, x, y, z)</span><br>                dist[y] = dist[x] + z<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;dist[x]: %v, dist[y]: %v\\n&quot;,dist[x], dist[y])</span><br>                flag = <span class=\"hljs-literal\">true</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> !flag &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>    &#125;<br><br>    ans := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(dist); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> dist[i] == inf &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> ans &lt; dist[i] &#123;<br>            ans = dist[i]<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":789,"excerpt":"","more":"<p>Bellman-Ford算法</p>\n<p>最多遍历N-1轮所有边，得到最短或者最长路径。</p>\n<p>时间复杂度：O(N^2)<br>空间复杂度：O(N)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">networkDelayTime</span><span class=\"hljs-params\">(times [][]<span class=\"hljs-type\">int</span>, n <span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    dist := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n+<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">const</span> inf = math.MaxInt / <span class=\"hljs-number\">2</span><br><br>    <span class=\"hljs-keyword\">for</span> i, _ := <span class=\"hljs-keyword\">range</span> dist &#123;<br>        <span class=\"hljs-keyword\">if</span> i == k &#123;<br>            dist[i] = <span class=\"hljs-number\">0</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            dist[i] = inf<br>        &#125;<br>    &#125;<br><br>    fmt.Println(dist)<br>    <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; n; j++ &#123;<br>        flag := <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(times); i++ &#123;<br>            x := times[i][<span class=\"hljs-number\">0</span>]<br>            y := times[i][<span class=\"hljs-number\">1</span>]<br>            z := times[i][<span class=\"hljs-number\">2</span>]<br><br>            <span class=\"hljs-keyword\">if</span> dist[y] &gt; dist[x] + z &#123;<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;x: %v, y: %v, z: %v\\n&quot;, x, y, z)</span><br>                dist[y] = dist[x] + z<br>                <span class=\"hljs-comment\">// fmt.Printf(&quot;dist[x]: %v, dist[y]: %v\\n&quot;,dist[x], dist[y])</span><br>                flag = <span class=\"hljs-literal\">true</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> !flag &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>    &#125;<br><br>    ans := <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(dist); i++ &#123;<br>        <span class=\"hljs-keyword\">if</span> dist[i] == inf &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> ans &lt; dist[i] &#123;<br>            ans = dist[i]<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"77.组合","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode-cn.com/problems/combinations/)\n\n递归实现：\n\n```Go\nfunc combine(n int, k int) [][]int {\n    curr := []int{}\n    result := [][]int{}\n\n    var dfs func(int)\n    dfs = func(i int) {\n\t    //如果剩下的数都取，还不够k，就剪枝\n        if len(curr) + n - i + 1 < k {\n            return\n        }\n\n        if len(curr) == k {\n            result = append(result, append([]int{}, curr...))\n            return\n        }\n\n        curr = append(curr, i)\n        dfs(i + 1)\n\n        curr = curr[:len(curr) - 1]\n        dfs(i + 1)\n    }\n\n    dfs(1)\n    return result\n}\n```\n\n","source":"_posts/算法/leetcode/77.组合.md","raw":"---\ntitle: 77.组合\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode-cn.com/problems/combinations/)\n\n递归实现：\n\n```Go\nfunc combine(n int, k int) [][]int {\n    curr := []int{}\n    result := [][]int{}\n\n    var dfs func(int)\n    dfs = func(i int) {\n\t    //如果剩下的数都取，还不够k，就剪枝\n        if len(curr) + n - i + 1 < k {\n            return\n        }\n\n        if len(curr) == k {\n            result = append(result, append([]int{}, curr...))\n            return\n        }\n\n        curr = append(curr, i)\n        dfs(i + 1)\n\n        curr = curr[:len(curr) - 1]\n        dfs(i + 1)\n    }\n\n    dfs(1)\n    return result\n}\n```\n\n","slug":"leetcode/77.组合","published":1,"updated":"2022-10-29T17:58:50.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6po002oca4levtwb788","content":"<p><a href=\"https://leetcode-cn.com/problems/combinations/\">leetcode</a></p>\n<p>递归实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combine</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>    curr := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    result := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t    <span class=\"hljs-comment\">//如果剩下的数都取，还不够k，就剪枝</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(curr) + n - i + <span class=\"hljs-number\">1</span> &lt; k &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(curr) == k &#123;<br>            result = <span class=\"hljs-built_in\">append</span>(result, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, curr...))<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        curr = <span class=\"hljs-built_in\">append</span>(curr, i)<br>        dfs(i + <span class=\"hljs-number\">1</span>)<br><br>        curr = curr[:<span class=\"hljs-built_in\">len</span>(curr) - <span class=\"hljs-number\">1</span>]<br>        dfs(i + <span class=\"hljs-number\">1</span>)<br>    &#125;<br><br>    dfs(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":410,"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/combinations/\">leetcode</a></p>\n<p>递归实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combine</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>    curr := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    result := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t    <span class=\"hljs-comment\">//如果剩下的数都取，还不够k，就剪枝</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(curr) + n - i + <span class=\"hljs-number\">1</span> &lt; k &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(curr) == k &#123;<br>            result = <span class=\"hljs-built_in\">append</span>(result, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, curr...))<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        curr = <span class=\"hljs-built_in\">append</span>(curr, i)<br>        dfs(i + <span class=\"hljs-number\">1</span>)<br><br>        curr = curr[:<span class=\"hljs-built_in\">len</span>(curr) - <span class=\"hljs-number\">1</span>]<br>        dfs(i + <span class=\"hljs-number\">1</span>)<br>    &#125;<br><br>    dfs(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"78.子集","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/subsets/)\n\n递归来枚举子集\n\n```Go\nfunc subsets(nums []int) [][]int {\n    result := [][]int{}\n    curr := []int{}\n\n    var dfs func(int)\n    dfs = func(i int){\n        if i >= len(nums) {\n\t        // 合并到答案的时候新开变量\n            result = append(result, append([]int{}, curr...))\n            return\n        }\n\n        curr = append(curr, nums[i])\n        dfs(i + 1)\n        curr = curr[:len(curr)-1]\n        dfs(i + 1)\n    }\n\n    dfs(0)\n\n    return result\n}\n```","source":"_posts/算法/leetcode/78.子集.md","raw":"---\ntitle: 78.子集\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/subsets/)\n\n递归来枚举子集\n\n```Go\nfunc subsets(nums []int) [][]int {\n    result := [][]int{}\n    curr := []int{}\n\n    var dfs func(int)\n    dfs = func(i int){\n        if i >= len(nums) {\n\t        // 合并到答案的时候新开变量\n            result = append(result, append([]int{}, curr...))\n            return\n        }\n\n        curr = append(curr, nums[i])\n        dfs(i + 1)\n        curr = curr[:len(curr)-1]\n        dfs(i + 1)\n    }\n\n    dfs(0)\n\n    return result\n}\n```","slug":"leetcode/78.子集","published":1,"updated":"2022-10-29T17:58:56.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pp002qca4l8xbt3mis","content":"<p><a href=\"https://leetcode.cn/problems/subsets/\">leetcode</a></p>\n<p>递归来枚举子集</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">subsets</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>    result := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    curr := []<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span>&#123;<br>        <span class=\"hljs-keyword\">if</span> i &gt;= <span class=\"hljs-built_in\">len</span>(nums) &#123;<br>\t        <span class=\"hljs-comment\">// 合并到答案的时候新开变量</span><br>            result = <span class=\"hljs-built_in\">append</span>(result, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, curr...))<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        curr = <span class=\"hljs-built_in\">append</span>(curr, nums[i])<br>        dfs(i + <span class=\"hljs-number\">1</span>)<br>        curr = curr[:<span class=\"hljs-built_in\">len</span>(curr)<span class=\"hljs-number\">-1</span>]<br>        dfs(i + <span class=\"hljs-number\">1</span>)<br>    &#125;<br><br>    dfs(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":368,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/subsets/\">leetcode</a></p>\n<p>递归来枚举子集</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">subsets</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>    result := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    curr := []<span class=\"hljs-type\">int</span>&#123;&#125;<br><br>    <span class=\"hljs-keyword\">var</span> dfs <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span><br>    dfs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int</span>)</span></span>&#123;<br>        <span class=\"hljs-keyword\">if</span> i &gt;= <span class=\"hljs-built_in\">len</span>(nums) &#123;<br>\t        <span class=\"hljs-comment\">// 合并到答案的时候新开变量</span><br>            result = <span class=\"hljs-built_in\">append</span>(result, <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;&#125;, curr...))<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br><br>        curr = <span class=\"hljs-built_in\">append</span>(curr, nums[i])<br>        dfs(i + <span class=\"hljs-number\">1</span>)<br>        curr = curr[:<span class=\"hljs-built_in\">len</span>(curr)<span class=\"hljs-number\">-1</span>]<br>        dfs(i + <span class=\"hljs-number\">1</span>)<br>    &#125;<br><br>    dfs(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"8.字符串转换整数 (atoi)","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n自动机\n\n时间复杂度：O(N)\n空间复杂度：O(1)\n\n```Go\nfunc myAtoi(s string) int {\n\t// start signed number end\n\tconst MinInt32, MaxInt32 = -1 << 31, 1<<31 - 1\n\tstates := map[string][]string{\n\t\t\"start\":  {\"start\", \"signed\", \"number\", \"end\"},\n\t\t\"signed\": {\"end\", \"end\", \"number\", \"end\"},\n\t\t\"number\": {\"end\", \"end\", \"number\", \"end\"},\n\t\t\"end\":    {\"end\", \"end\", \"end\", \"end\"},\n\t}\n\n\tstate := \"start\"\n\tans := 0\n\tsign := 1\n\n\tfor i := 0; i < len(s); i++ {\n\t\tindex := get_state(s, i)\n        curr := states[state][index]\n\n\t\t//fmt.Printf(\"state: %v\\n\", state)\n\t\t//fmt.Printf(\"curr: %v\\n\", curr)\n\t\tswitch curr {\n\t\tcase \"end\":\n\t\t\t//fmt.Printf(\"ans: %v\\n\", ans)\n\t\t\t//fmt.Printf(\"sign: %v\\n\", sign)\n\t\t\treturn ans * sign\n\t\tcase \"number\":\n\t\t\tans = ans*10 + int(s[i]) - 48\n\t\t\tif ans * sign >= MaxInt32 {\n\t\t\t\treturn MaxInt32\n\t\t\t}\n\t\t\tif ans * sign <= MinInt32 {\n\t\t\t\treturn MinInt32\n\t\t\t}\n\t\tcase \"signed\":\n\t\t\tif s[i] == '-' {\n\t\t\t\tsign = -1\n\t\t\t}\n\t\t}\n\n        state = curr\n\n\t}\n\n\treturn ans * sign\n}\n\nfunc get_state(s string, i int) int {\n\tswitch {\n\tcase s[i] == ' ':\n\t\treturn 0\n\tcase s[i] == '+' || s[i] == '-':\n\t\treturn 1\n\tcase s[i] >= '0' && s[i] <= '9':\n\t\treturn 2\n\t}\n\treturn 3\n}\n```","source":"_posts/算法/leetcode/8.字符串转换整数 (atoi).md","raw":"---\ntitle: 8.字符串转换整数 (atoi)\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n自动机\n\n时间复杂度：O(N)\n空间复杂度：O(1)\n\n```Go\nfunc myAtoi(s string) int {\n\t// start signed number end\n\tconst MinInt32, MaxInt32 = -1 << 31, 1<<31 - 1\n\tstates := map[string][]string{\n\t\t\"start\":  {\"start\", \"signed\", \"number\", \"end\"},\n\t\t\"signed\": {\"end\", \"end\", \"number\", \"end\"},\n\t\t\"number\": {\"end\", \"end\", \"number\", \"end\"},\n\t\t\"end\":    {\"end\", \"end\", \"end\", \"end\"},\n\t}\n\n\tstate := \"start\"\n\tans := 0\n\tsign := 1\n\n\tfor i := 0; i < len(s); i++ {\n\t\tindex := get_state(s, i)\n        curr := states[state][index]\n\n\t\t//fmt.Printf(\"state: %v\\n\", state)\n\t\t//fmt.Printf(\"curr: %v\\n\", curr)\n\t\tswitch curr {\n\t\tcase \"end\":\n\t\t\t//fmt.Printf(\"ans: %v\\n\", ans)\n\t\t\t//fmt.Printf(\"sign: %v\\n\", sign)\n\t\t\treturn ans * sign\n\t\tcase \"number\":\n\t\t\tans = ans*10 + int(s[i]) - 48\n\t\t\tif ans * sign >= MaxInt32 {\n\t\t\t\treturn MaxInt32\n\t\t\t}\n\t\t\tif ans * sign <= MinInt32 {\n\t\t\t\treturn MinInt32\n\t\t\t}\n\t\tcase \"signed\":\n\t\t\tif s[i] == '-' {\n\t\t\t\tsign = -1\n\t\t\t}\n\t\t}\n\n        state = curr\n\n\t}\n\n\treturn ans * sign\n}\n\nfunc get_state(s string, i int) int {\n\tswitch {\n\tcase s[i] == ' ':\n\t\treturn 0\n\tcase s[i] == '+' || s[i] == '-':\n\t\treturn 1\n\tcase s[i] >= '0' && s[i] <= '9':\n\t\treturn 2\n\t}\n\treturn 3\n}\n```","slug":"leetcode/8.字符串转换整数 (atoi)","published":1,"updated":"2022-10-29T17:54:54.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pp002sca4l54ol6tw3","content":"<p>自动机</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myAtoi</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// start signed number end</span><br>\t<span class=\"hljs-keyword\">const</span> MinInt32, MaxInt32 = <span class=\"hljs-number\">-1</span> &lt;&lt; <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">31</span> - <span class=\"hljs-number\">1</span><br>\tstates := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span>&#123;<br>\t\t<span class=\"hljs-string\">&quot;start&quot;</span>:  &#123;<span class=\"hljs-string\">&quot;start&quot;</span>, <span class=\"hljs-string\">&quot;signed&quot;</span>, <span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>&#125;,<br>\t\t<span class=\"hljs-string\">&quot;signed&quot;</span>: &#123;<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>&#125;,<br>\t\t<span class=\"hljs-string\">&quot;number&quot;</span>: &#123;<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>&#125;,<br>\t\t<span class=\"hljs-string\">&quot;end&quot;</span>:    &#123;<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>&#125;,<br>\t&#125;<br><br>\tstate := <span class=\"hljs-string\">&quot;start&quot;</span><br>\tans := <span class=\"hljs-number\">0</span><br>\tsign := <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\tindex := get_state(s, i)<br>        curr := states[state][index]<br><br>\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;state: %v\\n&quot;, state)</span><br>\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;curr: %v\\n&quot;, curr)</span><br>\t\t<span class=\"hljs-keyword\">switch</span> curr &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;end&quot;</span>:<br>\t\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;ans: %v\\n&quot;, ans)</span><br>\t\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;sign: %v\\n&quot;, sign)</span><br>\t\t\t<span class=\"hljs-keyword\">return</span> ans * sign<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;number&quot;</span>:<br>\t\t\tans = ans*<span class=\"hljs-number\">10</span> + <span class=\"hljs-type\">int</span>(s[i]) - <span class=\"hljs-number\">48</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> ans * sign &gt;= MaxInt32 &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> MaxInt32<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> ans * sign &lt;= MinInt32 &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> MinInt32<br>\t\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;signed&quot;</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">&#x27;-&#x27;</span> &#123;<br>\t\t\t\tsign = <span class=\"hljs-number\">-1</span><br>\t\t\t&#125;<br>\t\t&#125;<br><br>        state = curr<br><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> ans * sign<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">get_state</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>, i <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">switch</span> &#123;<br>\t<span class=\"hljs-keyword\">case</span> s[i] == <span class=\"hljs-string\">&#x27; &#x27;</span>:<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">case</span> s[i] == <span class=\"hljs-string\">&#x27;+&#x27;</span> || s[i] == <span class=\"hljs-string\">&#x27;-&#x27;</span>:<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">case</span> s[i] &gt;= <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"hljs-string\">&#x27;9&#x27;</span>:<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1443,"excerpt":"","more":"<p>自动机</p>\n<p>时间复杂度：O(N)<br>空间复杂度：O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myAtoi</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// start signed number end</span><br>\t<span class=\"hljs-keyword\">const</span> MinInt32, MaxInt32 = <span class=\"hljs-number\">-1</span> &lt;&lt; <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">31</span> - <span class=\"hljs-number\">1</span><br>\tstates := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span>&#123;<br>\t\t<span class=\"hljs-string\">&quot;start&quot;</span>:  &#123;<span class=\"hljs-string\">&quot;start&quot;</span>, <span class=\"hljs-string\">&quot;signed&quot;</span>, <span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>&#125;,<br>\t\t<span class=\"hljs-string\">&quot;signed&quot;</span>: &#123;<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>&#125;,<br>\t\t<span class=\"hljs-string\">&quot;number&quot;</span>: &#123;<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>&#125;,<br>\t\t<span class=\"hljs-string\">&quot;end&quot;</span>:    &#123;<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-string\">&quot;end&quot;</span>&#125;,<br>\t&#125;<br><br>\tstate := <span class=\"hljs-string\">&quot;start&quot;</span><br>\tans := <span class=\"hljs-number\">0</span><br>\tsign := <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\tindex := get_state(s, i)<br>        curr := states[state][index]<br><br>\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;state: %v\\n&quot;, state)</span><br>\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;curr: %v\\n&quot;, curr)</span><br>\t\t<span class=\"hljs-keyword\">switch</span> curr &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;end&quot;</span>:<br>\t\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;ans: %v\\n&quot;, ans)</span><br>\t\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;sign: %v\\n&quot;, sign)</span><br>\t\t\t<span class=\"hljs-keyword\">return</span> ans * sign<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;number&quot;</span>:<br>\t\t\tans = ans*<span class=\"hljs-number\">10</span> + <span class=\"hljs-type\">int</span>(s[i]) - <span class=\"hljs-number\">48</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> ans * sign &gt;= MaxInt32 &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> MaxInt32<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> ans * sign &lt;= MinInt32 &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> MinInt32<br>\t\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;signed&quot;</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">&#x27;-&#x27;</span> &#123;<br>\t\t\t\tsign = <span class=\"hljs-number\">-1</span><br>\t\t\t&#125;<br>\t\t&#125;<br><br>        state = curr<br><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> ans * sign<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">get_state</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>, i <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">switch</span> &#123;<br>\t<span class=\"hljs-keyword\">case</span> s[i] == <span class=\"hljs-string\">&#x27; &#x27;</span>:<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">case</span> s[i] == <span class=\"hljs-string\">&#x27;+&#x27;</span> || s[i] == <span class=\"hljs-string\">&#x27;-&#x27;</span>:<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">case</span> s[i] &gt;= <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"hljs-string\">&#x27;9&#x27;</span>:<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"918.环形子数组的最大和","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n分为两种情况，最大子数组在中间和最大子数组分散在两边。\n\n通过计算最大子数组和和最小子数组和来求解。\n\n时间复杂度：O(N)\n空间复杂度： O(1)\n\n\n```Go\nfunc maxSubarraySumCircular(nums []int) int {\n    total := nums[0]\n    currMax := nums[0]\n    currMin := nums[0]\n    sumMax := nums[0]\n    sumMin := nums[0]\n\n   for i := 1; i < len(nums); i++ {\n        total += nums[i]\n        currMax = max(currMax+nums[i], nums[i])\n        sumMax  = max(sumMax, currMax)\n        currMin = min(currMin+nums[i], nums[i])\n        sumMin  = min(sumMin, currMin)\n    }\n\n\t// 特殊情况，值全为负数，最大和就是空数组，不符合题意，要特殊处理\n    if sumMin == total {\n        return sumMax\n    } else {\n        return max(total-sumMin, sumMax)\n    }\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```","source":"_posts/算法/leetcode/918.环形子数组的最大和.md","raw":"---\ntitle: 918.环形子数组的最大和\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n分为两种情况，最大子数组在中间和最大子数组分散在两边。\n\n通过计算最大子数组和和最小子数组和来求解。\n\n时间复杂度：O(N)\n空间复杂度： O(1)\n\n\n```Go\nfunc maxSubarraySumCircular(nums []int) int {\n    total := nums[0]\n    currMax := nums[0]\n    currMin := nums[0]\n    sumMax := nums[0]\n    sumMin := nums[0]\n\n   for i := 1; i < len(nums); i++ {\n        total += nums[i]\n        currMax = max(currMax+nums[i], nums[i])\n        sumMax  = max(sumMax, currMax)\n        currMin = min(currMin+nums[i], nums[i])\n        sumMin  = min(sumMin, currMin)\n    }\n\n\t// 特殊情况，值全为负数，最大和就是空数组，不符合题意，要特殊处理\n    if sumMin == total {\n        return sumMax\n    } else {\n        return max(total-sumMin, sumMax)\n    }\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```","slug":"leetcode/918.环形子数组的最大和","published":1,"updated":"2022-10-29T18:02:39.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pq002uca4l78va3q2e","content":"<p>分为两种情况，最大子数组在中间和最大子数组分散在两边。</p>\n<p>通过计算最大子数组和和最小子数组和来求解。</p>\n<p>时间复杂度：O(N)<br>空间复杂度： O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxSubarraySumCircular</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    total := nums[<span class=\"hljs-number\">0</span>]<br>    currMax := nums[<span class=\"hljs-number\">0</span>]<br>    currMin := nums[<span class=\"hljs-number\">0</span>]<br>    sumMax := nums[<span class=\"hljs-number\">0</span>]<br>    sumMin := nums[<span class=\"hljs-number\">0</span>]<br><br>   <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>        total += nums[i]<br>        currMax = max(currMax+nums[i], nums[i])<br>        sumMax  = max(sumMax, currMax)<br>        currMin = min(currMin+nums[i], nums[i])<br>        sumMin  = min(sumMin, currMin)<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 特殊情况，值全为负数，最大和就是空数组，不符合题意，要特殊处理</span><br>    <span class=\"hljs-keyword\">if</span> sumMin == total &#123;<br>        <span class=\"hljs-keyword\">return</span> sumMax<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> max(total-sumMin, sumMax)<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":681,"excerpt":"","more":"<p>分为两种情况，最大子数组在中间和最大子数组分散在两边。</p>\n<p>通过计算最大子数组和和最小子数组和来求解。</p>\n<p>时间复杂度：O(N)<br>空间复杂度： O(1)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxSubarraySumCircular</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    total := nums[<span class=\"hljs-number\">0</span>]<br>    currMax := nums[<span class=\"hljs-number\">0</span>]<br>    currMin := nums[<span class=\"hljs-number\">0</span>]<br>    sumMax := nums[<span class=\"hljs-number\">0</span>]<br>    sumMin := nums[<span class=\"hljs-number\">0</span>]<br><br>   <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>        total += nums[i]<br>        currMax = max(currMax+nums[i], nums[i])<br>        sumMax  = max(sumMax, currMax)<br>        currMin = min(currMin+nums[i], nums[i])<br>        sumMin  = min(sumMin, currMin)<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 特殊情况，值全为负数，最大和就是空数组，不符合题意，要特殊处理</span><br>    <span class=\"hljs-keyword\">if</span> sumMin == total &#123;<br>        <span class=\"hljs-keyword\">return</span> sumMax<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> max(total-sumMin, sumMax)<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"98.验证二叉搜索树","date":"2022-10-29T16:00:00.000Z","category_bar":true,"_content":"\n[leetcode](https://leetcode.cn/problems/validate-binary-search-tree/submissions/)\n\n递归实现\n\n```Go\nfunc isValidBST(root *TreeNode) bool {\n\treturn dfs(root, math.MinInt64, math.MaxInt64)\n}\n\nfunc dfs(root *TreeNode, min int, max int) bool {\n\tif root == nil {\n\t\treturn true\n\t}\n\n\t// 注意和上下边界相等的情况应该返回false\n\tif root.Val >= max || root.Val <= min {\n\t\treturn false\n\t}\n\t\n\treturn dfs(root.Left, min, root.Val) && dfs(root.Right, root.Val, max)\n}\n```","source":"_posts/算法/leetcode/98.验证二叉搜索树.md","raw":"---\ntitle: 98.验证二叉搜索树\ndate: 2022-10-30\ntags:\ncategory: \ncategory_bar: true\n---\n\n[leetcode](https://leetcode.cn/problems/validate-binary-search-tree/submissions/)\n\n递归实现\n\n```Go\nfunc isValidBST(root *TreeNode) bool {\n\treturn dfs(root, math.MinInt64, math.MaxInt64)\n}\n\nfunc dfs(root *TreeNode, min int, max int) bool {\n\tif root == nil {\n\t\treturn true\n\t}\n\n\t// 注意和上下边界相等的情况应该返回false\n\tif root.Val >= max || root.Val <= min {\n\t\treturn false\n\t}\n\t\n\treturn dfs(root.Left, min, root.Val) && dfs(root.Right, root.Val, max)\n}\n```","slug":"leetcode/98.验证二叉搜索树","published":1,"updated":"2022-10-29T17:59:01.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9u8h6pu0031ca4lanac321x","content":"<p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/submissions/\">leetcode</a></p>\n<p>递归实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isValidBST</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> dfs(root, math.MinInt64, math.MaxInt64)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(root *TreeNode, min <span class=\"hljs-type\">int</span>, max <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 注意和上下边界相等的情况应该返回false</span><br>\t<span class=\"hljs-keyword\">if</span> root.Val &gt;= max || root.Val &lt;= min &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> dfs(root.Left, min, root.Val) &amp;&amp; dfs(root.Right, root.Val, max)<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":361,"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/submissions/\">leetcode</a></p>\n<p>递归实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isValidBST</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> dfs(root, math.MinInt64, math.MaxInt64)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(root *TreeNode, min <span class=\"hljs-type\">int</span>, max <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 注意和上下边界相等的情况应该返回false</span><br>\t<span class=\"hljs-keyword\">if</span> root.Val &gt;= max || root.Val &lt;= min &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> dfs(root.Left, min, root.Val) &amp;&amp; dfs(root.Right, root.Val, max)<br>&#125;<br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl9u09l8a0000wi4l0f509t04","category_id":"cl9u09l8h0001wi4lg2dx51jb","_id":"cl9u09l8j0002wi4l4ws0eo9a"},{"post_id":"cl9u8h6om0004ca4l12nx7ni8","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6ot0008ca4l6a871ewf"},{"post_id":"cl9u8h6oc0000ca4lh92v49yx","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6ov000bca4leuqh3wc9"},{"post_id":"cl9u8h6on0005ca4l7asyg3k4","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6ow000dca4lhlouc4kw"},{"post_id":"cl9u8h6op0007ca4l0nkm2bl9","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6ox000fca4lbibm14w8"},{"post_id":"cl9u8h6oh0001ca4l3d7yb259","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6oz000hca4l1y6b0nu7"},{"post_id":"cl9u8h6ou000aca4l4b7e25ya","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6oz000jca4lcdyo9y8j"},{"post_id":"cl9u8h6ok0003ca4ldt6q909c","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p0000lca4lhov75z1m"},{"post_id":"cl9u8h6ov000cca4lfpq0gpc9","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p0000nca4lfgb0hydy"},{"post_id":"cl9u8h6ow000eca4lc36wd90h","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p2000pca4lbo1i2obd"},{"post_id":"cl9u8h6oy000gca4leq83gr2y","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p4000rca4ldd196cxt"},{"post_id":"cl9u8h6oz000ica4lbnaea0rm","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p4000tca4l2epu0qim"},{"post_id":"cl9u8h6oz000kca4lh70ohmff","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p5000vca4l33x3ab3h"},{"post_id":"cl9u8h6p0000mca4l2v3pgq1n","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p5000xca4l35bdexz1"},{"post_id":"cl9u8h6p1000oca4lb19k4r6v","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p6000zca4lf3d70mwa"},{"post_id":"cl9u8h6p3000qca4l4bt1h1jg","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p60011ca4lfes61366"},{"post_id":"cl9u8h6p4000sca4l1tv5bl1h","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p70013ca4lhavggf29"},{"post_id":"cl9u8h6p4000uca4l22gb4shy","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p70015ca4la98a0pm5"},{"post_id":"cl9u8h6p5000wca4l3okt11ks","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p80017ca4lelwd3b8s"},{"post_id":"cl9u8h6p6000yca4l5tw8b8v8","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p80019ca4l9nqj6jvr"},{"post_id":"cl9u8h6p60010ca4lahgl8c74","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p9001bca4leuzbhagp"},{"post_id":"cl9u8h6p70012ca4lfchh3g87","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6p9001dca4ld2638sxo"},{"post_id":"cl9u8h6p70014ca4l79zqfvpz","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pb001fca4l5mt19j0a"},{"post_id":"cl9u8h6p70016ca4lg1lp1p4t","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pb001hca4l4cgq5tb4"},{"post_id":"cl9u8h6p80018ca4l7w15cglg","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pc001jca4la4gz4lev"},{"post_id":"cl9u8h6p8001aca4lbr0dgnu4","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pc001lca4l6lwf5j4e"},{"post_id":"cl9u8h6p9001cca4lbrkh6ojb","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pd001nca4la7o3blgl"},{"post_id":"cl9u8h6p9001eca4lgg9pdm4m","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pd001pca4ldsgj7w8b"},{"post_id":"cl9u8h6pb001gca4l5fkeghq7","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pe001rca4l8zpv1mer"},{"post_id":"cl9u8h6pc001ica4l86eyf131","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pe001tca4l0xtsgcpp"},{"post_id":"cl9u8h6pc001kca4l4mojhjrn","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pf001vca4l864t3myy"},{"post_id":"cl9u8h6pc001mca4lbdr81ja3","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pf001xca4l6x7v32ks"},{"post_id":"cl9u8h6pd001oca4l9h3kgbv8","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pg001zca4l2nzu3w4w"},{"post_id":"cl9u8h6pd001qca4lbz6q421d","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pg0021ca4l4kdhbx74"},{"post_id":"cl9u8h6pe001sca4lhg0yhgae","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6ph0023ca4lcdvv87a7"},{"post_id":"cl9u8h6pe001uca4lgmn62gix","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6ph0025ca4l0fna50hk"},{"post_id":"cl9u8h6pf001wca4l348y50v0","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pi0027ca4lepyxaquk"},{"post_id":"cl9u8h6pg001yca4ldt0410h6","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pi0029ca4lbjjl8txg"},{"post_id":"cl9u8h6pg0020ca4lgdva2i43","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pl002bca4l0moge4kf"},{"post_id":"cl9u8h6ph0022ca4l2ik19nlo","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pm002dca4l0vr05gah"},{"post_id":"cl9u8h6ph0024ca4l7zb8c3t6","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pm002fca4l5fz0cu6i"},{"post_id":"cl9u8h6ph0026ca4lewild5ta","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pn002hca4l1b4y5l90"},{"post_id":"cl9u8h6pi0028ca4ldg442x12","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pn002jca4lbarj3g7v"},{"post_id":"cl9u8h6pj002aca4l5rw5c926","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pn002lca4l7crk0kuy"},{"post_id":"cl9u8h6pl002cca4l8hndhogx","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6po002nca4l58cp9o9d"},{"post_id":"cl9u8h6pm002eca4lfvcxhl61","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6po002pca4l7qbf7biy"},{"post_id":"cl9u8h6pm002gca4lfigu6bec","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pp002rca4l3k8re15m"},{"post_id":"cl9u8h6pn002ica4l5889cnbr","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pq002tca4l6z2sbjv5"},{"post_id":"cl9u8h6pn002kca4l9rocaxf4","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pq002vca4ler27e8vb"},{"post_id":"cl9u8h6po002mca4l7mep135k","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pr002wca4lcs8xhd6u"},{"post_id":"cl9u8h6po002oca4levtwb788","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pr002xca4l92fi1592"},{"post_id":"cl9u8h6pp002qca4l8xbt3mis","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pr002yca4l7rdjaono"},{"post_id":"cl9u8h6pp002sca4l54ol6tw3","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pr002zca4lgj7oc9qu"},{"post_id":"cl9u8h6pq002uca4l78va3q2e","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pr0030ca4le87e7v94"},{"post_id":"cl9u8h6pu0031ca4lanac321x","category_id":"cl9u8h6oj0002ca4l1snv1krf","_id":"cl9u8h6pw0032ca4lcs9xdy3i"}],"PostTag":[],"Tag":[]}}